///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'vBranchBulletin'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:18
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'vBranchBulletin'.
	/// </summary>
	public class VBranchBulletin : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_dtDate;
			private SqlInt32		_nBulletinID, _nMemoID;
			private SqlString		_strEmployeeName, _strTitle;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public VBranchBulletin()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NBulletinID</LI>
		///		 <LI>NMemoID</LI>
		///		 <LI>DtDate. May be SqlDateTime.Null</LI>
		///		 <LI>StrTitle. May be SqlString.Null</LI>
		///		 <LI>StrEmployeeName. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_vBranchBulletin_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inBulletinID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nBulletinID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMemoID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nMemoID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrTitle", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strTitle));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmployeeName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmployeeName));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_vBranchBulletin_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("VBranchBulletin::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the view.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_vBranchBulletin_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("vBranchBulletin");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_vBranchBulletin_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("VBranchBulletin::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 NBulletinID
		{
			get
			{
				return _nBulletinID;
			}
			set
			{
				SqlInt32 nBulletinIDTmp = (SqlInt32)value;
				if(nBulletinIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NBulletinID", "NBulletinID can't be NULL");
				}
				_nBulletinID = value;
			}
		}


		public SqlInt32 NMemoID
		{
			get
			{
				return _nMemoID;
			}
			set
			{
				SqlInt32 nMemoIDTmp = (SqlInt32)value;
				if(nMemoIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NMemoID", "NMemoID can't be NULL");
				}
				_nMemoID = value;
			}
		}


		public SqlDateTime DtDate
		{
			get
			{
				return _dtDate;
			}
			set
			{
				_dtDate = value;
			}
		}


		public SqlString StrTitle
		{
			get
			{
				return _strTitle;
			}
			set
			{
				_strTitle = value;
			}
		}


		public SqlString StrEmployeeName
		{
			get
			{
				return _strEmployeeName;
			}
			set
			{
				_strEmployeeName = value;
			}
		}
		#endregion
	}
}

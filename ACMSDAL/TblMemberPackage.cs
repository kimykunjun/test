///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblMemberPackage'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:09
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Text.RegularExpressions;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblMemberPackage'.
	/// </summary>
	public class TblMemberPackage : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		_fFree;
			private SqlDateTime		_dtExpiryDate, _dtWarrantyDate, _dtLastEdit, _dtStartDate, _dtPurchaseDate;
			private SqlInt32		_nVoucherTypeID, _nVoucherTypeIDOld, _nEmployeeID, _nEmployeeIDOld, _nCreditPackageID, _nCreditPackageIDOld, _nTempPackageID, _nGIRORefID, _nGIRORefIDOld, _nPackageID, _nStatusID,_nBalance,_nAdjust;
            private SqlMoney _mCreditPackageUsagePrice, _mTotalPaid;
			private SqlString		_strTempPackageCategory, _strReceiptNo, _strVoucherNumber, _strPackageCode, _strPackageCodeOld, _strRemarks, _strMembershipID, _strMembershipIDOld,_strupgradefrom, _strupgradeto;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblMemberPackage()
		{
			// Nothing for now.
		}




        //public override bool Insert_tblMemberPackage(string strMembershipID, string strPackageCode, DateTime dtPurchaseDate, int nPackageID, int errorCode)
        //{


        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Insert]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strPackageCode));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, dtPurchaseDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, errorCode));





        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        //	_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;



        //        return toReturn;
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMember::SelectLast15::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


     //   public override bool Insert_tblMemberPackage(string strMembershipID, string strPackageCode, DateTime dtPurchaseDate, int nPackageID, int errorCode)
        //     public override bool Insert_tblMemberPackage()
       
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Insert]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtPurchaseDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if (_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblReceipt_Insert' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblReceipt::Insert::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}

		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtPurchaseDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtExpiryDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtExpiryDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtWarrantyDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtWarrantyDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtLastEdit", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtLastEdit));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCreditPackageUsagePrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCreditPackageUsagePrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTempPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nTempPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrTempPackageCategory", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strTempPackageCategory));
				cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrVoucherNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strVoucherNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@nBalance", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed,_nBalance));
				cmdToExecute.Parameters.Add(new SqlParameter("@nAdjust", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed,_nAdjust));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_nPackageID = (SqlInt32)cmdToExecute.Parameters["@inPackageID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


        public void InsertMemberPackageConvertion(int nPackageID, decimal mAmount)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackageConvertion_Insert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {

                cmdToExecute.Parameters.Add(new SqlParameter("@nPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@mAmount", SqlDbType.Decimal, 8, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, decimal.Parse(mAmount.ToString("0.00"))));
              

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
             
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }

		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPackageID</LI>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrPackageCode</LI>
		///		 <LI>DtPurchaseDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtStartDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtExpiryDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtWarrantyDate. May be SqlDateTime.Null</LI>
		///		 <LI>FFree. May be SqlBoolean.Null</LI>
		///		 <LI>StrReceiptNo. May be SqlString.Null</LI>
		///		 <LI>NStatusID. May be SqlInt32.Null</LI>
		///		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>DtLastEdit. May be SqlDateTime.Null</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
		///		 <LI>MCreditPackageUsagePrice. May be SqlMoney.Null</LI>
		///		 <LI>NTempPackageID. May be SqlInt32.Null</LI>
		///		 <LI>StrTempPackageCategory. May be SqlString.Null</LI>
		///		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
		///		 <LI>StrVoucherNumber. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtPurchaseDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtExpiryDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtExpiryDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtWarrantyDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtWarrantyDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtLastEdit", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtLastEdit));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCreditPackageUsagePrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCreditPackageUsagePrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTempPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nTempPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrTempPackageCategory", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strTempPackageCategory));
				cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrVoucherNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strVoucherNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@nBalance", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed,_nBalance));
				cmdToExecute.Parameters.Add(new SqlParameter("@strUpgradeFrom", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strupgradefrom));
                cmdToExecute.Parameters.Add(new SqlParameter("@strUpgradeTo", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strupgradeto));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strMembershipID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strMembershipID' in
		/// all rows which have as value for this field the value as set in property 'StrMembershipIDOld' to 
		/// the value as set in property 'StrMembershipID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrMembershipIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWstrMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipIDOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::UpdateAllWstrMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strPackageCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strPackageCode' in
		/// all rows which have as value for this field the value as set in property 'StrPackageCodeOld' to 
		/// the value as set in property 'StrPackageCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		///		 <LI>StrPackageCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrPackageCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWstrPackageCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCodeOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWstrPackageCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::UpdateAllWstrPackageCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public void UpdatePackageStatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateStatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@nStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nStatusID));
                cmdToExecute.Parameters.Add(new SqlParameter("@mTotalPaid", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mTotalPaid));
			
               
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
              
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::UpdateAllWstrPackageCodeLogic::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }

        public void UpdateConvertedPackageStatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackageConvertion_UpdateStatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@nStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nStatusID));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::UpdateAllWstrPackageCodeLogic::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nGIRORefID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nGIRORefID' in
		/// all rows which have as value for this field the value as set in property 'NGIRORefIDOld' to 
		/// the value as set in property 'NGIRORefID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
		///		 <LI>NGIRORefIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnGIRORefIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnGIRORefIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnGIRORefIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::UpdateAllWnGIRORefIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nEmployeeID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nEmployeeID' in
		/// all rows which have as value for this field the value as set in property 'NEmployeeIDOld' to 
		/// the value as set in property 'NEmployeeID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>NEmployeeIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::UpdateAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nCreditPackageID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nCreditPackageID' in
		/// all rows which have as value for this field the value as set in property 'NCreditPackageIDOld' to 
		/// the value as set in property 'NCreditPackageID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
		///		 <LI>NCreditPackageIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnCreditPackageIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnCreditPackageIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnCreditPackageIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::UpdateAllWnCreditPackageIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nVoucherTypeID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nVoucherTypeID' in
		/// all rows which have as value for this field the value as set in property 'NVoucherTypeIDOld' to 
		/// the value as set in property 'NVoucherTypeID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
		///		 <LI>NVoucherTypeIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnVoucherTypeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnVoucherTypeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnVoucherTypeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::UpdateAllWnVoucherTypeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}
		
		//Derek 131007
		public bool UpdateMemberPackageSigPdfPath(string strSignatureID, string strSigKey, string strSigPdfPath, int nPackageID, string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();

            cmdToExecute.CommandText = @"UPDATE tblMemberPackage 
                                            SET strSignatureID = @strSignatureID, strSigKey = @strSigKey, strSigPdfPath = @strSigPdfPath
                                            WHERE nPackageID = @nPackageID AND strMembershipID = @strMembershipID";
            /*cmdToExecute.CommandText = @"UPDATE tblMemberPackage 
                                            SET strSignatureID = @strSignatureID, strSigPdfPath = @strSigPdfPath
                                            WHERE nPackageID = @nPackageID AND strMembershipID = @strMembershipID";*/
            cmdToExecute.CommandType = CommandType.Text;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@strSignatureID", SqlDbType.VarChar, 8000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strSignatureID));
                cmdToExecute.Parameters.Add(new SqlParameter("@strSigKey", SqlDbType.VarChar, 800, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strSigKey));
                cmdToExecute.Parameters.Add(new SqlParameter("@strSigPdfPath", SqlDbType.VarChar, 500, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strSigPdfPath));
                cmdToExecute.Parameters.Add(new SqlParameter("@nPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 500, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'MemberPackageSigPathUpdate' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblServiceSession::MemberPackageSigPathUpdate::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }

        //Derek 131007
        public bool UpdateMemberPackageSigPdfPath(string strSigPdfPath, int nPackageID, string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();

            cmdToExecute.CommandText = @"UPDATE tblMemberPackage 
                                            SET strSigPdfPath = @strSigPdfPath
                                            WHERE nPackageID = @nPackageID AND strMembershipID = @strMembershipID";
            cmdToExecute.CommandType = CommandType.Text;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {                
                cmdToExecute.Parameters.Add(new SqlParameter("@strSigPdfPath", SqlDbType.VarChar, 500, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strSigPdfPath));
                cmdToExecute.Parameters.Add(new SqlParameter("@nPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 500, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'MemberPackageSigPathUpdate' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblServiceSession::MemberPackageSigPathUpdate::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPackageID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strMembershipID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWstrMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::DeleteAllWstrMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strPackageCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrPackageCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWstrPackageCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWstrPackageCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::DeleteAllWstrPackageCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nGIRORefID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnGIRORefIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnGIRORefIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnGIRORefIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::DeleteAllWnGIRORefIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nEmployeeID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::DeleteAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nCreditPackageID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnCreditPackageIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnCreditPackageIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnCreditPackageIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::DeleteAllWnCreditPackageIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nVoucherTypeID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnVoucherTypeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnVoucherTypeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnVoucherTypeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::DeleteAllWnVoucherTypeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPackageID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>NPackageID</LI>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrPackageCode</LI>
		///		 <LI>DtPurchaseDate</LI>
		///		 <LI>DtStartDate</LI>
		///		 <LI>DtExpiryDate</LI>
		///		 <LI>DtWarrantyDate</LI>
		///		 <LI>FFree</LI>
		///		 <LI>StrReceiptNo</LI>
		///		 <LI>NStatusID</LI>
		///		 <LI>NGIRORefID</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>DtLastEdit</LI>
		///		 <LI>StrRemarks</LI>
		///		 <LI>NCreditPackageID</LI>
		///		 <LI>MCreditPackageUsagePrice</LI>
		///		 <LI>NTempPackageID</LI>
		///		 <LI>StrTempPackageCategory</LI>
		///		 <LI>NVoucherTypeID</LI>
		///		 <LI>StrVoucherNumber</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_nPackageID = (Int32)toReturn.Rows[0]["nPackageID"];
					_strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
					_strPackageCode = (string)toReturn.Rows[0]["strPackageCode"];
					_dtPurchaseDate = toReturn.Rows[0]["dtPurchaseDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtPurchaseDate"];
					_dtStartDate = toReturn.Rows[0]["dtStartDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartDate"];
					_dtExpiryDate = toReturn.Rows[0]["dtExpiryDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtExpiryDate"];
					_dtWarrantyDate = toReturn.Rows[0]["dtWarrantyDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtWarrantyDate"];
					_fFree = toReturn.Rows[0]["fFree"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fFree"];
					_strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
					_nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatusID"];
					_nGIRORefID = toReturn.Rows[0]["nGIRORefID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nGIRORefID"];
					_nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
					_dtLastEdit = toReturn.Rows[0]["dtLastEdit"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtLastEdit"];
					_strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
					_nCreditPackageID = toReturn.Rows[0]["nCreditPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nCreditPackageID"];
					_mCreditPackageUsagePrice = toReturn.Rows[0]["mCreditPackageUsagePrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCreditPackageUsagePrice"];
					_nTempPackageID = toReturn.Rows[0]["nTempPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nTempPackageID"];
					_strTempPackageCategory = toReturn.Rows[0]["strTempPackageCategory"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strTempPackageCategory"];
					_nVoucherTypeID = toReturn.Rows[0]["nVoucherTypeID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nVoucherTypeID"];
					_strVoucherNumber = toReturn.Rows[0]["strVoucherNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strVoucherNumber"];
					_nBalance = toReturn.Rows[0]["nBalance"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nBalance"];
                    _strupgradefrom = toReturn.Rows[0]["strupgradefrom"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strupgradefrom"];
                    _strupgradeto = toReturn.Rows[0]["strupgradeto"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strupgradeto"];			
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public  DataTable SelectOneReceipt()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectOne_Receipt]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblMemberPackage");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@strReceiptNo", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 20, 0, "", DataRowVersion.Proposed, _strReceiptNo));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _nPackageID = (Int32)toReturn.Rows[0]["nPackageID"];                  
                    _strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
                    _mTotalPaid = toReturn.Rows[0]["mTotalPaidAmt"] == System.DBNull.Value ? 0 : (Decimal)toReturn.Rows[0]["mTotalPaidAmt"];                   
					_strupgradefrom = toReturn.Rows[0]["strupgradefrom"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strupgradefrom"];                   
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectFreePackage()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectFreePackage]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblMemberPackage");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _nPackageID = (Int32)toReturn.Rows[0]["nPackageID"];
                    _strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
                    _strPackageCode = (string)toReturn.Rows[0]["strPackageCode"];
                    _dtPurchaseDate = toReturn.Rows[0]["dtPurchaseDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtPurchaseDate"];
                    _dtStartDate = toReturn.Rows[0]["dtStartDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartDate"];
                    _dtExpiryDate = toReturn.Rows[0]["dtExpiryDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtExpiryDate"];
                    _dtWarrantyDate = toReturn.Rows[0]["dtWarrantyDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtWarrantyDate"];
                    _fFree = toReturn.Rows[0]["fFree"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fFree"];
                    _strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
                    _nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatusID"];
                    _nGIRORefID = toReturn.Rows[0]["nGIRORefID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nGIRORefID"];
                    _nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
                    _dtLastEdit = toReturn.Rows[0]["dtLastEdit"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtLastEdit"];
                    _strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
                    _nCreditPackageID = toReturn.Rows[0]["nCreditPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nCreditPackageID"];
                    _mCreditPackageUsagePrice = toReturn.Rows[0]["mCreditPackageUsagePrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCreditPackageUsagePrice"];                 
                    _nTempPackageID = toReturn.Rows[0]["nTempPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nTempPackageID"];
                    _strTempPackageCategory = toReturn.Rows[0]["strTempPackageCategory"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strTempPackageCategory"];
                    _nVoucherTypeID = toReturn.Rows[0]["nVoucherTypeID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nVoucherTypeID"];
                    _strVoucherNumber = toReturn.Rows[0]["strVoucherNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strVoucherNumber"];
                    _nBalance = toReturn.Rows[0]["nBalance"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nBalance"];

                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
     
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strMembershipID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWstrMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAllWstrMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strPackageCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrPackageCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWstrPackageCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWstrPackageCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAllWstrPackageCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nGIRORefID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnGIRORefIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnGIRORefIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnGIRORefIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAllWnGIRORefIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public DataTable SelectAllWnGIROPackageIDLogic()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnGIROPackageIDLogic]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblMemberPackage");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnGIROPackageIDLogic' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::SelectAllWnGIROPackageIDLogic::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nEmployeeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nCreditPackageID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnCreditPackageIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnCreditPackageIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnCreditPackageIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAllWnCreditPackageIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nVoucherTypeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnVoucherTypeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnVoucherTypeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnVoucherTypeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberPackage::SelectAllWnVoucherTypeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public int GetMemberPackageUtilizationPermission(int nStatusID, int Balance)
        {
            int IsAllow = 0;

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_RecapSigNewServiceSessionRestriction]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            //DataTable toReturn = new DataTable("tblRecapSigNewServiceSessionRestriction");
            //SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@nStatusID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, nStatusID));
                cmdToExecute.Parameters.Add(new SqlParameter("@Balance", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, Balance));
                cmdToExecute.Parameters.Add(new SqlParameter("@IsAllow", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, IsAllow));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                //adapter.Fill(toReturn);
                cmdToExecute.ExecuteNonQuery();

                IsAllow = Convert.ToInt32(cmdToExecute.Parameters["@IsAllow"].Value);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_RecapSigNewServiceSessionRestriction' reported the ErrorCode: " + _errorCode);
                }

                return IsAllow;
                //return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::sp_RecapSigNewServiceSessionRestriction::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                //adapter.Dispose();
            }
        }
		
		public DataTable GetCreditUsageMemberPackageList(int ID, string searchTrigger)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_RecapSigCreditUsageMemberPkgList]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable("tblRecapSigCreditUsageMemberPkgList");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@searchTrigger", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, searchTrigger));
                cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                toReturn = new DataTable();
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_RecapSigCreditUsageMemberPkgList' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::sp_RecapSigCreditUsageMemberPkgList::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable GetCreditUsageMemberPackageIDs(int ID, string searchTrigger)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_RecapSigCreditUsageMemberPkgIDs]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable("tblRecapSigCreditUsageMemberPkgIDs");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@searchTrigger", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, searchTrigger));
                cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                toReturn = new DataTable();
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_RecapSigCreditUsageMemberPkgIDs' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::sp_RecapSigCreditUsageMemberPkgIDs::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public string GetSignaturePath(int nPackageID)
        {
            string strSigPdfPath = "";

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = @"SELECT ISNULL(strSigPdfPath, '') AS strSigPdfPath 
                                            FROM tblMemberPackage WHERE nPackageID = @nPackageID";
            cmdToExecute.CommandType = CommandType.Text;
            cmdToExecute.Connection = _mainConnection;
            cmdToExecute.Parameters.AddWithValue("@nPackageID", nPackageID);

            try
            {                
                if (_mainConnectionIsCreatedLocal)
                {
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }
                SqlDataReader dr = cmdToExecute.ExecuteReader();
                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        strSigPdfPath = dr["strSigPdfPath"].ToString().Replace("\\", "\\");
                    }
                }
                dr.Close();
            }
            catch
            {
                strSigPdfPath = "";
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
            return strSigPdfPath;
        }

        //Added by TBBC on 9 September 2015 for SG 50 Promotion Upgrade issue
        public DataTable GetSG50PromotionUpgrade(string strReceiptNo)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[SP_GetActualPackagePriceForUpgrade]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            DataTable toReturn = new DataTable("GetActualPackagePriceForUpgradeSG50");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@ReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strReceiptNo));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'SP_GetActualPackagePriceForUpgrade' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::SP_GetActualPackagePriceForUpgrade::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        //End Added

		#region Class Property Declarations
		public SqlInt32 NPackageID
		{
			get
			{
				return _nPackageID;
			}
			set
			{
				SqlInt32 nPackageIDTmp = (SqlInt32)value;
				if(nPackageIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NPackageID", "NPackageID can't be NULL");
				}
				_nPackageID = value;
			}
		}


		public SqlString StrMembershipID
		{
			get
			{
				return _strMembershipID;
			}
			set
			{
				SqlString strMembershipIDTmp = (SqlString)value;
				if(strMembershipIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrMembershipID", "StrMembershipID can't be NULL");
				}
				_strMembershipID = value;
			}
		}
		public SqlString StrMembershipIDOld
		{
			get
			{
				return _strMembershipIDOld;
			}
			set
			{
				SqlString strMembershipIDOldTmp = (SqlString)value;
				if(strMembershipIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrMembershipIDOld", "StrMembershipIDOld can't be NULL");
				}
				_strMembershipIDOld = value;
			}
		}


		public SqlString StrPackageCode
		{
			get
			{
				return _strPackageCode;
			}
			set
			{
				SqlString strPackageCodeTmp = (SqlString)value;
				if(strPackageCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrPackageCode", "StrPackageCode can't be NULL");
				}
				_strPackageCode = value;
			}
		}
		public SqlString StrPackageCodeOld
		{
			get
			{
				return _strPackageCodeOld;
			}
			set
			{
				SqlString strPackageCodeOldTmp = (SqlString)value;
				if(strPackageCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrPackageCodeOld", "StrPackageCodeOld can't be NULL");
				}
				_strPackageCodeOld = value;
			}
		}


		public SqlDateTime DtPurchaseDate
		{
			get
			{
				return _dtPurchaseDate;
			}
			set
			{
				_dtPurchaseDate = value;
			}
		}


		public SqlDateTime DtStartDate
		{
			get
			{
				return _dtStartDate;
			}
			set
			{
				_dtStartDate = value;
			}
		}


		public SqlDateTime DtExpiryDate
		{
			get
			{
				return _dtExpiryDate;
			}
			set
			{
				_dtExpiryDate = value;
			}
		}


		public SqlDateTime DtWarrantyDate
		{
			get
			{
				return _dtWarrantyDate;
			}
			set
			{
				_dtWarrantyDate = value;
			}
		}


		public SqlBoolean FFree
		{
			get
			{
				return _fFree;
			}
			set
			{
				_fFree = value;
			}
		}


		public SqlString StrReceiptNo
		{
			get
			{
				return _strReceiptNo;
			}
			set
			{
				_strReceiptNo = value;
			}
		}


		public SqlInt32 NStatusID
		{
			get
			{
				return _nStatusID;
			}
			set
			{
				_nStatusID = value;
			}
		}


		public SqlInt32 NGIRORefID
		{
			get
			{
				return _nGIRORefID;
			}
			set
			{
				_nGIRORefID = value;
			}
		}
		public SqlInt32 NGIRORefIDOld
		{
			get
			{
				return _nGIRORefIDOld;
			}
			set
			{
				_nGIRORefIDOld = value;
			}
		}


		public SqlInt32 NEmployeeID
		{
			get
			{
				return _nEmployeeID;
			}
			set
			{
				SqlInt32 nEmployeeIDTmp = (SqlInt32)value;
				if(nEmployeeIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeID", "NEmployeeID can't be NULL");
				}
				_nEmployeeID = value;
			}
		}
		public SqlInt32 NEmployeeIDOld
		{
			get
			{
				return _nEmployeeIDOld;
			}
			set
			{
				SqlInt32 nEmployeeIDOldTmp = (SqlInt32)value;
				if(nEmployeeIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeIDOld", "NEmployeeIDOld can't be NULL");
				}
				_nEmployeeIDOld = value;
			}
		}


		public SqlDateTime DtLastEdit
		{
			get
			{
				return _dtLastEdit;
			}
			set
			{
				_dtLastEdit = value;
			}
		}


		public SqlString StrRemarks
		{
			get
			{
				return _strRemarks;
			}
			set
			{
				_strRemarks = value;
			}
		}


		public SqlInt32 NCreditPackageID
		{
			get
			{
				return _nCreditPackageID;
			}
			set
			{
				_nCreditPackageID = value;
			}
		}

		public SqlInt32 nBalance
		{
			get
			{
				return _nBalance;
			}
			set
			{
				_nBalance = value;
			}
		}

		public SqlInt32 nAdjust
		{
			get
			{
				return nAdjust;
			}
			set
			{
				_nAdjust = value;
			}
		}

		public SqlInt32 NCreditPackageIDOld
		{
			get
			{
				return _nCreditPackageIDOld;
			}
			set
			{
				_nCreditPackageIDOld = value;
			}
		}


		public SqlMoney MCreditPackageUsagePrice
		{
			get
			{
				return _mCreditPackageUsagePrice;
			}
			set
			{
				_mCreditPackageUsagePrice = value;
			}
		}

        public SqlMoney MTotalPaid
        {
            get
            {
                return _mTotalPaid;
            }
            set
            {
                _mTotalPaid = value;
            }
        }


		public SqlInt32 NTempPackageID
		{
			get
			{
				return _nTempPackageID;
			}
			set
			{
				_nTempPackageID = value;
			}
		}


		public SqlString StrTempPackageCategory
		{
			get
			{
				return _strTempPackageCategory;
			}
			set
			{
				_strTempPackageCategory = value;
			}
		}


		public SqlInt32 NVoucherTypeID
		{
			get
			{
				return _nVoucherTypeID;
			}
			set
			{
				_nVoucherTypeID = value;
			}
		}
		public SqlInt32 NVoucherTypeIDOld
		{
			get
			{
				return _nVoucherTypeIDOld;
			}
			set
			{
				_nVoucherTypeIDOld = value;
			}
		}


		public SqlString StrVoucherNumber
		{
			get
			{
				return _strVoucherNumber;
			}
			set
			{
				_strVoucherNumber = value;
			}
		}

		public SqlString StrUpgradeFrom
        {
            get
            {
                return _strupgradefrom;
            }
            set
            {
                _strupgradefrom = value;
            }
        }

        public SqlString StrUpgradeTo
        {
            get
            {
                return _strupgradeto;
            }
            set
            {
                _strupgradeto = value;
            }
        }
		

		#endregion

		#region PickHui

		public DataTable GetFreePackage(string strReceiptNo)
		{
			string cmdtext = "";

			cmdtext = " select strreceiptno,strDescription,MP.strpackagecode from tblmemberpackage Mp inner join tblpackage p on Mp.strPackageCode = p.strPackageCode" +
				" where strreceiptno = @StrReceiptNo and fFree = 1";
		
			return base.LoadData(cmdtext, new string[] {"@StrReceiptNo"}, new object[] {strReceiptNo});
			
		}

        public DataTable GetConvertedPackage(string strReceiptNo)
        {
            string cmdtext = "";
            DataTable dt, dt2, dtConvertedPackages=null;
            dtConvertedPackages = new DataTable();
            
            string packageCode, packageDescription;
            cmdtext = " select strRemarks from tblReceipt" +
                " where strreceiptno = @StrReceiptNo ";

            if (!dtConvertedPackages.Columns.Contains("strReceiptNo"))
            {
                DataColumn colReceiptNo = new DataColumn("strReceiptNo", System.Type.GetType("System.String"));
                dtConvertedPackages.Columns.Add(colReceiptNo);
            }

            if (!dtConvertedPackages.Columns.Contains("strDescription"))
            {
                DataColumn colDescription = new DataColumn("strDescription", System.Type.GetType("System.String"));
                dtConvertedPackages.Columns.Add(colDescription);
            }                                    

            dt = base.LoadData(cmdtext, new string[] { "@StrReceiptNo" }, new object[] { strReceiptNo });
            if (dt != null)
            {
                if (dt.Rows[0]["strRemarks"].ToString().Contains("Convert From:\n"))
                {
                    string[] convertedPackages = dt.Rows[0]["strRemarks"].ToString().Replace("Convert From:\n", "").Split('\n');
                    foreach (string convertPackage in convertedPackages)
                    {
                        if (convertPackage.Trim() != "")
                        {
                            string[] convertedAmounts = convertPackage.Split(':');
                            string[] packages = Regex.Split(convertedAmounts[0].ToString(), " / ");
                            //packageCode = packages[1].ToString().Trim();

                            if (packages[0].ToString().Contains("(B)"))
                            {
                                cmdtext = "select pge.strDescription +' - Bal: $" + convertedAmounts[1].ToString() + "' as strDescription from tblReceiptEntries re, tblPackageGroup pge  where nEntryID =@NPackageID and re.strCode=pge.strPackageGroupCode ";
                                dt2 = base.LoadData(cmdtext, new string[] { "@NPackageID" }, new object[] { packages[0].ToString().Replace("(B)", "").Trim() });

                                if (dt2 != null)
                                {
                                    DataRow row = dtConvertedPackages.NewRow();
                                    row["strReceiptNo"] = strReceiptNo;
                                    row["strDescription"] = dt2.Rows[0]["strDescription"];
                                    dtConvertedPackages.Rows.Add(row);
                                }
                                dt2.Dispose();
                            }
                            else if (packages[0].ToString().Contains("(C)"))
                            {
                                cmdtext = " select strDescription +' - Bal: $" + convertedAmounts[1].ToString() + "' as strDescription from tblMemberCreditPackage mp, tblCreditPackage p where nCreditPackageID = @NPackageID and mp.strCreditPackageCode=p.strCreditPackageCode ";
                                dt2 = base.LoadData(cmdtext, new string[] { "@NPackageID" }, new object[] { packages[0].ToString().Replace("(C)", "").Trim() });

                                if (dt2 != null)
                                {
                                    DataRow row = dtConvertedPackages.NewRow();
                                    row["strReceiptNo"] = strReceiptNo;
                                    row["strDescription"] = dt2.Rows[0]["strDescription"];
                                    dtConvertedPackages.Rows.Add(row);
                                }
                                dt2.Dispose();
                            }
                            else
                            {
                                cmdtext = " select strDescription +' - Bal: $" + convertedAmounts[1].ToString() + "' as strDescription from tblMemberPackage mp, tblPackage p where nPackageID = @NPackageID and mp.strPackageCode=p.strPackageCode ";
                                dt2 = base.LoadData(cmdtext, new string[] { "@NPackageID" }, new object[] { packages[0].ToString().Trim() });

                                if (dt2 != null)
                                {
                                    DataRow row = dtConvertedPackages.NewRow();
                                    row["strReceiptNo"] = strReceiptNo;
                                    row["strDescription"] = dt2.Rows[0]["strDescription"];
                                    dtConvertedPackages.Rows.Add(row);
                                }
                                dt2.Dispose();
                            }
                        }
                    } 
                }                               
            }
            dt.Dispose();
            dtConvertedPackages.AcceptChanges();
            return dtConvertedPackages;
        }
		public void SaveData(DataTable table)
		{
			base.SaveData(table, "Select * From tblMemberPackage");
		}

		public DataTable GetMemberGIROPackage(string strMemberID, int nCategoryID)
		{
			// string cmdtext = ""; ??

            string cmdtext = " Select B.mListPrice,A.*, B.strDescription, B.strFreePkgCode" +
                " from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) " +
                " left join tblReceipt R on A.strReceiptNo=R.strReceiptNo " +
                "where A.strMemberShipID = @strMemberShipID AND B.nCategoryID = " + nCategoryID.ToString() + " " +
                " and A.fFree = 0 and fVoid=0 ";
            
			return base.LoadData(cmdtext, new string[] {"@strMemberShipID"}, new object[] {strMemberID});
		}

		public DataTable GetMemberPackage(int nPackageID)
		{
			string cmdtext = "";

            cmdtext = " Select A.*, CAST(ISNULL(B.fGIRO, 0) AS INT) AS fGIRO, B.nPackageDuration, B.strDescription, B.nMaxSession, B.mListPrice, B.mBaseUnitPrice, C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode, B.nFreeSession, B.nFreeDuration, D.mSubTotal,mSubTotal, " +
                "(select SUM(mSubTotal) from tblReceiptEntries where strReceiptNo=A.strReceiptNo) as totalSubTotal, " +
                "(select mNettAmount from tblReceipt where strReceiptNo=A.strReceiptNo) as mNettAmount, " +
                "(select strDiscountCode from tblReceipt where strReceiptNo=A.strReceiptNo) as strDiscountCode, " +
                "(select mOutstandingAmount from tblReceipt where strReceiptNo=A.strReceiptNo) as mOutstandingAmount, B.fEntries, " +
                "ISNULL((ISNULL(R.mUpgradeAmount,0)+ISNULL(D.mUpgradeAmount,0)) * (case when (select SUM(mSubTotal) from tblReceiptEntries where strReceiptNo=A.strReceiptNo)=0 or (D.mSubTotal/D.nQuantity)=0 then 1 else ((D.mSubTotal/D.nQuantity)/ (select SUM(mSubTotal) from tblReceiptEntries where strReceiptNo=A.strReceiptNo)) end),0) as mUpgradeAmount, dbo.GetMemberPackageBalance(A.nPackageID) as Balance " +
                " from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) inner join " +
                " tblCategory C on (B.nCategoryID = C.nCategoryID)  " +
                "left join tblReceiptEntries D on (A.strReceiptNo=D.strReceiptNo AND A.strPackageCode=D.strCode) " +
                "left join tblReceipt R on D.strReceiptNo=R.strReceiptNo " +
                "where nPackageID = @nPackageID ";
		
			return base.LoadData(cmdtext, new string[] {"@nPackageID"}, new object[] {nPackageID});
			
		}
		
		public bool IsMemberHaveUnLinkedPackage(string strMembershipID)
		{
			string cmdText = "Select nPackageID from tblMemberPackage A inner join tblPackage B on A.strPackageCode = B.strPackageCode AND " + 
							" B.strPackageCode = 'Unlinked' AND A.strMembershipID = @strMembershipID";

			DataTable table = base.LoadData(cmdText, new string[] {"@strMembershipID"}, 
				new object[] {strMembershipID});

			return table.Rows.Count > 0;
        }

        public bool IsPackageMemberGIROPackage(int nPackageID)
        {
            object obj = base.ExecuteScalar("select isnull(b.fGIRO, 0) fGIRO from tblMemberPackage a, tblPackage b where a.strPackageCode=b.strPackageCode and nPackageID= @nPackageID ",
          new string[] { "@nPackageID" }, new object[] { nPackageID });

            if (obj != null)
            {
                bool reward = (bool)((bool)obj);
                return reward;
            }
            return false;

        }

        //return ACMS.Convert.ToBoolean(
        

        public DataTable GetMemberUnLinkedPackage(string strMembershipID)
        {
            string cmdText = "Select nPackageID from tblMemberPackage A inner join tblPackage B on A.strPackageCode = B.strPackageCode AND " +
                            " B.strPackageCode = 'Unlinked' AND A.strMembershipID = @strMembershipID";

            DataTable table = base.LoadData(cmdText, new string[] { "@strMembershipID" },
                new object[] { strMembershipID });

            return table;
        }

		public bool IsUnlimitedPackage(int nPackageID)
		{
			string cmdtext = "";

            cmdtext = " Select A.nPackageID, B.nMaxSession, B.strFreePkgCode  from tblMemberPackage A inner join tblPackage B " + 
				" on (A.strPackageCode = B.strPackageCode) " + 
				" where A.nPackageID = @nPackageID ";
		
			DataTable table = base.LoadData(cmdtext, new string[] {"@nPackageID"}, new object[] {nPackageID});
			
			return table.Rows[0]["nMaxSession"].ToString() == "9999";
		}
        //jackie 1203
 
       public int CalculateSpecialSessionPackages(string strMemberID, int nCategoryID)
        {

            object obj = base.ExecuteScalar("SELECT COUNT(DISTINCT ca.dtdate) AS NumberOfCustomers from tblClassAttendance ca, tblClassInstance ci Where nPackageID = " + nCategoryID.ToString() + " and  " +
                               " ca.nClassInstanceID=ci.nClassInstanceID and strMemberShipID = @strMembershipID and	(nStatusID = 1 or nStatusID = 2 or nStatusID = 4 or nStatusID is null) and strClassCode<>'GYM' ",
             new string[] { "@strMemberShipID" }, new object[] { strMemberID });

            if (obj != null)
            {
                int reward = (int)((int)obj);
                return reward;
            }
            return 0;
        }


       public int CalculateTotalGIRO(string strMemberID, string strPackageID, string strPackageCode)
       {

           object obj = base.ExecuteScalar("SELECT COUNT(r.strMembershipID) AS NumberOfTotalGIRO from tblReceipt r,tblReceiptEntries re Where  r.strReceiptNo=re.strReceiptNo  and  " +
                              " strMemberShipID = @strMembershipID and	 fVoid=0 and (re.strCode=@strPackageID or re.strCode=@strPackageCode )",
            new string[] { "@strMemberShipID", "@strPackageID", "strPackageCode" }, new object[] { strMemberID, strPackageID, strPackageCode });
           
           if (obj != null)
           {
               int reward = (int)((int)obj);
               return reward;
           }
           return 0;
       }


        public string GetPackageCode(string strMemberID, int nCategoryID)
        {

            object obj = base.ExecuteScalar("select strpackagecode from tblmemberpackage where  nPackageID= " + nCategoryID.ToString() + " and  " +
                 " strMemberShipID = @strMembershipID ",
             new string[] { "@strMemberShipID" }, new object[] { strMemberID });

            if (obj != null)
            {
                string reward = (string)((string)obj);
                return reward;
            }
            return "";
        }

        public DataTable SelectActivenExpiryMemberPackage(string strMembershipID)//OS
        {
            string cmdtext = "";
            DataTable dt1, dt2, dt3;
            if (strMembershipID != "")
            {               
                cmdtext = "sp_SelectActivenExpiryMemberPackage";

                dt1 = base.LoadData("sp", cmdtext, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
             
                return dt1;
            }
            else
            {
                cmdtext = "Select A.*, D.strEmployeeName, B.strDescription, B.nMaxSession, C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode, B.fEntries  " +
                    " from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) inner join " +
                    " tblCategory C on (B.nCategoryID = C.nCategoryID)  " +
                    " Left Outer Join tblEmployee D on A.nEmployeeID = D.nEmployeeID " +
                    " where (A.nStatusID = 0 or A.nStatusID = 1 or A.nStatusID = 3 or A.nStatusID = 4)";
                return base.LoadData(cmdtext);
            }
        }
      
        public DataTable GetActivenNonFreeMemberPackageNew(string strMembershipID, int nCategoryID)//OS
        {
            string cmdtext = "";
            
            cmdtext = "select ( SELECT COUNT(*) FROM [dbo].[tblServiceSession] s WHERE nStatusID = 5 and A.nPackageID = S.nPackageID)  as 'Usage', " +
                "B.mlistprice, A.*,B.strDescription, B.nPackageDuration, B.nMaxSession, B.mListPrice, ROUND(B.mBaseUnitPrice,2) as mBaseUnitPrice, " +
                "C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode,(select SUM(mSubTotal)+SUM(ISNULL(mUpgradeAmount,0)) from tblReceiptEntries re where A.strReceiptNo=re.strReceiptNo and re.strCode=A.strPackageCode)/(select SUM(nQuantity) from tblReceiptEntries re where A.strReceiptNo=re.strReceiptNo and re.strCode=A.strPackageCode) as mSubTotal, ISNULL(B.nFreeSession,0) as nFreeSession, " +
                "ISNULL(B.nFreeDuration,0) as nFreeDuration, B.fNoRestrictionUpgrade, (select ISNULL(SUM(mSubTotal)+SUM(ISNULL(mUpgradeAmount,0)),0) from tblReceiptEntries " +
                "where strReceiptNo=A.strReceiptNo and strCode<>'JOINFEES' and strCode<>'JOINFEE') as totalSubTotal, " +
                "mNettAmount, strDiscountCode, 0 as " +
                "mOutstandingAmount, 'Normal Package' as strPackageType, " +
                "(select ISNULL(SUM(ISNULL(mUpgradeAmount,0)),0) from tblReceiptEntries where strReceiptNo=A.strReceiptNo)+ISNULL(R.mUpgradeAmount,0) as mUpgradeAmount, " +
                "B.strFreePkgCode, (select COUNT(nSessionID) from tblServiceSession s, " +
                "tblPackage p where s.strServiceCode =p.strPackageCode and nStatusID=5 and nPackageID = (select top 1 nPackageID from " +
                "tblMemberPackage where strMembershipID=A.strMembershipID and strPackageCode=E.strPackageCode and strReceiptNo=A.strReceiptNo and fFree=1)) as " +
                "nFreeUtil, (select ISNULL(SUM(mBaseUnitPrice),0) from tblServiceSession s, tblPackage p where s.strServiceCode =p.strPackageCode " +
                "and nStatusID=5 and nPackageID = (select top 1 nPackageID from tblMemberPackage where strMembershipID=A.strMembershipID " +
                "and strPackageCode=A.strPackageCode and strReceiptNo=A.strReceiptNo and ffree=0)) + (select ISNULL(SUM(mBaseUnitPrice),0) " +
                "from tblServiceSession s, tblPackage p where s.strServiceCode =p.strPackageCode and nStatusID=5 and nPackageID = " +
                "(select top 1 nPackageID from tblMemberPackage where strMembershipID=A.strMembershipID and strPackageCode=E.strPackageCode and " +
                "strReceiptNo=A.strReceiptNo and fFree=1)) as mFreeUtil, B.fEntries, dbo.GetReceiptTotalPaidAmount(R.strReceiptNo) as mTotalPaid " +
                "from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) " +
                "inner join  tblCategory C on (B.nCategoryID = C.nCategoryID) " +
                "left join tblPackage E on (B.strFreePkgCode=E.strPackageCode) left join tblReceipt R " +
                "on A.strReceiptNo=R.strReceiptNo where (nStatusID = 0 ) And   A.strMembershipID = @strMembershipID " +
                "AND ((dtExpiryDate is not null AND @date <= dtExpiryDate) or dtExpiryDate " +
                "is null) AND fFree = 0 AND B.mListPrice>= B.mBaseUnitPrice AND B.mlistprice>0 AND A.strPackageCode<>'JOINFEES' AND A.strPackageCode<>'JOINFEE' ";                 
                      
            switch (nCategoryID.ToString())
            {
                case "1":
                    cmdtext += "AND (C.nCategoryID=1) ";
                    break;
                case "3":
                    cmdtext += "AND C.nCategoryID=3 ";
                    break;
                case "4": case "5": case "6": case "7": case "9":
                    cmdtext += "AND (C.nCategoryID=4 OR C.nCategoryID=5 OR C.nCategoryID=6 OR C.nCategoryID=7 OR C.nCategoryID=9) ";                                
                    break;
                case "36":
                    cmdtext += "AND (C.nCategoryID=1 OR C.nCategoryID=4 OR C.nCategoryID=5 OR C.nCategoryID=6 OR C.nCategoryID=7 OR C.nCategoryID=36 OR C.nCategoryID=37) ";
                    break;
                case "37":
                    cmdtext += "AND (C.nCategoryID=1 OR C.nCategoryID=4 OR C.nCategoryID=5 OR C.nCategoryID=6 OR C.nCategoryID=7 OR C.nCategoryID=36 OR C.nCategoryID=37) ";
                    break;            
            }
            
            return base.LoadData(cmdtext, new string[] { "@strMembershipID", "@date" }, new object[] { strMembershipID, DateTime.Today.Date });

        }
        public DataTable GetActivenNonFreeMemberPackage(string strMembershipID)//OS
        {
            string cmdtext = "";

            cmdtext = " select ( SELECT COUNT(*)	FROM [dbo].[tblServiceSession] s WHERE nStatusID = 5 and A.nPackageID = S.nPackageID)  as 'Usage',mlistprice,mbaseunitprice," +
                 "  A.*,B.strDescription, B.nMaxSession, B.mListPrice, B.mBaseUnitPrice, C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode " +
                " from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) inner join " +
                " tblCategory C on (B.nCategoryID = C.nCategoryID)  " +
                "  where (nStatusID = 0 ) And  " +
                " A.strMembershipID = @strMembershipID AND ((dtExpiryDate is not null AND @date <= dtExpiryDate) or dtExpiryDate is null) AND fFree = 0 ";

            return base.LoadData(cmdtext, new string[] { "@strMembershipID", "@date" }, new object[] { strMembershipID, DateTime.Today.Date });

        }
        //20/03/2012 jackie
        public DataTable GetActivenNewVersionNonFreeMemberPackage(string strMembershipID)
        {
            string cmdtext = "";

            //04/03/2012 jackie
            //cmdtext = " select ( SELECT COUNT(*)	FROM [dbo].[tblServiceSession] s WHERE nStatusID = 5 and A.nPackageID = S.nPackageID)  as 'Usage',mlistprice,mbaseunitprice," +
            //     "  A.*, B.strDescription, B.nMaxSession, B.mListPrice, B.mBaseUnitPrice, C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode " +
            //    " from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) inner join " +
            //    " tblCategory C on (B.nCategoryID = C.nCategoryID)  where (nStatusID = 0 ) And " +
            //    " A.strMembershipID = @strMembershipID AND ((dtExpiryDate is not null AND @date <= dtExpiryDate) or dtExpiryDate is null) AND fFree = 0 "; 
            // createpackages
            cmdtext = " Select mlistprice,mbaseunitprice,A.*, B.strDescription, B.nMaxSession, B.mListPrice, B.mBaseUnitPrice, C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode " +
                " from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) inner join " +
                " tblCategory C on (B.nCategoryID = C.nCategoryID)  where (nStatusID = 0 ) And " +
                "  b.dtValidStart <=GETDATE() and b.dtValidEnd >= GETDATE() and b.nCategoryID=5  and " +
                " A.strMembershipID = @strMembershipID AND ((dtExpiryDate is not null AND @date <= dtExpiryDate) or dtExpiryDate is null) AND fFree = 0 ";

            return base.LoadData(cmdtext, new string[] { "@strMembershipID", "@date" }, new object[] { strMembershipID, DateTime.Today.Date });

        }
		public DataTable GetActivenMemberPackage(string strMembershipID)
		{
			string cmdtext = "";

            cmdtext = " Select A.*, B.strDescription, B.nMaxSession, B.mListPrice, B.mBaseUnitPrice, C.nCategoryID, C.strDescription as CategoryDescription, B.strFreePkgCode, B.nPackageDuration " + 
				" from tblMemberPackage A inner join tblPackage B on (A.strPackageCode = B.strPackageCode) inner join " + 
				" tblCategory C on (B.nCategoryID = C.nCategoryID)  where (nStatusID = 0 ) And " +
                " A.strMembershipID = @strMembershipID AND ((dtExpiryDate is not null AND @date <= dtExpiryDate) or dtExpiryDate is null) and A.strPackageCode <> 'Unlinked' and A.strPackageCode <> 'JOINFEES' and A.strPackageCode <> 'JOINFEE' " +
                " order by dtExpiryDate desc "; 
		
			return base.LoadData(cmdtext, new string[] {"@strMembershipID", "@date"}, new object[] {strMembershipID, DateTime.Today.Date});
			
		}

		/// <summary>
		/// this is use when want to edit/update the service session. 
		/// Only query the nPackageId that is applyable to certain service code bcoz when update the service session, 
    		/// we can change the nPackageID but cant change the service Code.
		/// </summary>
		/// <param name="strMembershipID"></param>
		/// <param name="strServiceCode"></param>
		/// <returns></returns>
		public DataTable SelectActivenExpiryMemberPackageBaseServiceCode(string strMembershipID, string strServiceCode)
		{
			string cmdtext = "";

            cmdtext = "Select A.*, B.strFreePkgCode from tblMemberPackage A inner join tblPackgeService B on A.strPackageCode = B.strPackageCode " + 
					" where A.strMembershipID = @strMembershipID and B.strServiceCode = @strServiceCode and (A.nStatusID = 0 or A.nStatusID = 1)";
			return base.LoadData(cmdtext, new string[] {"@strMembershipID", "@strServiceCode"}, new object[] {strMembershipID, strServiceCode});
		}

		/*public DataTable GetValidCreditPackageUsage(int nCreditPackageID, string strMemberShipID)
		{
			string cmdText = "Select A.NPackageID, A.strMembershipID, A.dtPurchaseDate, A.strPackageCode, A.nBalance, A.nAdjust,B.strDescription, A.mCreditPackageUsagePrice, " +
				" (B.mListPrice - A.mCreditPackageUsagePrice) As Discount, B.mListPrice, C.strEmployeeName, B.NCategoryID, B.nMaxSession " + 
				" From tblMemberPackage A Inner Join tblPackage B on (A.strPackageCode = B.strPackageCode) " +
				" Left Outer Join tblEmployee C on (A.nEmployeeID = C.nEmployeeID) Where " +
				" A.nCreditPackageID = @nCreditPackageID And A.strMembershipID = @strMembershipID And "+
				" A.nStatusID <> 2 ORDER BY dtpurchasedate asc";

			return base.LoadData(cmdText, new string[] {"@nCreditPackageID", "@strMembershipID"}, new object[] {nCreditPackageID, strMemberShipID});

		}*/

        public DataTable GetValidCreditPackageUsage(int nCreditPackageID, string strMemberShipID)
        {
            string cmdText = "sp_GetValidCreditPackageUsage";

            return base.LoadData("sp", cmdText, new string[] { "@nCreditPackageID", "@strMembershipID" }, new object[] { nCreditPackageID, strMemberShipID });
        }

		public DataTable GetValidCreditPackageTotalUsageAmount(int nCreditPackageID, string strMemberShipID)
        {
            string cmdText = "Select SUM(mListPrice) AS TotalUsageAmt " +
                " From tblMemberPackage A Inner Join tblPackage B on (A.strPackageCode = B.strPackageCode) " +
                " Left Outer Join tblEmployee C on (A.nEmployeeID = C.nEmployeeID) Where " +
                " A.nCreditPackageID = @nCreditPackageID And A.strMembershipID = @strMembershipID And " +
                " A.nStatusID <> 2 ORDER BY dtpurchasedate asc";

            return base.LoadData(cmdText, new string[] { "@nCreditPackageID", "@strMembershipID" }, new object[] { nCreditPackageID, strMemberShipID });
        }
        //0204
        //public DataTable GetOutstandingAmount( string strMemberShipID)
        //{
			

        // string cmdText = "Select max(mOutstandingAmount) as mOutstandingAmount  " +
        //    " from tblReceipt A Inner Join tblCategory B on  A.nCategoryID = B.nCategoryID  " +
        //    " Left Outer Join tblMember C on  C.strMembershipID =  A.strMembershipID  " +
        //    " Left Outer Join tblPromotion D on A.strDiscountCode  = D.strPromotionCode Inner  " +
        //    " join (select sum(mAmount) as mAmount, strReceiptNo " +
        //    " from tblreceiptPayment group by strReceiptNo) rp  " +
        //    " on A.strReceiptNo = rp.strReceiptNo where " +
        //    " (A.mOutstandingAmount > 0)and A.strMembershipID =@strMembershipID  " +
        //    " and fVoid=0 group by A.strMembershipID ";

        // return base.LoadData(cmdText, new string[] { "@strMembershipID" }, new object[] { strMemberShipID });
        //}

        //21/03/2012
        public decimal CalculateOutstandingAmount(string strMemberID, int nCategoryID)
        {

            object obj = base.ExecuteScalar("SELECT  ISNULL(max(mOutstandingAmount),0) as mOutstandingAmount from tblReceipt r,tblReceiptEntries re where r.strReceiptNo=re.strReceiptNo " +
                            "and strMembershipID=@strMembershipID and r.fVoid=0 and  r.nCategoryID=" + nCategoryID.ToString() + "",


             new string[] { "@strMemberShipID" }, new object[] { strMemberID });

            if (obj != null)
            {
                decimal reward = (decimal)((decimal)obj);
                return reward;
            }
            return 0;
        }


        public decimal OutstandingAmount(string strMemberID)
        {
            /*object obj = base.ExecuteScalar("Select SUM(mOutstandingAmount) as mOutstandingAmount " +
                 "  from tblReceipt A Inner Join tblCategory B on  A.nCategoryID = B.nCategoryID " +
                 "  Left Outer Join tblMember C on  C.strMembershipID = A.strMembershipID " +
                 "  Left Outer Join tblPromotion D on A.strDiscountCode = D.strPromotionCode Inner " +
                 "   join (select sum(mAmount) as mAmount, strReceiptNo from tblreceiptPayment group by strReceiptNo) rp " +
                 "  on A.strReceiptNo = rp.strReceiptNo where (A.mOutstandingAmount > 0) and A.strMembershipID =@strMemberShipID and fVoid=0 group by A.strMembershipID ",


          new string[] { "@strMemberShipID" }, new object[] { strMemberID });*/

            object obj = base.ExecuteScalarStoreProc("sp_GetOutStandingAmountByMembershipID", new string[] { "@strMembershipID" }, new object[] { strMemberID });

            if (obj != null)
            {
                decimal reward = (decimal)((decimal)obj);
                return reward;
            }
            return 0;
        }

        public decimal PackageOutstandingAmount(int nPackageID)
        {
            /*object obj = base.ExecuteScalar("Select (((select SUM(mSubTotal) from tblReceiptEntries where strReceiptNo=MP.strReceiptNo and strCode=MP.strPackageCode)/ " +
                " (select (CASE WHEN SUM(nQuantity)=0 THEN 1 ELSE SUM(nQuantity) END) from tblReceiptEntries where strReceiptNo=MP.strReceiptNo and strCode=MP.strPackageCode))/ " +
                " CASE WHEN A.mNettAmount=0 THEN 1 ELSE A.mNettAmount END) * dbo.GetReceiptOutstandingAmount(A.strReceiptNo) " +
                " from tblMemberPackage MP Inner Join tblReceipt A on MP.strReceiptNo=A.strReceiptNo " +
                " where MP.nPackageID = @nPackageID ",

          new string[] { "@nPackageID" }, new object[] { nPackageID });*/

            string sql_outstanding = "sp_GetPackageOutStandingAmount";

            object obj = base.ExecuteScalarStoreProc(sql_outstanding, new string[] { "@nPackageID" }, new object[] { nPackageID });

            if (obj != null)
            {
                decimal reward = (decimal)((decimal)obj);
                return reward;
            }
            return 0;
        }

		public DataTable SelectAllWstrReceiptNo(string strReceiptNo)
		{
			string cmdText = "Select * from TblMemberPackage Where strReceiptNo = @strReceiptNo";
			return base.LoadData(cmdText, new string[] {"@strReceiptNo"}, new object[] {strReceiptNo});
		}

		public DataTable SelectPackageID(int nPackage)
		{
			string cmdText = "Select * from TblMemberPackage Where nPackageID = @nPackage";
			return base.LoadData(cmdText, new string[] {"@nPackage"}, new object[] {nPackage});
		}

        public DataTable SelectPackageCode(string strPackage, string strMemberID)
        {
            string cmdText = "Select * from TblMemberPackage Where strPackageCode = @strPackage AND strMembershipID = @strMemberID";
            return base.LoadData(cmdText, new string[] { "@strPackage", "strMemberID" }, new object[] { strPackage, strMemberID });
        }

        public DataTable SelectConvertedPackageID(int nPackage)
        {
            string cmdText = "Select * from TblMemberPackageConvertion Where nPackageID = @nPackage";
            return base.LoadData(cmdText, new string[] { "@nPackage" }, new object[] { nPackage });
        }

        public DataTable GetActiveMemberPackageForServiceSession(string strMemberShipID)
		{
			if (strMemberShipID != "")
			{
				string cmdText = "Select * From TblMemberPackage A Inner Join TblPackage B " + 
					" on (A.strPackageCode = B.strPackageCode) Inner Join TblCategory C " +
                    " on (B.nCategoryID = C.nCategoryID) Where A.nStatusID = 0 AND (C.nCategoryID = 3 or C.nCategoryID = 4 or " + 
					" C.nCategoryID = 5 or C.nCategoryID = 6) and A.strMemberShipID = @strMemberShipID";


				return base.LoadData(cmdText, new string[] {"@strMemberShipID"}, new object[] {strMemberShipID});
			}
			else
			{
				string cmdText = "Select * From TblMemberPackage A Inner Join TblPackage B " + 
					" on (A.strPackageCode = B.strPackageCode) Inner Join TblCategory C " + 
					" on (B.nCategoryID = C.nCategoryID) Where A.nStatusID = 0 AND (C.nCategoryID = 4 or " + 
					" C.nCategoryID = 5 or C.nCategoryID = 6)";


				return base.LoadData(cmdText);
			}
		} 

		public DataTable GetActiveMemberPackageForSpaSingleTreatment(string strMemberShipID)
		{
			if (strMemberShipID != "")
			{
				string cmdText = "Select * From TblMemberPackage A Inner Join TblPackage B " + 
					" on (A.strPackageCode = B.strPackageCode) Inner Join TblCategory C " + 
					" on (B.nCategoryID = C.nCategoryID) Where A.nStatusID = 0 AND C.nCategoryID = 4 " +
					" and A.strMemberShipID = @strMemberShipID";


				return base.LoadData(cmdText, new string[] {"@strMemberShipID"}, new object[] {strMemberShipID});
			}
			else
			{
				string cmdText = "Select * From TblMemberPackage A Inner Join TblPackage B " + 
					" on (A.strPackageCode = B.strPackageCode) Inner Join TblCategory C " + 
					" on (B.nCategoryID = C.nCategoryID) Where A.nSteCode) Inner Join TblCategory C " + 
					" on (B.nCategoryID = C.nCategoryID) Where A.nStatusID = 0 AND C.nCategoryID = 4 ";

				return base.LoadData(cmdText);
			}
		}

        public DataTable GetActiveMemberPackageForServiceSession()
        {
            string cmdText = "Select * From TblMemberPackage A Inner Join TblPackage B " +
                " on (A.strPackageCode = B.strPackageCode) Inner Join TblCategory C " +
                " on (B.nCategoryID = C.nCategoryID) Where A.nStatusID = 0 AND (C.nCategoryID = 4 or " +
                " C.nCategoryID = 5 or C.nCategoryID = 6)";


            return base.LoadData(cmdText);
        }

        public DataTable GetActiveMemberPackageForClassAttendance(string strMemberShipID)
        {
            string cmdText = "Select * From TblMemberPackage A Inner Join TblPackage B " +
                " on (A.strPackageCode = B.strPackageCode) Inner Join TblCategory C " +
                " on (B.nCategoryID = C.nCategoryID) Where (C.nCategoryID = 1 or " +
                " C.nCategoryID = 2) and A.strMemberShipID = @strMemberShipID and A.strPackageCode <> 'Unlinked' and A.strPackageCode <> 'JOINFEES' and (A.nStatusID=0 or A.nStatusID=1) ";
            return base.LoadData(cmdText, new string[] { "@strMemberShipID" }, new object[] { strMemberShipID });
        }


        /// <summary>
        /// nCategoryID = 1 or 2
        /// </summary>
        /// <param name="strMemberShipID"></param>
        /// <returns></returns>
        public DataTable GetAllMemberPackageForClassAttendance(string strMemberShipID)
        {
            string cmdText = "sp_GetAllMemberPackageForClassAttendance";

            return base.LoadData("sp", cmdText, new string[] { "@strMemberShipID" }, new object[] { strMemberShipID });

        }

        #endregion
    }
}

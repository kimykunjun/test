///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblClassAttendance'
// Generated by LLBLGen v1.21.2003.712 Final on: Sunday, May 14, 2006, 5:38:55 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
    /// <summary>
    /// Purpose: Data Access class for the table 'tblClassAttendance'.
    /// </summary>
    public class TblWaitingList : DBInteractionBase
    {
        #region Class Member Declarations
        private SqlString _strBranchCode, _strBranchCodeOld;
        private SqlDateTime _dtStartTime, _dtEndTime, _dtRequestDate, _dtDate;
        private SqlInt32 _nStatusID, _nClassInstanceID, _nClassInstanceIDOld, _nWaitingListID, _nPackageID, _nPackageIDOld;
        private SqlString _strRemarks, _strMembershipID, _strMembershipIDOld, _strType;
        #endregion


        /// <summary>
        /// Purpose: Class constructor.
        /// </summary>
        public TblWaitingList()
        {
            // Nothing for now.
        }

        public override bool Insert()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblWaitingList_Insert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@inClassInstanceID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nClassInstanceID));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartTime));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtEndTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtEndTime));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrType", SqlDbType.VarChar, 10, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strType));
                cmdToExecute.Parameters.Add(new SqlParameter("@inWaitingListID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nWaitingListID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _nWaitingListID = (SqlInt32)cmdToExecute.Parameters["@inWaitingListID"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblWaitingList_Insert' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblWaitingList::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


        public override bool Update()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblWaitingList_Update]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@inWaitingListID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nWaitingListID));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@inClassInstanceID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nClassInstanceID));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtRequestDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtRequestDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartTime));
                cmdToExecute.Parameters.Add(new SqlParameter("@dadtEndTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtEndTime));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrType", SqlDbType.VarChar, 10, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strType));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblWaitingList_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblWaitingList::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


        /// <summary>
        /// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>NAttendanceID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Delete()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblWaitingList_Delete]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@inWaitingListID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nWaitingListID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblWaitingList_Delete' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblWaitingList::Delete::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }

        public override DataTable SelectOne()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblWaitingList_SelectOne]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblWaitingList");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@inWaitingListID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nWaitingListID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblWaitingList_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _nWaitingListID = (Int32)toReturn.Rows[0]["nWaitingListID"];
                    _strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
                    _nClassInstanceID = (Int32)toReturn.Rows[0]["nClassInstanceID"];
                    _dtRequestDate = toReturn.Rows[0]["dtRequestDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtRequestDate"];
                    _dtDate = toReturn.Rows[0]["dtDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtDate"];
                    _dtStartTime = toReturn.Rows[0]["dtStartTime"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartTime"];
                    _dtEndTime = toReturn.Rows[0]["dtEndTime"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtEndTime"];
                    _strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
                    _nPackageID = toReturn.Rows[0]["nPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPackageID"];
                    _nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatusID"];
                    _strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
                    _strType = toReturn.Rows[0]["strType"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strType"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblClassAttendance::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override DataTable SelectAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblWaitingList_SelectAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblClassAttendance");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblClassAttendance_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblClassAttendance::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        #region Class Property Declarations
        public SqlInt32 NWaitingListID
        {
            get
            {
                return _nWaitingListID;
            }
            set
            {
                SqlInt32 nWaitingListIDTmp = (SqlInt32)value;
                if (nWaitingListIDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("NWaitingListID", "NWaitingListID can't be NULL");
                }
                _nWaitingListID = value;
            }
        }

        public SqlString StrMembershipID
        {
            get
            {
                return _strMembershipID;
            }
            set
            {
                SqlString strMembershipIDTmp = (SqlString)value;
                if (strMembershipIDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("StrMembershipID", "StrMembershipID can't be NULL");
                }
                _strMembershipID = value;
            }
        }
        public SqlString StrMembershipIDOld
        {
            get
            {
                return _strMembershipIDOld;
            }
            set
            {
                SqlString strMembershipIDOldTmp = (SqlString)value;
                if (strMembershipIDOldTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("StrMembershipIDOld", "StrMembershipIDOld can't be NULL");
                }
                _strMembershipIDOld = value;
            }
        }


        public SqlInt32 NClassInstanceID
        {
            get
            {
                return _nClassInstanceID;
            }
            set
            {
                SqlInt32 nClassInstanceIDTmp = (SqlInt32)value;
                if (nClassInstanceIDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("NClassInstanceID", "NClassInstanceID can't be NULL");
                }
                _nClassInstanceID = value;
            }
        }
        public SqlInt32 NClassInstanceIDOld
        {
            get
            {
                return _nClassInstanceIDOld;
            }
            set
            {
                SqlInt32 nClassInstanceIDOldTmp = (SqlInt32)value;
                if (nClassInstanceIDOldTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("NClassInstanceIDOld", "NClassInstanceIDOld can't be NULL");
                }
                _nClassInstanceIDOld = value;
            }
        }


        public SqlDateTime DtRequestDate
        {
            get
            {
                return _dtRequestDate;
            }
            set
            {
                _dtRequestDate = value;
            }
        }


        public SqlDateTime DtDate
        {
            get
            {
                return _dtDate;
            }
            set
            {
                _dtDate = value;
            }
        }


        public SqlDateTime DtStartTime
        {
            get
            {
                return _dtStartTime;
            }
            set
            {
                _dtStartTime = value;
            }
        }


        public SqlDateTime DtEndTime
        {
            get
            {
                return _dtEndTime;
            }
            set
            {
                _dtEndTime = value;
            }
        }


        public SqlString StrBranchCode
        {
            get
            {
                return _strBranchCode;
            }
            set
            {
                SqlString strBranchCodeTmp = (SqlString)value;
                if (strBranchCodeTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
                }
                _strBranchCode = value;
            }
        }
        public SqlString StrBranchCodeOld
        {
            get
            {
                return _strBranchCodeOld;
            }
            set
            {
                SqlString strBranchCodeOldTmp = (SqlString)value;
                if (strBranchCodeOldTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("StrBranchCodeOld", "StrBranchCodeOld can't be NULL");
                }
                _strBranchCodeOld = value;
            }
        }


        public SqlInt32 NPackageID
        {
            get
            {
                return _nPackageID;
            }
            set
            {
                _nPackageID = value;
            }
        }
        public SqlInt32 NPackageIDOld
        {
            get
            {
                return _nPackageIDOld;
            }
            set
            {
                _nPackageIDOld = value;
            }
        }

        public SqlInt32 NStatusID
        {
            get
            {
                return _nStatusID;
            }
            set
            {
                _nStatusID = value;
            }
        }

        public SqlString StrRemarks
        {
            get
            {
                return _strRemarks;
            }
            set
            {
                _strRemarks = value;
            }
        }

        public SqlString StrType
        {
            get
            {
                return _strType;
            }
            set
            {
                _strType = value;
            }
        }
        #endregion

        public DataTable GetWaitingListBaseClassInstanceID(int nClassInstanceID)
        {
            string cmdText = "Select A.*, F.strMemberName, B.strClassCode, C.strDescription " +
                " From tblWaitingList A " +
                " Inner Join tblClassInstance B on A.nClassInstanceID = B.nClassInstanceID " +
                " Inner Join tblClass C on C.strClassCode = B.strClassCode " +
                " left Outer Join tblMember F on A.strMembershipID = F.strMembershipID " +
                " Where A.nClassInstanceID = @nClassInstanceID ORDER BY dtRequestDate DESC ";

            DataTable table = base.LoadData(cmdText, new string[] { "@nClassInstanceID" }, new object[] { nClassInstanceID });
            return table;
        }

        public DataTable GetWaitingListBaseClassInstanceIDWithValidPackage(int nClassInstanceID)
        {
            string cmdText = "Select A.*, F.strMemberName, B.strClassCode, C.strDescription,ISNULL(CASE WHEN r.strInstructorName IS NOT NULL THEN r.strInstructorName+' (R)' ELSE i.strInstructorName END,'') as strInstructorName, strBranchName " +
                " From tblWaitingList A " +
                " Inner Join tblClassInstance B on A.nClassInstanceID = B.nClassInstanceID " +
                " Inner Join tblClass C on C.strClassCode = B.strClassCode " +
                " Join tblBranch br on B.strBranchCode = br.strBranchCode " +
                "left join tblInstructor i ON B.nPermanentInstructorID=i.nInstructorID " +
                "left join tblInstructor r ON B.nReplacementInstructorID=r.nInstructorID "+
                " left Outer Join tblMember F on A.strMembershipID = F.strMembershipID " +
                " Where A.nClassInstanceID = @nClassInstanceID ORDER BY dtRequestDate DESC ";

            DataTable table = base.LoadData(cmdText, new string[] { "@nClassInstanceID" }, new object[] { nClassInstanceID });
            return table;
        }

        public bool IsWaitingListThisClass(int nClassInstanceID, string strMembershipID, DateTime ClassDate)
        {
            string cmdText = "sp_GetWaitingListRecords";

            DataTable table = base.LoadData("sp", cmdText, new string[] { "@nClassInstanceID", "@strMembershipID", "@ClassDate" },
                new object[] { nClassInstanceID, strMembershipID, ClassDate });
            return table.Rows.Count > 0;
        }
    }
}
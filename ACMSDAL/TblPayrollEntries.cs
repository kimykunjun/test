///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblPayrollEntries'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:11
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblPayrollEntries'.
	/// </summary>
	public class TblPayrollEntries : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDouble		_nTotalLateness, _nPHEntitlementHours, _nALEntitlementHours, _nUnpaidMedical, _nUnpaidTO, _nUnpaidAL, _nPublicHolidayOT, _nNormalOT, _nPartTimeWorkHours, _nOffDayOT;
			private SqlInt32		_nPayrollID, _nEmployeeID;
			private SqlMoney		_mCommissionLatenessPenalty, _mCommission, _mServiceReimbursements;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblPayrollEntries()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPayrollID</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>NNormalOT. May be SqlDouble.Null</LI>
		///		 <LI>NPublicHolidayOT. May be SqlDouble.Null</LI>
		///		 <LI>NOffDayOT. May be SqlDouble.Null</LI>
		///		 <LI>NPartTimeWorkHours. May be SqlDouble.Null</LI>
		///		 <LI>NALEntitlementHours. May be SqlDouble.Null</LI>
		///		 <LI>NPHEntitlementHours. May be SqlDouble.Null</LI>
		///		 <LI>MServiceReimbursements. May be SqlMoney.Null</LI>
		///		 <LI>NTotalLateness. May be SqlDouble.Null</LI>
		///		 <LI>NUnpaidAL. May be SqlDouble.Null</LI>
		///		 <LI>NUnpaidTO. May be SqlDouble.Null</LI>
		///		 <LI>NUnpaidMedical. May be SqlDouble.Null</LI>
		///		 <LI>MCommission. May be SqlMoney.Null</LI>
		///		 <LI>MCommissionLatenessPenalty. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPayrollID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPayrollID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnNormalOT", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nNormalOT));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnPublicHolidayOT", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nPublicHolidayOT));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnOffDayOT", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nOffDayOT));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnPartTimeWorkHours", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nPartTimeWorkHours));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnALEntitlementHours", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nALEntitlementHours));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnPHEntitlementHours", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nPHEntitlementHours));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmServiceReimbursements", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mServiceReimbursements));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnTotalLateness", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nTotalLateness));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnUnpaidAL", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nUnpaidAL));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnUnpaidTO", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nUnpaidTO));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnUnpaidMedical", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nUnpaidMedical));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCommission", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCommission));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCommissionLatenessPenalty", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCommissionLatenessPenalty));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPayrollID</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>NNormalOT. May be SqlDouble.Null</LI>
		///		 <LI>NPublicHolidayOT. May be SqlDouble.Null</LI>
		///		 <LI>NOffDayOT. May be SqlDouble.Null</LI>
		///		 <LI>NPartTimeWorkHours. May be SqlDouble.Null</LI>
		///		 <LI>NALEntitlementHours. May be SqlDouble.Null</LI>
		///		 <LI>NPHEntitlementHours. May be SqlDouble.Null</LI>
		///		 <LI>MServiceReimbursements. May be SqlMoney.Null</LI>
		///		 <LI>NTotalLateness. May be SqlDouble.Null</LI>
		///		 <LI>NUnpaidAL. May be SqlDouble.Null</LI>
		///		 <LI>NUnpaidTO. May be SqlDouble.Null</LI>
		///		 <LI>NUnpaidMedical. May be SqlDouble.Null</LI>
		///		 <LI>MCommission. May be SqlMoney.Null</LI>
		///		 <LI>MCommissionLatenessPenalty. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPayrollID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPayrollID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnNormalOT", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nNormalOT));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnPublicHolidayOT", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nPublicHolidayOT));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnOffDayOT", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nOffDayOT));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnPartTimeWorkHours", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nPartTimeWorkHours));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnALEntitlementHours", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nALEntitlementHours));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnPHEntitlementHours", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nPHEntitlementHours));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmServiceReimbursements", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mServiceReimbursements));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnTotalLateness", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nTotalLateness));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnUnpaidAL", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nUnpaidAL));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnUnpaidTO", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nUnpaidTO));
				cmdToExecute.Parameters.Add(new SqlParameter("@fnUnpaidMedical", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _nUnpaidMedical));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCommission", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCommission));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCommissionLatenessPenalty", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCommissionLatenessPenalty));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPayrollID</LI>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPayrollID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPayrollID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'nPayrollID'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'nPayrollID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPayrollID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnPayrollIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_DeleteAllWnPayrollIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPayrollID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPayrollID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_DeleteAllWnPayrollIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::DeleteAllWnPayrollIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'nEmployeeID'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'nEmployeeID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_DeleteAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_DeleteAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::DeleteAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPayrollID</LI>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>NPayrollID</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>NNormalOT</LI>
		///		 <LI>NPublicHolidayOT</LI>
		///		 <LI>NOffDayOT</LI>
		///		 <LI>NPartTimeWorkHours</LI>
		///		 <LI>NALEntitlementHours</LI>
		///		 <LI>NPHEntitlementHours</LI>
		///		 <LI>MServiceReimbursements</LI>
		///		 <LI>NTotalLateness</LI>
		///		 <LI>NUnpaidAL</LI>
		///		 <LI>NUnpaidTO</LI>
		///		 <LI>NUnpaidMedical</LI>
		///		 <LI>MCommission</LI>
		///		 <LI>MCommissionLatenessPenalty</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPayrollEntries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPayrollID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPayrollID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_nPayrollID = (Int32)toReturn.Rows[0]["nPayrollID"];
					_nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
					_nNormalOT = toReturn.Rows[0]["nNormalOT"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nNormalOT"];
					_nPublicHolidayOT = toReturn.Rows[0]["nPublicHolidayOT"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nPublicHolidayOT"];
					_nOffDayOT = toReturn.Rows[0]["nOffDayOT"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nOffDayOT"];
					_nPartTimeWorkHours = toReturn.Rows[0]["nPartTimeWorkHours"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nPartTimeWorkHours"];
					_nALEntitlementHours = toReturn.Rows[0]["nALEntitlementHours"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nALEntitlementHours"];
					_nPHEntitlementHours = toReturn.Rows[0]["nPHEntitlementHours"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nPHEntitlementHours"];
					_mServiceReimbursements = toReturn.Rows[0]["mServiceReimbursements"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mServiceReimbursements"];
					_nTotalLateness = toReturn.Rows[0]["nTotalLateness"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nTotalLateness"];
					_nUnpaidAL = toReturn.Rows[0]["nUnpaidAL"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nUnpaidAL"];
					_nUnpaidTO = toReturn.Rows[0]["nUnpaidTO"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nUnpaidTO"];
					_nUnpaidMedical = toReturn.Rows[0]["nUnpaidMedical"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["nUnpaidMedical"];
					_mCommission = toReturn.Rows[0]["mCommission"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCommission"];
					_mCommissionLatenessPenalty = toReturn.Rows[0]["mCommissionLatenessPenalty"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCommissionLatenessPenalty"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPayrollEntries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nPayrollID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPayrollID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnPayrollIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_SelectAllWnPayrollIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPayrollEntries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPayrollID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPayrollID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_SelectAllWnPayrollIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::SelectAllWnPayrollIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nEmployeeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPayrollEntries_SelectAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPayrollEntries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPayrollEntries_SelectAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPayrollEntries::SelectAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 NPayrollID
		{
			get
			{
				return _nPayrollID;
			}
			set
			{
				SqlInt32 nPayrollIDTmp = (SqlInt32)value;
				if(nPayrollIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NPayrollID", "NPayrollID can't be NULL");
				}
				_nPayrollID = value;
			}
		}


		public SqlInt32 NEmployeeID
		{
			get
			{
				return _nEmployeeID;
			}
			set
			{
				SqlInt32 nEmployeeIDTmp = (SqlInt32)value;
				if(nEmployeeIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeID", "NEmployeeID can't be NULL");
				}
				_nEmployeeID = value;
			}
		}


		public SqlDouble NNormalOT
		{
			get
			{
				return _nNormalOT;
			}
			set
			{
				_nNormalOT = value;
			}
		}


		public SqlDouble NPublicHolidayOT
		{
			get
			{
				return _nPublicHolidayOT;
			}
			set
			{
				_nPublicHolidayOT = value;
			}
		}


		public SqlDouble NOffDayOT
		{
			get
			{
				return _nOffDayOT;
			}
			set
			{
				_nOffDayOT = value;
			}
		}


		public SqlDouble NPartTimeWorkHours
		{
			get
			{
				return _nPartTimeWorkHours;
			}
			set
			{
				_nPartTimeWorkHours = value;
			}
		}


		public SqlDouble NALEntitlementHours
		{
			get
			{
				return _nALEntitlementHours;
			}
			set
			{
				_nALEntitlementHours = value;
			}
		}


		public SqlDouble NPHEntitlementHours
		{
			get
			{
				return _nPHEntitlementHours;
			}
			set
			{
				_nPHEntitlementHours = value;
			}
		}


		public SqlMoney MServiceReimbursements
		{
			get
			{
				return _mServiceReimbursements;
			}
			set
			{
				_mServiceReimbursements = value;
			}
		}


		public SqlDouble NTotalLateness
		{
			get
			{
				return _nTotalLateness;
			}
			set
			{
				_nTotalLateness = value;
			}
		}


		public SqlDouble NUnpaidAL
		{
			get
			{
				return _nUnpaidAL;
			}
			set
			{
				_nUnpaidAL = value;
			}
		}


		public SqlDouble NUnpaidTO
		{
			get
			{
				return _nUnpaidTO;
			}
			set
			{
				_nUnpaidTO = value;
			}
		}


		public SqlDouble NUnpaidMedical
		{
			get
			{
				return _nUnpaidMedical;
			}
			set
			{
				_nUnpaidMedical = value;
			}
		}


		public SqlMoney MCommission
		{
			get
			{
				return _mCommission;
			}
			set
			{
				_mCommission = value;
			}
		}


		public SqlMoney MCommissionLatenessPenalty
		{
			get
			{
				return _mCommissionLatenessPenalty;
			}
			set
			{
				_mCommissionLatenessPenalty = value;
			}
		}
		#endregion
	}
}

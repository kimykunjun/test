///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblClassInstance'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:05
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblClassInstance'.
	/// </summary>
	public class TblClassInstance : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		_fPeak, _fFree, _fAllowStudentOnPeak, _fAllowUOBBooking, _fReservation, _fCancelled, _fTraineeClass;
			private SqlString		_strBranchCode, _strBranchCodeOld;
			private SqlDateTime		_dtInstructorLogin, _dtReplacementIssueDate, _dtReplacementVerifyDate, _dtStartTime, _dtEndTime, _dtDate;
			private SqlInt32		_nVerifyID, _nVerifyIDOld, _nStandinInstructorID, _nStandinInstructorIDOld, _nActualInstructorID, _nActualInstructorIDOld, _nReplacementVerifyID, _nReplacementVerifyIDOld, _nMaxNo, _nHallNo, _nClassInstanceID, _nCommissionTypeID, _nReplacementInstructorID, _nReplacementInstructorIDOld, _nReplacementIssueID, _nReplacementIssueIDOld, _nPermanentInstructorID, _nPermanentInstructorIDOld, _nClassScheduleID;
			private SqlMoney		_mInstructorFees, _mInstructorDeduction, _mStandinInstructorFees;
			private SqlString		_strClassCode, _strClassCodeOld, _strRemarks;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblClassInstance()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DtDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtStartTime. May be SqlDateTime.Null</LI>
		///		 <LI>DtEndTime. May be SqlDateTime.Null</LI>
		///		 <LI>StrClassCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>NHallNo. May be SqlInt32.Null</LI>
		///		 <LI>FFree. May be SqlBoolean.Null</LI>
		///		 <LI>FPeak. May be SqlBoolean.Null</LI>
		///		 <LI>FAllowStudentOnPeak. May be SqlBoolean.Null</LI>
		///		 <LI>FReservation. May be SqlBoolean.Null</LI>
		///		 <LI>NMaxNo. May be SqlInt32.Null</LI>
		///		 <LI>FAllowUOBBooking. May be SqlBoolean.Null</LI>
		///		 <LI>NCommissionTypeID</LI>
		///		 <LI>NPermanentInstructorID</LI>
		///		 <LI>NReplacementInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementIssueID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementVerifyID. May be SqlInt32.Null</LI>
		///		 <LI>DtReplacementIssueDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtReplacementVerifyDate. May be SqlDateTime.Null</LI>
		///		 <LI>NActualInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>DtInstructorLogin. May be SqlDateTime.Null</LI>
		///		 <LI>NStandinInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>MStandinInstructorFees. May be SqlMoney.Null</LI>
		///		 <LI>NVerifyID. May be SqlInt32.Null</LI>
		///		 <LI>FCancelled. May be SqlBoolean.Null</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>MInstructorFees. May be SqlMoney.Null</LI>
		///		 <LI>FTraineeClass. May be SqlBoolean.Null</LI>
		///		 <LI>MInstructorDeduction. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>NClassInstanceID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartTime));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtEndTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtEndTime));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrClassCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strClassCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inHallNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nHallNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPeak", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPeak));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAllowStudentOnPeak", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAllowStudentOnPeak));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfReservation", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fReservation));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMaxNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMaxNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAllowUOBBooking", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAllowUOBBooking));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCommissionTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCommissionTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPermanentInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPermanentInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementIssueID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementIssueID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtReplacementIssueDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtReplacementIssueDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtReplacementVerifyDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtReplacementVerifyDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@inActualInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nActualInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtInstructorLogin", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtInstructorLogin));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStandinInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStandinInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmStandinInstructorFees", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mStandinInstructorFees));
				cmdToExecute.Parameters.Add(new SqlParameter("@inVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfCancelled", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fCancelled));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmInstructorFees", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mInstructorFees));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfTraineeClass", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fTraineeClass));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmInstructorDeduction", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mInstructorDeduction));
				cmdToExecute.Parameters.Add(new SqlParameter("@nClassScheduleID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nClassScheduleID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inClassInstanceID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nClassInstanceID));
				
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _nClassInstanceID = (SqlInt32)cmdToExecute.Parameters["@inClassInstanceID"].Value;
				//_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NClassInstanceID</LI>
		///		 <LI>DtDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtStartTime. May be SqlDateTime.Null</LI>
		///		 <LI>DtEndTime. May be SqlDateTime.Null</LI>
		///		 <LI>StrClassCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>NHallNo. May be SqlInt32.Null</LI>
		///		 <LI>FFree. May be SqlBoolean.Null</LI>
		///		 <LI>FPeak. May be SqlBoolean.Null</LI>
		///		 <LI>FAllowStudentOnPeak. May be SqlBoolean.Null</LI>
		///		 <LI>FReservation. May be SqlBoolean.Null</LI>
		///		 <LI>NMaxNo. May be SqlInt32.Null</LI>
		///		 <LI>FAllowUOBBooking. May be SqlBoolean.Null</LI>
		///		 <LI>NCommissionTypeID</LI>
		///		 <LI>NPermanentInstructorID</LI>
		///		 <LI>NReplacementInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementIssueID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementVerifyID. May be SqlInt32.Null</LI>
		///		 <LI>DtReplacementIssueDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtReplacementVerifyDate. May be SqlDateTime.Null</LI>
		///		 <LI>NActualInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>DtInstructorLogin. May be SqlDateTime.Null</LI>
		///		 <LI>NStandinInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>MStandinInstructorFees. May be SqlMoney.Null</LI>
		///		 <LI>NVerifyID. May be SqlInt32.Null</LI>
		///		 <LI>FCancelled. May be SqlBoolean.Null</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>MInstructorFees. May be SqlMoney.Null</LI>
		///		 <LI>FTraineeClass. May be SqlBoolean.Null</LI>
		///		 <LI>MInstructorDeduction. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inClassInstanceID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nClassInstanceID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartTime));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtEndTime", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtEndTime));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrClassCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strClassCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inHallNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nHallNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPeak", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPeak));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAllowStudentOnPeak", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAllowStudentOnPeak));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfReservation", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fReservation));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMaxNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMaxNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAllowUOBBooking", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAllowUOBBooking));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCommissionTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCommissionTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPermanentInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPermanentInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementIssueID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementIssueID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtReplacementIssueDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtReplacementIssueDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtReplacementVerifyDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtReplacementVerifyDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@inActualInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nActualInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtInstructorLogin", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtInstructorLogin));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStandinInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStandinInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmStandinInstructorFees", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mStandinInstructorFees));
				cmdToExecute.Parameters.Add(new SqlParameter("@inVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfCancelled", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fCancelled));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmInstructorFees", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mInstructorFees));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfTraineeClass", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fTraineeClass));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmInstructorDeduction", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mInstructorDeduction));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strClassCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strClassCode' in
		/// all rows which have as value for this field the value as set in property 'StrClassCodeOld' to 
		/// the value as set in property 'StrClassCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrClassCode</LI>
		///		 <LI>StrClassCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrClassCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWstrClassCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrClassCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strClassCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrClassCodeOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strClassCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWstrClassCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWstrClassCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strBranchCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strBranchCode' in
		/// all rows which have as value for this field the value as set in property 'StrBranchCodeOld' to 
		/// the value as set in property 'StrBranchCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrBranchCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCodeOld", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nPermanentInstructorID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nPermanentInstructorID' in
		/// all rows which have as value for this field the value as set in property 'NPermanentInstructorIDOld' to 
		/// the value as set in property 'NPermanentInstructorID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPermanentInstructorID</LI>
		///		 <LI>NPermanentInstructorIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnPermanentInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnPermanentInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPermanentInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPermanentInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPermanentInstructorIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPermanentInstructorIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnPermanentInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnPermanentInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nReplacementInstructorID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nReplacementInstructorID' in
		/// all rows which have as value for this field the value as set in property 'NReplacementInstructorIDOld' to 
		/// the value as set in property 'NReplacementInstructorID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementInstructorIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnReplacementInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnReplacementInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nReplacementInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementInstructorIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementInstructorIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				//_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnReplacementInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnReplacementInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nReplacementIssueID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nReplacementIssueID' in
		/// all rows which have as value for this field the value as set in property 'NReplacementIssueIDOld' to 
		/// the value as set in property 'NReplacementIssueID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementIssueID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementIssueIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnReplacementIssueIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnReplacementIssueIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementIssueID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nReplacementIssueID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementIssueIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementIssueIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnReplacementIssueIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnReplacementIssueIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nReplacementVerifyID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nReplacementVerifyID' in
		/// all rows which have as value for this field the value as set in property 'NReplacementVerifyIDOld' to 
		/// the value as set in property 'NReplacementVerifyID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementVerifyID. May be SqlInt32.Null</LI>
		///		 <LI>NReplacementVerifyIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnReplacementVerifyIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnReplacementVerifyIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nReplacementVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementVerifyIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementVerifyIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				//_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnReplacementVerifyIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnReplacementVerifyIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nActualInstructorID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nActualInstructorID' in
		/// all rows which have as value for this field the value as set in property 'NActualInstructorIDOld' to 
		/// the value as set in property 'NActualInstructorID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NActualInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>NActualInstructorIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnActualInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnActualInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inActualInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nActualInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inActualInstructorIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nActualInstructorIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnActualInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnActualInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nStandinInstructorID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nStandinInstructorID' in
		/// all rows which have as value for this field the value as set in property 'NStandinInstructorIDOld' to 
		/// the value as set in property 'NStandinInstructorID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NStandinInstructorID. May be SqlInt32.Null</LI>
		///		 <LI>NStandinInstructorIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnStandinInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnStandinInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inStandinInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nStandinInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStandinInstructorIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStandinInstructorIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnStandinInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnStandinInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nVerifyID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nVerifyID' in
		/// all rows which have as value for this field the value as set in property 'NVerifyIDOld' to 
		/// the value as set in property 'NVerifyID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NVerifyID. May be SqlInt32.Null</LI>
		///		 <LI>NVerifyIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnVerifyIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_UpdateAllWnVerifyIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inVerifyIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVerifyIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_UpdateAllWnVerifyIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::UpdateAllWnVerifyIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NClassInstanceID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inClassInstanceID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nClassInstanceID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strClassCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrClassCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrClassCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWstrClassCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrClassCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strClassCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWstrClassCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWstrClassCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strBranchCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nPermanentInstructorID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPermanentInstructorID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnPermanentInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnPermanentInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPermanentInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPermanentInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnPermanentInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnPermanentInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nReplacementInstructorID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementInstructorID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnReplacementInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnReplacementInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nReplacementInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnReplacementInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnReplacementInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nReplacementIssueID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementIssueID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnReplacementIssueIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnReplacementIssueIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementIssueID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nReplacementIssueID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnReplacementIssueIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnReplacementIssueIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nReplacementVerifyID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementVerifyID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnReplacementVerifyIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnReplacementVerifyIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nReplacementVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnReplacementVerifyIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnReplacementVerifyIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nActualInstructorID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NActualInstructorID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnActualInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnActualInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inActualInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nActualInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnActualInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnActualInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nStandinInstructorID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NStandinInstructorID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnStandinInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnStandinInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inStandinInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nStandinInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnStandinInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnStandinInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nVerifyID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NVerifyID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnVerifyIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_DeleteAllWnVerifyIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_DeleteAllWnVerifyIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::DeleteAllWnVerifyIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NClassInstanceID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>NClassInstanceID</LI>
		///		 <LI>DtDate</LI>
		///		 <LI>DtStartTime</LI>
		///		 <LI>DtEndTime</LI>
		///		 <LI>StrClassCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>NHallNo</LI>
		///		 <LI>FFree</LI>
		///		 <LI>FPeak</LI>
		///		 <LI>FAllowStudentOnPeak</LI>
		///		 <LI>FReservation</LI>
		///		 <LI>NMaxNo</LI>
		///		 <LI>FAllowUOBBooking</LI>
		///		 <LI>NCommissionTypeID</LI>
		///		 <LI>NPermanentInstructorID</LI>
		///		 <LI>NReplacementInstructorID</LI>
		///		 <LI>NReplacementIssueID</LI>
		///		 <LI>NReplacementVerifyID</LI>
		///		 <LI>DtReplacementIssueDate</LI>
		///		 <LI>DtReplacementVerifyDate</LI>
		///		 <LI>NActualInstructorID</LI>
		///		 <LI>DtInstructorLogin</LI>
		///		 <LI>NStandinInstructorID</LI>
		///		 <LI>MStandinInstructorFees</LI>
		///		 <LI>NVerifyID</LI>
		///		 <LI>FCancelled</LI>
		///		 <LI>StrRemarks</LI>
		///		 <LI>MInstructorFees</LI>
		///		 <LI>FTraineeClass</LI>
		///		 <LI>MInstructorDeduction</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inClassInstanceID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nClassInstanceID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_nClassInstanceID = (Int32)toReturn.Rows[0]["nClassInstanceID"];
					_dtDate = toReturn.Rows[0]["dtDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtDate"];
					_dtStartTime = toReturn.Rows[0]["dtStartTime"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartTime"];
					_dtEndTime = toReturn.Rows[0]["dtEndTime"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtEndTime"];
					_strClassCode = (string)toReturn.Rows[0]["strClassCode"];
					_strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
					_nHallNo = toReturn.Rows[0]["nHallNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nHallNo"];
					_fFree = toReturn.Rows[0]["fFree"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fFree"];
					_fPeak = toReturn.Rows[0]["fPeak"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fPeak"];
					_fAllowStudentOnPeak = toReturn.Rows[0]["fAllowStudentOnPeak"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fAllowStudentOnPeak"];
					_fReservation = toReturn.Rows[0]["fReservation"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fReservation"];
					_nMaxNo = toReturn.Rows[0]["nMaxNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMaxNo"];
					_fAllowUOBBooking = toReturn.Rows[0]["fAllowUOBBooking"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fAllowUOBBooking"];
					_nCommissionTypeID = (Int32)toReturn.Rows[0]["nCommissionTypeID"];
					_nPermanentInstructorID = (Int32)toReturn.Rows[0]["nPermanentInstructorID"];
					_nReplacementInstructorID = toReturn.Rows[0]["nReplacementInstructorID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nReplacementInstructorID"];
					_nReplacementIssueID = toReturn.Rows[0]["nReplacementIssueID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nReplacementIssueID"];
					_nReplacementVerifyID = toReturn.Rows[0]["nReplacementVerifyID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nReplacementVerifyID"];
					_dtReplacementIssueDate = toReturn.Rows[0]["dtReplacementIssueDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtReplacementIssueDate"];
					_dtReplacementVerifyDate = toReturn.Rows[0]["dtReplacementVerifyDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtReplacementVerifyDate"];
					_nActualInstructorID = toReturn.Rows[0]["nActualInstructorID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nActualInstructorID"];
					_dtInstructorLogin = toReturn.Rows[0]["dtInstructorLogin"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtInstructorLogin"];
					_nStandinInstructorID = toReturn.Rows[0]["nStandinInstructorID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStandinInstructorID"];
					_mStandinInstructorFees = toReturn.Rows[0]["mStandinInstructorFees"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mStandinInstructorFees"];
					_nVerifyID = toReturn.Rows[0]["nVerifyID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nVerifyID"];
					_fCancelled = toReturn.Rows[0]["fCancelled"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fCancelled"];
					_strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
					_mInstructorFees = toReturn.Rows[0]["mInstructorFees"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mInstructorFees"];
					_fTraineeClass = toReturn.Rows[0]["fTraineeClass"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fTraineeClass"];
					_mInstructorDeduction = toReturn.Rows[0]["mInstructorDeduction"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mInstructorDeduction"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strClassCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrClassCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrClassCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWstrClassCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrClassCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strClassCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				//_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWstrClassCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWstrClassCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strBranchCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nPermanentInstructorID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPermanentInstructorID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnPermanentInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnPermanentInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPermanentInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPermanentInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnPermanentInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnPermanentInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nReplacementInstructorID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementInstructorID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnReplacementInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnReplacementInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnReplacementInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnReplacementInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nReplacementIssueID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementIssueID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnReplacementIssueIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnReplacementIssueIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementIssueID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementIssueID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnReplacementIssueIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnReplacementIssueIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nReplacementVerifyID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NReplacementVerifyID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnReplacementVerifyIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnReplacementVerifyIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inReplacementVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nReplacementVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnReplacementVerifyIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnReplacementVerifyIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nActualInstructorID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NActualInstructorID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnActualInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnActualInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inActualInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nActualInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnActualInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnActualInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nStandinInstructorID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NStandinInstructorID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnStandinInstructorIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnStandinInstructorIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inStandinInstructorID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStandinInstructorID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnStandinInstructorIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnStandinInstructorIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nVerifyID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NVerifyID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnVerifyIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblClassInstance_SelectAllWnVerifyIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblClassInstance");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inVerifyID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVerifyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblClassInstance_SelectAllWnVerifyIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblClassInstance::SelectAllWnVerifyIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		
		public SqlInt32 nClassScheduleID

			{
				get
				{
					return _nClassScheduleID;
					}
				set
				{
					SqlInt32 nClassScheduleIDTmp = (SqlInt32)value;
					if(nClassScheduleIDTmp.IsNull)
					{
						throw new ArgumentOutOfRangeException("nClassScheduleID", "nClassScheduleID can't be NULL");
					}
					_nClassScheduleID= value;
				}
			}

			
			public SqlInt32 NClassInstanceID
		{
			get
			{
				return _nClassInstanceID;
			}
			set
			{
				SqlInt32 nClassInstanceIDTmp = (SqlInt32)value;
				if(nClassInstanceIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NClassInstanceID", "NClassInstanceID can't be NULL");
				}
				_nClassInstanceID = value;
			}
		}


		public SqlDateTime DtDate
		{
			get
			{
				return _dtDate;
			}
			set
			{
				_dtDate = value;
			}
		}


		public SqlDateTime DtStartTime
		{
			get
			{
				return _dtStartTime;
			}
			set
			{
				_dtStartTime = value;
			}
		}


		public SqlDateTime DtEndTime
		{
			get
			{
				return _dtEndTime;
			}
			set
			{
				_dtEndTime = value;
			}
		}


		public SqlString StrClassCode
		{
			get
			{
				return _strClassCode;
			}
			set
			{
				SqlString strClassCodeTmp = (SqlString)value;
				if(strClassCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrClassCode", "StrClassCode can't be NULL");
				}
				_strClassCode = value;
			}
		}
		public SqlString StrClassCodeOld
		{
			get
			{
				return _strClassCodeOld;
			}
			set
			{
				SqlString strClassCodeOldTmp = (SqlString)value;
				if(strClassCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrClassCodeOld", "StrClassCodeOld can't be NULL");
				}
				_strClassCodeOld = value;
			}
		}


		public SqlString StrBranchCode
		{
			get
			{
				return _strBranchCode;
			}
			set
			{
				SqlString strBranchCodeTmp = (SqlString)value;
				if(strBranchCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
				}
				_strBranchCode = value;
			}
		}
		public SqlString StrBranchCodeOld
		{
			get
			{
				return _strBranchCodeOld;
			}
			set
			{
				SqlString strBranchCodeOldTmp = (SqlString)value;
				if(strBranchCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCodeOld", "StrBranchCodeOld can't be NULL");
				}
				_strBranchCodeOld = value;
			}
		}


		public SqlInt32 NHallNo
		{
			get
			{
				return _nHallNo;
			}
			set
			{
				_nHallNo = value;
			}
		}


		public SqlBoolean FFree
		{
			get
			{
				return _fFree;
			}
			set
			{
				_fFree = value;
			}
		}


		public SqlBoolean FPeak
		{
			get
			{
				return _fPeak;
			}
			set
			{
				_fPeak = value;
			}
		}


		public SqlBoolean FAllowStudentOnPeak
		{
			get
			{
				return _fAllowStudentOnPeak;
			}
			set
			{
				_fAllowStudentOnPeak = value;
			}
		}


		public SqlBoolean FReservation
		{
			get
			{
				return _fReservation;
			}
			set
			{
				_fReservation = value;
			}
		}


		public SqlInt32 NMaxNo
		{
			get
			{
				return _nMaxNo;
			}
			set
			{
				_nMaxNo = value;
			}
		}


		public SqlBoolean FAllowUOBBooking
		{
			get
			{
				return _fAllowUOBBooking;
			}
			set
			{
				_fAllowUOBBooking = value;
			}
		}


		public SqlInt32 NCommissionTypeID
		{
			get
			{
				return _nCommissionTypeID;
			}
			set
			{
				SqlInt32 nCommissionTypeIDTmp = (SqlInt32)value;
				if(nCommissionTypeIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NCommissionTypeID", "NCommissionTypeID can't be NULL");
				}
				_nCommissionTypeID = value;
			}
		}


		public SqlInt32 NPermanentInstructorID
		{
			get
			{
				return _nPermanentInstructorID;
			}
			set
			{
				SqlInt32 nPermanentInstructorIDTmp = (SqlInt32)value;
				if(nPermanentInstructorIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NPermanentInstructorID", "NPermanentInstructorID can't be NULL");
				}
				_nPermanentInstructorID = value;
			}
		}
		public SqlInt32 NPermanentInstructorIDOld
		{
			get
			{
				return _nPermanentInstructorIDOld;
			}
			set
			{
				SqlInt32 nPermanentInstructorIDOldTmp = (SqlInt32)value;
				if(nPermanentInstructorIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NPermanentInstructorIDOld", "NPermanentInstructorIDOld can't be NULL");
				}
				_nPermanentInstructorIDOld = value;
			}
		}


		public SqlInt32 NReplacementInstructorID
		{
			get
			{
				return _nReplacementInstructorID;
			}
			set
			{
				_nReplacementInstructorID = value;
			}
		}
		public SqlInt32 NReplacementInstructorIDOld
		{
			get
			{
				return _nReplacementInstructorIDOld;
			}
			set
			{
				_nReplacementInstructorIDOld = value;
			}
		}


		public SqlInt32 NReplacementIssueID
		{
			get
			{
				return _nReplacementIssueID;
			}
			set
			{
				_nReplacementIssueID = value;
			}
		}
		public SqlInt32 NReplacementIssueIDOld
		{
			get
			{
				return _nReplacementIssueIDOld;
			}
			set
			{
				_nReplacementIssueIDOld = value;
			}
		}


		public SqlInt32 NReplacementVerifyID
		{
			get
			{
				return _nReplacementVerifyID;
			}
			set
			{
				_nReplacementVerifyID = value;
			}
		}
		public SqlInt32 NReplacementVerifyIDOld
		{
			get
			{
				return _nReplacementVerifyIDOld;
			}
			set
			{
				_nReplacementVerifyIDOld = value;
			}
		}


		public SqlDateTime DtReplacementIssueDate
		{
			get
			{
				return _dtReplacementIssueDate;
			}
			set
			{
				_dtReplacementIssueDate = value;
			}
		}


		public SqlDateTime DtReplacementVerifyDate
		{
			get
			{
				return _dtReplacementVerifyDate;
			}
			set
			{
				_dtReplacementVerifyDate = value;
			}
		}


		public SqlInt32 NActualInstructorID
		{
			get
			{
				return _nActualInstructorID;
			}
			set
			{
				_nActualInstructorID = value;
			}
		}
		public SqlInt32 NActualInstructorIDOld
		{
			get
			{
				return _nActualInstructorIDOld;
			}
			set
			{
				_nActualInstructorIDOld = value;
			}
		}


		public SqlDateTime DtInstructorLogin
		{
			get
			{
				return _dtInstructorLogin;
			}
			set
			{
				_dtInstructorLogin = value;
			}
		}


		public SqlInt32 NStandinInstructorID
		{
			get
			{
				return _nStandinInstructorID;
			}
			set
			{
				_nStandinInstructorID = value;
			}
		}
		public SqlInt32 NStandinInstructorIDOld
		{
			get
			{
				return _nStandinInstructorIDOld;
			}
			set
			{
				_nStandinInstructorIDOld = value;
			}
		}


		public SqlMoney MStandinInstructorFees
		{
			get
			{
				return _mStandinInstructorFees;
			}
			set
			{
				_mStandinInstructorFees = value;
			}
		}


		public SqlInt32 NVerifyID
		{
			get
			{
				return _nVerifyID;
			}
			set
			{
				_nVerifyID = value;
			}
		}
		public SqlInt32 NVerifyIDOld
		{
			get
			{
				return _nVerifyIDOld;
			}
			set
			{
				_nVerifyIDOld = value;
			}
		}


		public SqlBoolean FCancelled
		{
			get
			{
				return _fCancelled;
			}
			set
			{
				_fCancelled = value;
			}
		}


		public SqlString StrRemarks
		{
			get
			{
				return _strRemarks;
			}
			set
			{
				_strRemarks = value;
			}
		}


		public SqlMoney MInstructorFees
		{
			get
			{
				return _mInstructorFees;
			}
			set
			{
				_mInstructorFees = value;
			}
		}


		public SqlBoolean FTraineeClass
		{
			get
			{
				return _fTraineeClass;
			}
			set
			{
				_fTraineeClass = value;
			}
		}


		public SqlMoney MInstructorDeduction
		{
			get
			{
				return _mInstructorDeduction;
			}
			set
			{
				_mInstructorDeduction = value;
			}
		}
		#endregion

		#region PickHui
		
		public DataTable GetValidClassInstance(DateTime classDate, string strBranchCode, string strPackageCode)
		{
			string cmdText = "Select * from tblClassInstance A, tblPackageClass B where A.strBranchCode = @strBranchCode and " + 
				" A.dtDate = @dtDate and A.strClassCode = B.strClassCode and B.strPackageCode = @strPackageCode";

			DataTable table = base.LoadData(cmdText, new string[] {"@dtDate", "@strBranchCode", "@strPackageCode"}, new object[] {classDate, strBranchCode, strPackageCode});
			
			return table;
		
		}

		public bool HaveClassInstance(DateTime classDate, DateTime dtEndTime, 
			DateTime dtStartTime, string strClassCode, int nHallNo, string strBranchCode)
		{
			string cmdtext = "Select  * From tblClassInstance Where dtDate = @dtDate and strBranchCode = @strBranchCode AND " + 
				" dtEndTime = @dtEndTime AND dtStartTime = @dtStartTime AND strClassCode = @strClassCode AND " + 
				" nHallNo = @nHallNo ";

			object obj = base.ExecuteScalar(cmdtext, new string[] {"@dtDate", "@strBranchCode", "@dtEndTime", "@dtStartTime", "@strClassCode", "@nHallNo"}, 
				new object[] {classDate, strBranchCode, dtEndTime, dtStartTime, strClassCode, nHallNo});
			
			if (obj == null)
				return false;
			else
			{
				return true;
			}
		}

		public DataTable GetClassInstanceBaseDate(DateTime dtDate, string strBranchCode)
		{
			string cmdText = "Select A.*, B.strEmployeeName as strPermanantInstructorName, C.strEmployeeName as strReplacementInstructorName, D.strEmployeeName as strActualInstructorName, " + 
							" E.strEmployeeName As strVerifierName From " +  
							" tblClassInstance A Left Outer Join tblEmployee B on (A.nPermanentInstructorID = B.nEmployeeID) " + 
							" Left Outer Join tblEmployee C on (A.nReplacementInstructorID = C.nEmployeeID) " +
							" Left Outer Join tblEmployee D on (A.nActualInstructorID = D.nEmployeeID) " +
							" Left Outer Join tblEmployee E on (A.nVerifyID = E.nEmployeeID) "+
							" Where A.dtDate = @dtDate and A.strBranchCode = @strBranchCode";
			DataTable table = base.LoadData(cmdText, new string[] {"@dtDate", "@strBranchCode"}, new object[] {dtDate, strBranchCode});
			return table;
		}

		public DataTable GetClassInstanceBaseDate(DateTime dtDate)
		{
			string cmdText = "Select A.*, B.strEmployeeName as strPermanantInstructorName, C.strEmployeeName as strReplacementInstructorName, D.strEmployeeName as strActualInstructorName, " + 
				" E.strEmployeeName As strVerifierName From " +  
				" tblClassInstance A Left Outer Join tblEmployee B on (A.nPermanentInstructorID = B.nEmployeeID) " + 
				" Left Outer Join tblEmployee C on (A.nReplacementInstructorID = C.nEmployeeID) " +
				" Left Outer Join tblEmployee D on (A.nActualInstructorID = D.nEmployeeID) " +
				" Left Outer Join tblEmployee E on (A.nVerifyID = E.nEmployeeID) "+
				" Where A.dtDate = @dtDate ";
			DataTable table = base.LoadData(cmdText, new string[] {"@dtDate"}, new object[] {dtDate});
			return table;
		}

		#endregion
	}
}

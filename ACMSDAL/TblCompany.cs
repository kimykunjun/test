///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblCompany'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:06
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblCompany'.
	/// </summary>
	public class TblCompany : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		_strCompanyCodeRef, _strAccountName, _strAccountNo, _strCompanyID, _strPayrollDir, _strBJReportDir, _strCPFReferenceNo, _strBranchCode, _strBankCode, _strBankCodeOld;
			private SqlDateTime		_dtUOBWeekdayPeakEnd, _dtUOBWeekdayPeakStart, _dtUOBWeekendPeakEnd, _dtUOBWeekendPeakStart;
			private SqlInt32		_strBatchNo, _nClassLeft, _nNonMembershipNo, _nDaysToExpire, _nCancelBookingLimit, _nTaxID, _nTaxIDOld, _nMaxCarryForwardLeave, _nUOBMonthlyBooking;
			private SqlMoney		_mInstructorLateDeductionFee, _mForgetCardRate, _mReplaceCardRate, _mRegistrationFees;
			private SqlString		_strCompanyCode, _strCompanyName;
		#endregion

		#region LLBLGen Code
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblCompany()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCompanyCode</LI>
		///		 <LI>StrCompanyName. May be SqlString.Null</LI>
		///		 <LI>NTaxID</LI>
		///		 <LI>MForgetCardRate. May be SqlMoney.Null</LI>
		///		 <LI>MReplaceCardRate. May be SqlMoney.Null</LI>
		///		 <LI>MRegistrationFees. May be SqlMoney.Null</LI>
		///		 <LI>StrBankCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrAccountNo. May be SqlString.Null</LI>
		///		 <LI>StrAccountName. May be SqlString.Null</LI>
		///		 <LI>StrBatchNo. May be SqlInt32.Null</LI>
		///		 <LI>StrCompanyCodeRef. May be SqlString.Null</LI>
		///		 <LI>StrCompanyID. May be SqlString.Null</LI>
		///		 <LI>StrCPFReferenceNo. May be SqlString.Null</LI>
		///		 <LI>NCancelBookingLimit. May be SqlInt32.Null</LI>
		///		 <LI>NUOBMonthlyBooking. May be SqlInt32.Null</LI>
		///		 <LI>DtUOBWeekdayPeakStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtUOBWeekdayPeakEnd. May be SqlDateTime.Null</LI>
		///		 <LI>DtUOBWeekendPeakStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtUOBWeekendPeakEnd. May be SqlDateTime.Null</LI>
		///		 <LI>NNonMembershipNo. May be SqlInt32.Null</LI>
		///		 <LI>MInstructorLateDeductionFee. May be SqlMoney.Null</LI>
		///		 <LI>NDaysToExpire. May be SqlInt32.Null</LI>
		///		 <LI>NClassLeft. May be SqlInt32.Null</LI>
		///		 <LI>StrBJReportDir. May be SqlString.Null</LI>
		///		 <LI>StrPayrollDir. May be SqlString.Null</LI>
		///		 <LI>NMaxCarryForwardLeave. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCompanyCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompanyName));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTaxID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nTaxID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmForgetCardRate", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mForgetCardRate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmReplaceCardRate", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mReplaceCardRate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmRegistrationFees", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mRegistrationFees));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBankCode", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBankCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAccountNo", SqlDbType.Char, 11, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAccountNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAccountName", SqlDbType.Char, 20, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAccountName));
				cmdToExecute.Parameters.Add(new SqlParameter("@istrBatchNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _strBatchNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyCodeRef", SqlDbType.Char, 5, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompanyCodeRef));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyID", SqlDbType.Char, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompanyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCPFReferenceNo", SqlDbType.Char, 7, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCPFReferenceNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCancelBookingLimit", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCancelBookingLimit));
				cmdToExecute.Parameters.Add(new SqlParameter("@inUOBMonthlyBooking", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nUOBMonthlyBooking));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekdayPeakStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekdayPeakStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekdayPeakEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekdayPeakEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekendPeakStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekendPeakStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekendPeakEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekendPeakEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@inNonMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nNonMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmInstructorLateDeductionFee", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mInstructorLateDeductionFee));
				cmdToExecute.Parameters.Add(new SqlParameter("@inDaysToExpire", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nDaysToExpire));
				cmdToExecute.Parameters.Add(new SqlParameter("@inClassLeft", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nClassLeft));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBJReportDir", SqlDbType.VarChar, 250, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strBJReportDir));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPayrollDir", SqlDbType.VarChar, 250, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPayrollDir));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMaxCarryForwardLeave", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMaxCarryForwardLeave));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCompanyCode</LI>
		///		 <LI>StrCompanyName. May be SqlString.Null</LI>
		///		 <LI>NTaxID</LI>
		///		 <LI>MForgetCardRate. May be SqlMoney.Null</LI>
		///		 <LI>MReplaceCardRate. May be SqlMoney.Null</LI>
		///		 <LI>MRegistrationFees. May be SqlMoney.Null</LI>
		///		 <LI>StrBankCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrAccountNo. May be SqlString.Null</LI>
		///		 <LI>StrAccountName. May be SqlString.Null</LI>
		///		 <LI>StrBatchNo. May be SqlInt32.Null</LI>
		///		 <LI>StrCompanyCodeRef. May be SqlString.Null</LI>
		///		 <LI>StrCompanyID. May be SqlString.Null</LI>
		///		 <LI>StrCPFReferenceNo. May be SqlString.Null</LI>
		///		 <LI>NCancelBookingLimit. May be SqlInt32.Null</LI>
		///		 <LI>NUOBMonthlyBooking. May be SqlInt32.Null</LI>
		///		 <LI>DtUOBWeekdayPeakStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtUOBWeekdayPeakEnd. May be SqlDateTime.Null</LI>
		///		 <LI>DtUOBWeekendPeakStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtUOBWeekendPeakEnd. May be SqlDateTime.Null</LI>
		///		 <LI>NNonMembershipNo. May be SqlInt32.Null</LI>
		///		 <LI>MInstructorLateDeductionFee. May be SqlMoney.Null</LI>
		///		 <LI>NDaysToExpire. May be SqlInt32.Null</LI>
		///		 <LI>NClassLeft. May be SqlInt32.Null</LI>
		///		 <LI>StrBJReportDir. May be SqlString.Null</LI>
		///		 <LI>StrPayrollDir. May be SqlString.Null</LI>
		///		 <LI>NMaxCarryForwardLeave. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCompanyCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompanyName));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTaxID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nTaxID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmForgetCardRate", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mForgetCardRate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmReplaceCardRate", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mReplaceCardRate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmRegistrationFees", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mRegistrationFees));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBankCode", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBankCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAccountNo", SqlDbType.Char, 11, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAccountNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAccountName", SqlDbType.Char, 20, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAccountName));
				cmdToExecute.Parameters.Add(new SqlParameter("@istrBatchNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _strBatchNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyCodeRef", SqlDbType.Char, 5, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompanyCodeRef));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyID", SqlDbType.Char, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompanyID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCPFReferenceNo", SqlDbType.Char, 7, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCPFReferenceNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCancelBookingLimit", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCancelBookingLimit));
				cmdToExecute.Parameters.Add(new SqlParameter("@inUOBMonthlyBooking", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nUOBMonthlyBooking));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekdayPeakStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekdayPeakStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekdayPeakEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekdayPeakEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekendPeakStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekendPeakStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtUOBWeekendPeakEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtUOBWeekendPeakEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@inNonMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nNonMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmInstructorLateDeductionFee", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mInstructorLateDeductionFee));
				cmdToExecute.Parameters.Add(new SqlParameter("@inDaysToExpire", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nDaysToExpire));
				cmdToExecute.Parameters.Add(new SqlParameter("@inClassLeft", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nClassLeft));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBJReportDir", SqlDbType.VarChar, 250, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strBJReportDir));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPayrollDir", SqlDbType.VarChar, 250, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPayrollDir));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMaxCarryForwardLeave", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMaxCarryForwardLeave));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nTaxID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nTaxID' in
		/// all rows which have as value for this field the value as set in property 'NTaxIDOld' to 
		/// the value as set in property 'NTaxID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NTaxID</LI>
		///		 <LI>NTaxIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnTaxIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_UpdateAllWnTaxIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inTaxID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nTaxID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTaxIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nTaxIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_UpdateAllWnTaxIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::UpdateAllWnTaxIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strBankCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strBankCode' in
		/// all rows which have as value for this field the value as set in property 'StrBankCodeOld' to 
		/// the value as set in property 'StrBankCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBankCode</LI>
		///		 <LI>StrBankCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrBankCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_UpdateAllWstrBankCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBankCode", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBankCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBankCodeOld", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBankCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_UpdateAllWstrBankCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::UpdateAllWstrBankCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCompanyCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCompanyCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nTaxID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NTaxID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnTaxIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_DeleteAllWnTaxIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inTaxID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nTaxID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_DeleteAllWnTaxIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::DeleteAllWnTaxIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strBankCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBankCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrBankCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_DeleteAllWstrBankCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBankCode", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBankCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_DeleteAllWstrBankCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::DeleteAllWstrBankCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCompanyCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>StrCompanyCode</LI>
		///		 <LI>StrCompanyName</LI>
		///		 <LI>NTaxID</LI>
		///		 <LI>MForgetCardRate</LI>
		///		 <LI>MReplaceCardRate</LI>
		///		 <LI>MRegistrationFees</LI>
		///		 <LI>StrBankCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrAccountNo</LI>
		///		 <LI>StrAccountName</LI>
		///		 <LI>StrBatchNo</LI>
		///		 <LI>StrCompanyCodeRef</LI>
		///		 <LI>StrCompanyID</LI>
		///		 <LI>StrCPFReferenceNo</LI>
		///		 <LI>NCancelBookingLimit</LI>
		///		 <LI>NUOBMonthlyBooking</LI>
		///		 <LI>DtUOBWeekdayPeakStart</LI>
		///		 <LI>DtUOBWeekdayPeakEnd</LI>
		///		 <LI>DtUOBWeekendPeakStart</LI>
		///		 <LI>DtUOBWeekendPeakEnd</LI>
		///		 <LI>NNonMembershipNo</LI>
		///		 <LI>MInstructorLateDeductionFee</LI>
		///		 <LI>NDaysToExpire</LI>
		///		 <LI>NClassLeft</LI>
		///		 <LI>StrBJReportDir</LI>
		///		 <LI>StrPayrollDir</LI>
		///		 <LI>NMaxCarryForwardLeave</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCompany");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompanyCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCompanyCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strCompanyCode = (string)toReturn.Rows[0]["strCompanyCode"];
					_strCompanyName = toReturn.Rows[0]["strCompanyName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCompanyName"];
					_nTaxID = (Int32)toReturn.Rows[0]["nTaxID"];
					_mForgetCardRate = toReturn.Rows[0]["mForgetCardRate"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mForgetCardRate"];
					_mReplaceCardRate = toReturn.Rows[0]["mReplaceCardRate"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mReplaceCardRate"];
					_mRegistrationFees = toReturn.Rows[0]["mRegistrationFees"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mRegistrationFees"];
					_strBankCode = (string)toReturn.Rows[0]["strBankCode"];
					_strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
					_strAccountNo = toReturn.Rows[0]["strAccountNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strAccountNo"];
					_strAccountName = toReturn.Rows[0]["strAccountName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strAccountName"];
					_strBatchNo = toReturn.Rows[0]["strBatchNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["strBatchNo"];
					_strCompanyCodeRef = toReturn.Rows[0]["strCompanyCodeRef"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCompanyCodeRef"];
					_strCompanyID = toReturn.Rows[0]["strCompanyID"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCompanyID"];
					_strCPFReferenceNo = toReturn.Rows[0]["strCPFReferenceNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCPFReferenceNo"];
					_nCancelBookingLimit = toReturn.Rows[0]["nCancelBookingLimit"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nCancelBookingLimit"];
					_nUOBMonthlyBooking = toReturn.Rows[0]["nUOBMonthlyBooking"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nUOBMonthlyBooking"];
					_dtUOBWeekdayPeakStart = toReturn.Rows[0]["dtUOBWeekdayPeakStart"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtUOBWeekdayPeakStart"];
					_dtUOBWeekdayPeakEnd = toReturn.Rows[0]["dtUOBWeekdayPeakEnd"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtUOBWeekdayPeakEnd"];
					_dtUOBWeekendPeakStart = toReturn.Rows[0]["dtUOBWeekendPeakStart"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtUOBWeekendPeakStart"];
					_dtUOBWeekendPeakEnd = toReturn.Rows[0]["dtUOBWeekendPeakEnd"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtUOBWeekendPeakEnd"];
					_nNonMembershipNo = toReturn.Rows[0]["nNonMembershipNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nNonMembershipNo"];
					_mInstructorLateDeductionFee = toReturn.Rows[0]["mInstructorLateDeductionFee"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mInstructorLateDeductionFee"];
					_nDaysToExpire = toReturn.Rows[0]["nDaysToExpire"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nDaysToExpire"];
					_nClassLeft = toReturn.Rows[0]["nClassLeft"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nClassLeft"];
					_strBJReportDir = toReturn.Rows[0]["strBJReportDir"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strBJReportDir"];
					_strPayrollDir = toReturn.Rows[0]["strPayrollDir"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strPayrollDir"];
					_nMaxCarryForwardLeave = toReturn.Rows[0]["nMaxCarryForwardLeave"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMaxCarryForwardLeave"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCompany");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nTaxID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NTaxID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnTaxIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_SelectAllWnTaxIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCompany");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inTaxID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nTaxID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_SelectAllWnTaxIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::SelectAllWnTaxIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strBankCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBankCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrBankCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCompany_SelectAllWstrBankCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCompany");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBankCode", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBankCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCompany_SelectAllWstrBankCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::SelectAllWstrBankCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
		#endregion

		#region Lee Chau Chon Code
		public DataTable IncOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblCompany_IncOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCompany");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblCompany_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strCompanyCode = toReturn.Rows[0]["strCompanyCode"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCompanyCode"];
					_nNonMembershipNo = toReturn.Rows[0]["nNonMembershipNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nNonMembershipNo"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::IncOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public bool UpdateLastMembershipID(int nNonMembershipNo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblCompany_UpdateLastNonMemberID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inNonMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nNonMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblCompany_UpdateLastNonMemberID' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::UpdateLastNonMemberID::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		public bool UpdateBlockNonMembershipID(int nNonMembershipNo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblCompany_UpdateBlockNonMemberID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inNumberOfNonMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nNonMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblCompany_UpdateBlockNonMemberID' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCompany::UpdateBlockNonMemberID::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}
		#endregion

		#region Class Property Declarations
		public SqlString StrCompanyCode
		{
			get
			{
				return _strCompanyCode;
			}
			set
			{
				SqlString strCompanyCodeTmp = (SqlString)value;
				if(strCompanyCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrCompanyCode", "StrCompanyCode can't be NULL");
				}
				_strCompanyCode = value;
			}
		}


		public SqlString StrCompanyName
		{
			get
			{
				return _strCompanyName;
			}
			set
			{
				_strCompanyName = value;
			}
		}


		public SqlInt32 NTaxID
		{
			get
			{
				return _nTaxID;
			}
			set
			{
				SqlInt32 nTaxIDTmp = (SqlInt32)value;
				if(nTaxIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NTaxID", "NTaxID can't be NULL");
				}
				_nTaxID = value;
			}
		}
		public SqlInt32 NTaxIDOld
		{
			get
			{
				return _nTaxIDOld;
			}
			set
			{
				SqlInt32 nTaxIDOldTmp = (SqlInt32)value;
				if(nTaxIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NTaxIDOld", "NTaxIDOld can't be NULL");
				}
				_nTaxIDOld = value;
			}
		}


		public SqlMoney MForgetCardRate
		{
			get
			{
				return _mForgetCardRate;
			}
			set
			{
				_mForgetCardRate = value;
			}
		}


		public SqlMoney MReplaceCardRate
		{
			get
			{
				return _mReplaceCardRate;
			}
			set
			{
				_mReplaceCardRate = value;
			}
		}


		public SqlMoney MRegistrationFees
		{
			get
			{
				return _mRegistrationFees;
			}
			set
			{
				_mRegistrationFees = value;
			}
		}


		public SqlString StrBankCode
		{
			get
			{
				return _strBankCode;
			}
			set
			{
				SqlString strBankCodeTmp = (SqlString)value;
				if(strBankCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBankCode", "StrBankCode can't be NULL");
				}
				_strBankCode = value;
			}
		}
		public SqlString StrBankCodeOld
		{
			get
			{
				return _strBankCodeOld;
			}
			set
			{
				SqlString strBankCodeOldTmp = (SqlString)value;
				if(strBankCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBankCodeOld", "StrBankCodeOld can't be NULL");
				}
				_strBankCodeOld = value;
			}
		}


		public SqlString StrBranchCode
		{
			get
			{
				return _strBranchCode;
			}
			set
			{
				SqlString strBranchCodeTmp = (SqlString)value;
				if(strBranchCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
				}
				_strBranchCode = value;
			}
		}


		public SqlString StrAccountNo
		{
			get
			{
				return _strAccountNo;
			}
			set
			{
				_strAccountNo = value;
			}
		}


		public SqlString StrAccountName
		{
			get
			{
				return _strAccountName;
			}
			set
			{
				_strAccountName = value;
			}
		}


		public SqlInt32 StrBatchNo
		{
			get
			{
				return _strBatchNo;
			}
			set
			{
				_strBatchNo = value;
			}
		}


		public SqlString StrCompanyCodeRef
		{
			get
			{
				return _strCompanyCodeRef;
			}
			set
			{
				_strCompanyCodeRef = value;
			}
		}


		public SqlString StrCompanyID
		{
			get
			{
				return _strCompanyID;
			}
			set
			{
				_strCompanyID = value;
			}
		}


		public SqlString StrCPFReferenceNo
		{
			get
			{
				return _strCPFReferenceNo;
			}
			set
			{
				_strCPFReferenceNo = value;
			}
		}


		public SqlInt32 NCancelBookingLimit
		{
			get
			{
				return _nCancelBookingLimit;
			}
			set
			{
				_nCancelBookingLimit = value;
			}
		}


		public SqlInt32 NUOBMonthlyBooking
		{
			get
			{
				return _nUOBMonthlyBooking;
			}
			set
			{
				_nUOBMonthlyBooking = value;
			}
		}


		public SqlDateTime DtUOBWeekdayPeakStart
		{
			get
			{
				return _dtUOBWeekdayPeakStart;
			}
			set
			{
				_dtUOBWeekdayPeakStart = value;
			}
		}


		public SqlDateTime DtUOBWeekdayPeakEnd
		{
			get
			{
				return _dtUOBWeekdayPeakEnd;
			}
			set
			{
				_dtUOBWeekdayPeakEnd = value;
			}
		}


		public SqlDateTime DtUOBWeekendPeakStart
		{
			get
			{
				return _dtUOBWeekendPeakStart;
			}
			set
			{
				_dtUOBWeekendPeakStart = value;
			}
		}


		public SqlDateTime DtUOBWeekendPeakEnd
		{
			get
			{
				return _dtUOBWeekendPeakEnd;
			}
			set
			{
				_dtUOBWeekendPeakEnd = value;
			}
		}


		public SqlInt32 NNonMembershipNo
		{
			get
			{
				return _nNonMembershipNo;
			}
			set
			{
				_nNonMembershipNo = value;
			}
		}


		public SqlMoney MInstructorLateDeductionFee
		{
			get
			{
				return _mInstructorLateDeductionFee;
			}
			set
			{
				_mInstructorLateDeductionFee = value;
			}
		}


		public SqlInt32 NDaysToExpire
		{
			get
			{
				return _nDaysToExpire;
			}
			set
			{
				_nDaysToExpire = value;
			}
		}


		public SqlInt32 NClassLeft
		{
			get
			{
				return _nClassLeft;
			}
			set
			{
				_nClassLeft = value;
			}
		}


		public SqlString StrBJReportDir
		{
			get
			{
				return _strBJReportDir;
			}
			set
			{
				_strBJReportDir = value;
			}
		}


		public SqlString StrPayrollDir
		{
			get
			{
				return _strPayrollDir;
			}
			set
			{
				_strPayrollDir = value;
			}
		}


		public SqlInt32 NMaxCarryForwardLeave
		{
			get
			{
				return _nMaxCarryForwardLeave;
			}
			set
			{
				_nMaxCarryForwardLeave = value;
			}
		}
		#endregion
	}
}

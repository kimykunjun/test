///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblEmployee'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:06
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblEmployee'.
	/// </summary>
	public class TblEmployee : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		_fPartTime, _nStatusID;
			private SqlString		_strBranchCode, _strBranchCodeOld;
        private SqlDateTime _dtEmployeeStartDate, _dtCessation;
			private SqlInt32		_nRightsLevelID, _nRightsLevelIDOld, _nServiceCommLevel, _nInstructorTypeID, _nInstructorTypeIDOld, _nDepartmentID, _nEmployeeID;
			private SqlMoney		_mPTPackageTarget, _mSpaProductTarget, _mFitnessPackageTarget, _mFitnessProductTarget, _mSpaPackageTarget;
			private SqlString		_strPassword, _strEmployeeName, _strContactNo, _strJobPositionCode, _strJobPositionCodeOld;
		#endregion

		#region LLBLGen Generated Code
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblEmployee()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>StrEmployeeName. May be SqlString.Null</LI>
		///		 <LI>StrPassword. May be SqlString.Null</LI>
		///		 <LI>StrJobPositionCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>DtEmployeeStartDate. May be SqlDateTime.Null</LI>
		///		 <LI>NRightsLevelID</LI>
		///		 <LI>MFitnessPackageTarget. May be SqlMoney.Null</LI>
		///		 <LI>MFitnessProductTarget. May be SqlMoney.Null</LI>
		///		 <LI>MSpaPackageTarget. May be SqlMoney.Null</LI>
		///		 <LI>MSpaProductTarget. May be SqlMoney.Null</LI>
		///		 <LI>MPTPackageTarget. May be SqlMoney.Null</LI>
		///		 <LI>NInstructorTypeID. May be SqlInt32.Null</LI>
		///		 <LI>NServiceCommLevel. May be SqlInt32.Null</LI>
		///		 <LI>StrContactNo. May be SqlString.Null</LI>
		///		 <LI>FPartTime. May be SqlBoolean.Null</LI>
		///		 <LI>NStatusID. May be SqlInt32.Null</LI>
		///		 <LI>NDepartmentID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmployeeName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmployeeName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPassword", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPassword));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrJobPositionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strJobPositionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtEmployeeStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtEmployeeStartDate));
                //cmdToExecute.Parameters.Add(new SqlParameter("@dadtEmployeeEndDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtCessation));
				cmdToExecute.Parameters.Add(new SqlParameter("@inRightsLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nRightsLevelID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmFitnessPackageTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mFitnessPackageTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmFitnessProductTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mFitnessProductTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmSpaPackageTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mSpaPackageTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmSpaProductTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mSpaProductTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmPTPackageTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mPTPackageTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@inInstructorTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nInstructorTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inServiceCommLevel", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nServiceCommLevel));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrContactNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strContactNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPartTime", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPartTime));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _nStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inDepartmentID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nDepartmentID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>StrEmployeeName. May be SqlString.Null</LI>
		///		 <LI>StrPassword. May be SqlString.Null</LI>
		///		 <LI>StrJobPositionCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>DtEmployeeStartDate. May be SqlDateTime.Null</LI>
		///		 <LI>NRightsLevelID</LI>
		///		 <LI>MFitnessPackageTarget. May be SqlMoney.Null</LI>
		///		 <LI>MFitnessProductTarget. May be SqlMoney.Null</LI>
		///		 <LI>MSpaPackageTarget. May be SqlMoney.Null</LI>
		///		 <LI>MSpaProductTarget. May be SqlMoney.Null</LI>
		///		 <LI>MPTPackageTarget. May be SqlMoney.Null</LI>
		///		 <LI>NInstructorTypeID. May be SqlInt32.Null</LI>
		///		 <LI>NServiceCommLevel. May be SqlInt32.Null</LI>
		///		 <LI>StrContactNo. May be SqlString.Null</LI>
		///		 <LI>FPartTime. May be SqlBoolean.Null</LI>
		///		 <LI>NStatusID. May be SqlInt32.Null</LI>
		///		 <LI>NDepartmentID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmployeeName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmployeeName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPassword", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPassword));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrJobPositionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strJobPositionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtEmployeeStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtEmployeeStartDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@inRightsLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nRightsLevelID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmFitnessPackageTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mFitnessPackageTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmFitnessProductTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mFitnessProductTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmSpaPackageTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mSpaPackageTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmSpaProductTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mSpaProductTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmPTPackageTarget", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mPTPackageTarget));
				cmdToExecute.Parameters.Add(new SqlParameter("@inInstructorTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nInstructorTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inServiceCommLevel", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nServiceCommLevel));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrContactNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strContactNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPartTime", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPartTime));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _nStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inDepartmentID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nDepartmentID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strJobPositionCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strJobPositionCode' in
		/// all rows which have as value for this field the value as set in property 'StrJobPositionCodeOld' to 
		/// the value as set in property 'StrJobPositionCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrJobPositionCode</LI>
		///		 <LI>StrJobPositionCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrJobPositionCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_UpdateAllWstrJobPositionCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrJobPositionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strJobPositionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrJobPositionCodeOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strJobPositionCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_UpdateAllWstrJobPositionCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::UpdateAllWstrJobPositionCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strBranchCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strBranchCode' in
		/// all rows which have as value for this field the value as set in property 'StrBranchCodeOld' to 
		/// the value as set in property 'StrBranchCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrBranchCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_UpdateAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCodeOld", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_UpdateAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::UpdateAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nRightsLevelID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nRightsLevelID' in
		/// all rows which have as value for this field the value as set in property 'NRightsLevelIDOld' to 
		/// the value as set in property 'NRightsLevelID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NRightsLevelID</LI>
		///		 <LI>NRightsLevelIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnRightsLevelIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_UpdateAllWnRightsLevelIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inRightsLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nRightsLevelID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inRightsLevelIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nRightsLevelIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_UpdateAllWnRightsLevelIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::UpdateAllWnRightsLevelIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nInstructorTypeID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nInstructorTypeID' in
		/// all rows which have as value for this field the value as set in property 'NInstructorTypeIDOld' to 
		/// the value as set in property 'NInstructorTypeID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NInstructorTypeID. May be SqlInt32.Null</LI>
		///		 <LI>NInstructorTypeIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnInstructorTypeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_UpdateAllWnInstructorTypeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inInstructorTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nInstructorTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inInstructorTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nInstructorTypeIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_UpdateAllWnInstructorTypeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::UpdateAllWnInstructorTypeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strJobPositionCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrJobPositionCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrJobPositionCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_DeleteAllWstrJobPositionCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrJobPositionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strJobPositionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_DeleteAllWstrJobPositionCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::DeleteAllWstrJobPositionCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strBranchCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_DeleteAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_DeleteAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::DeleteAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nRightsLevelID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NRightsLevelID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnRightsLevelIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_DeleteAllWnRightsLevelIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inRightsLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nRightsLevelID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_DeleteAllWnRightsLevelIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::DeleteAllWnRightsLevelIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nInstructorTypeID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NInstructorTypeID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnInstructorTypeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_DeleteAllWnInstructorTypeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inInstructorTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nInstructorTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_DeleteAllWnInstructorTypeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::DeleteAllWnInstructorTypeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>StrEmployeeName</LI>
		///		 <LI>StrPassword</LI>
		///		 <LI>StrJobPositionCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>DtEmployeeStartDate</LI>
		///		 <LI>NRightsLevelID</LI>
		///		 <LI>MFitnessPackageTarget</LI>
		///		 <LI>MFitnessProductTarget</LI>
		///		 <LI>MSpaPackageTarget</LI>
		///		 <LI>MSpaProductTarget</LI>
		///		 <LI>MPTPackageTarget</LI>
		///		 <LI>NInstructorTypeID</LI>
		///		 <LI>NServiceCommLevel</LI>
		///		 <LI>StrContactNo</LI>
		///		 <LI>FPartTime</LI>
		///		 <LI>NStatusID</LI>
		///		 <LI>NDepartmentID</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
					_strEmployeeName = toReturn.Rows[0]["strEmployeeName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strEmployeeName"];
					_strPassword = toReturn.Rows[0]["strPassword"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strPassword"];
					_strJobPositionCode = (string)toReturn.Rows[0]["strJobPositionCode"];
					_strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
					_dtEmployeeStartDate = toReturn.Rows[0]["dtEmployeeStartDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtEmployeeStartDate"];
                    _dtCessation = toReturn.Rows[0]["dtCessation"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtCessation"];
					_nRightsLevelID = (Int32)toReturn.Rows[0]["nRightsLevelID"];
					_mFitnessPackageTarget = toReturn.Rows[0]["mFitnessPackageTarget"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mFitnessPackageTarget"];
					_mFitnessProductTarget = toReturn.Rows[0]["mFitnessProductTarget"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mFitnessProductTarget"];
					_mSpaPackageTarget = toReturn.Rows[0]["mSpaPackageTarget"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mSpaPackageTarget"];
					_mSpaProductTarget = toReturn.Rows[0]["mSpaProductTarget"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mSpaProductTarget"];
					_mPTPackageTarget = toReturn.Rows[0]["mPTPackageTarget"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mPTPackageTarget"];
					_nInstructorTypeID = toReturn.Rows[0]["nInstructorTypeID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nInstructorTypeID"];
					_nServiceCommLevel = toReturn.Rows[0]["nServiceCommLevel"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nServiceCommLevel"];
					_strContactNo = toReturn.Rows[0]["strContactNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strContactNo"];
					_fPartTime = toReturn.Rows[0]["fPartTime"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fPartTime"];
					_nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["nStatusID"];
					_nDepartmentID = toReturn.Rows[0]["nDepartmentID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nDepartmentID"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strJobPositionCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrJobPositionCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrJobPositionCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectAllWstrJobPositionCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrJobPositionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strJobPositionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAllWstrJobPositionCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::SelectAllWstrJobPositionCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strBranchCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::SelectAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public DataTable SelectAllBranchEmployee()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectBranchEmployee]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblEmployee");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblEmployee::SelectAllWstrBranchCodeLogic::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectHqDepartmentEmployee()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectHqDepartmentEmployee]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblEmployee");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@nDepartment", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nDepartmentID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblEmployee::SelectAllWstrBranchCodeLogic::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nRightsLevelID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NRightsLevelID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnRightsLevelIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectAllWnRightsLevelIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inRightsLevelID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nRightsLevelID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAllWnRightsLevelIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::SelectAllWnRightsLevelIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nInstructorTypeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NInstructorTypeID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnInstructorTypeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblEmployee_SelectAllWnInstructorTypeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inInstructorTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nInstructorTypeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblEmployee_SelectAllWnInstructorTypeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblEmployee::SelectAllWnInstructorTypeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
		#endregion

		#region Class Property Declarations
		public SqlInt32 NEmployeeID
		{
			get
			{
				return _nEmployeeID;
			}
			set
			{
				SqlInt32 nEmployeeIDTmp = (SqlInt32)value;
				if(nEmployeeIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeID", "NEmployeeID can't be NULL");
				}
				_nEmployeeID = value;
			}
		}


		public SqlString StrEmployeeName
		{
			get
			{
				return _strEmployeeName;
			}
			set
			{
				_strEmployeeName = value;
			}
		}


		public SqlString StrPassword
		{
			get
			{
				return _strPassword;
			}
			set
			{
				_strPassword = value;
			}
		}


		public SqlString StrJobPositionCode
		{
			get
			{
				return _strJobPositionCode;
			}
			set
			{
				SqlString strJobPositionCodeTmp = (SqlString)value;
				if(strJobPositionCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrJobPositionCode", "StrJobPositionCode can't be NULL");
				}
				_strJobPositionCode = value;
			}
		}
		public SqlString StrJobPositionCodeOld
		{
			get
			{
				return _strJobPositionCodeOld;
			}
			set
			{
				SqlString strJobPositionCodeOldTmp = (SqlString)value;
				if(strJobPositionCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrJobPositionCodeOld", "StrJobPositionCodeOld can't be NULL");
				}
				_strJobPositionCodeOld = value;
			}
		}


		public SqlString StrBranchCode
		{
			get
			{
				return _strBranchCode;
			}
			set
			{
				SqlString strBranchCodeTmp = (SqlString)value;
				if(strBranchCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
				}
				_strBranchCode = value;
			}
		}
		public SqlString StrBranchCodeOld
		{
			get
			{
				return _strBranchCodeOld;
			}
			set
			{
				SqlString strBranchCodeOldTmp = (SqlString)value;
				if(strBranchCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCodeOld", "StrBranchCodeOld can't be NULL");
				}
				_strBranchCodeOld = value;
			}
		}


		public SqlDateTime DtEmployeeStartDate
		{
			get
			{
				return _dtEmployeeStartDate;
			}
			set
			{
				_dtEmployeeStartDate = value;
			}
		}

        public SqlDateTime DtCessation
        {
            get
            {
                return _dtCessation;
            }
            set
            {
                _dtCessation = value;
            }
        }

		public SqlInt32 NRightsLevelID
		{
			get
			{
				return _nRightsLevelID;
			}
			set
			{
				SqlInt32 nRightsLevelIDTmp = (SqlInt32)value;
				if(nRightsLevelIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NRightsLevelID", "NRightsLevelID can't be NULL");
				}
				_nRightsLevelID = value;
			}
		}
		public SqlInt32 NRightsLevelIDOld
		{
			get
			{
				return _nRightsLevelIDOld;
			}
			set
			{
				SqlInt32 nRightsLevelIDOldTmp = (SqlInt32)value;
				if(nRightsLevelIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NRightsLevelIDOld", "NRightsLevelIDOld can't be NULL");
				}
				_nRightsLevelIDOld = value;
			}
		}


		public SqlMoney MFitnessPackageTarget
		{
			get
			{
				return _mFitnessPackageTarget;
			}
			set
			{
				_mFitnessPackageTarget = value;
			}
		}


		public SqlMoney MFitnessProductTarget
		{
			get
			{
				return _mFitnessProductTarget;
			}
			set
			{
				_mFitnessProductTarget = value;
			}
		}


		public SqlMoney MSpaPackageTarget
		{
			get
			{
				return _mSpaPackageTarget;
			}
			set
			{
				_mSpaPackageTarget = value;
			}
		}


		public SqlMoney MSpaProductTarget
		{
			get
			{
				return _mSpaProductTarget;
			}
			set
			{
				_mSpaProductTarget = value;
			}
		}


		public SqlMoney MPTPackageTarget
		{
			get
			{
				return _mPTPackageTarget;
			}
			set
			{
				_mPTPackageTarget = value;
			}
		}


		public SqlInt32 NInstructorTypeID
		{
			get
			{
				return _nInstructorTypeID;
			}
			set
			{
				_nInstructorTypeID = value;
			}
		}
		public SqlInt32 NInstructorTypeIDOld
		{
			get
			{
				return _nInstructorTypeIDOld;
			}
			set
			{
				_nInstructorTypeIDOld = value;
			}
		}


		public SqlInt32 NServiceCommLevel
		{
			get
			{
				return _nServiceCommLevel;
			}
			set
			{
				_nServiceCommLevel = value;
			}
		}


		public SqlString StrContactNo
		{
			get
			{
				return _strContactNo;
			}
			set
			{
				_strContactNo = value;
			}
		}


		public SqlBoolean FPartTime
		{
			get
			{
				return _fPartTime;
			}
			set
			{
				_fPartTime = value;
			}
		}


		public SqlBoolean NStatusID
		{
			get
			{
				return _nStatusID;
			}
			set
			{
				_nStatusID = value;
			}
		}


		public SqlInt32 NDepartmentID
		{
			get
			{
				return _nDepartmentID;
			}
			set
			{
				_nDepartmentID = value;
			}
		}
		#endregion
	
		public DataTable GetPersonalTrainer(string strBranchCode)
		{
//			string cmdText = "Select A.* from tblEmployee A Inner Join tblJobPosition B " + 
//						" on A.strJobPositionCode = B.strJobPositionCode " + 
//						" Inner Join tblEmployeeBranchRights C on C.nEmployeeID = A.nEmployeeID"+
//						" Where A.strBranchCode = @strBranchCode AND C.strBranchCode = @strBranchCode AND " + 
//						" B.strDescription = 'Personal Trainer'";
//			return base.LoadData(cmdText, new string[]{"@strBranchCode"}, new object[] {strBranchCode});
			string cmdText = "Select * from tblEmployee where fPtInstructor  = 1 and nStatusID=1";
			return base.LoadData(cmdText);
		}

		public DataTable GetTherapistForCommision(string strBranchCode)
		{
			string cmdText = "Select A.* from tblEmployee A " + 
				" Inner Join tblEmployeeBranchRights C on C.nEmployeeID = A.nEmployeeID "+
				" Where A.strBranchCode = @strBranchCode AND C.strBranchCode = @strBranchCode AND " + 
				" A.fServiceCommission = 1 and A.nStatusID=1";
			return base.LoadData(cmdText, new string[]{"@strBranchCode"}, new object[] {strBranchCode});
		}

		public DataTable GetTherapistForCommision()
		{
			string cmdText = "Select A.* from tblEmployee A " + 
				" Where A.fServiceCommission = 1 and nStatusID=1";
			return base.LoadData(cmdText);
		}

		public DataTable GetTherapistForSpaBooking(string strBranchCode, DateTime dtDate, int from, int to)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[usp_GetTherapist]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblEmployee");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add("@strBranchCode", strBranchCode);
				cmdToExecute.Parameters.Add("@From", from);
				cmdToExecute.Parameters.Add("@To", to);
				cmdToExecute.Parameters.Add("@dtDate", dtDate);

				if (_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
			
				return toReturn;
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		//
		public DataTable GetTherapistForSales()
		{
			// any staff can work in any branch
			string cmdText = "Select A.* from tblEmployee A " +
                " Where A.fSalesPerson = 1 and A.nStatusID=1 Order By strEmployeeName ASC "; 
				
			return base.LoadData(cmdText);
		}
		
		public DataTable GetInstructorEmployee()
		{
			string cmdText = "Select * from tblEmployee A where A.nStatusID=1 and (A.fPtInstructor  = 1 or A.fInstructor = 1)";
			
			return base.LoadData(cmdText);
		}

		public DataTable GetInstructorEmployee(string strBranchCode)
		{
			string cmdText = "Select A.* from tblEmployee A " + 
				" Inner Join tblEmployeeBranchRights C on C.nEmployeeID = A.nEmployeeID"+
				" Where A.nStatusID=1 and A.strBranchCode = @strBranchCode AND C.strBranchCode = @strBranchCode AND " + 
				" (A.fPtInstructor  = 1 or A.fInstructor = 1)";
			
			return base.LoadData(cmdText, new string[]{"@strBranchCode"}, new object[] {strBranchCode});
		}

		public DataTable SelectAllWithfMemoGroupFilter()
		{
			string cmdText = "Select * FROM tblEmployee WHERE fMemoGroup = 1 and nStatusID=1";
			return base.LoadData(cmdText);
		}
		
		public bool IsSaleDivisionSpa(int SalesPersonID)
        {
            bool rval = false;
            
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = @"SELECT * FROM tblEmployee AS e LEFT OUTER JOIN
                                        tblJobPosition AS j ON e.strJobPositionCode = j.strJobPositionCode
                                        WHERE j.nSalesDivision = 2 AND e.nEmployeeID = @SalesPersonID";

            cmdToExecute.CommandType = CommandType.Text;

            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add("@SalesPersonID", SalesPersonID);

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                SqlDataReader dr = cmdToExecute.ExecuteReader();

                if (dr.HasRows)
                {
                    rval = true;
                }
                dr.Close();
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();             
            }          

            return rval;
        }

        public bool IsSaleDivisionFit(int SalesPersonID)
        {
            bool rval = false;

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = @"SELECT * FROM tblEmployee AS e LEFT OUTER JOIN
                                        tblJobPosition AS j ON e.strJobPositionCode = j.strJobPositionCode
                                        WHERE j.nSalesDivision = 1 AND e.nEmployeeID = @SalesPersonID";

            cmdToExecute.CommandType = CommandType.Text;

            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add("@SalesPersonID", SalesPersonID);

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                SqlDataReader dr = cmdToExecute.ExecuteReader();

                if (dr.HasRows)
                {
                    rval = true;
                }
                dr.Close();
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }

            return rval;
        }

	}
}

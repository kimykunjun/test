///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblMemberCreditPackage'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:09
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblMemberCreditPackage'.
	/// </summary>
	public class TblMemberCreditPackage : DBInteractionBase
	{
		#region Class Member Declarations
		private SqlBoolean		_fFree;
		private SqlDateTime		_dtStartDate, _dtExpiryDate, _dtLastEditDate, _dtPurchaseDate;
		private SqlInt32		_nStatusID, _nEmployeeID, _nEmployeeIDOld, _nTempPackageID, _nCreditPackageID;
		private SqlMoney		_mTopupAmount;
		private SqlString		_strRemarks, _strMembershipID, _strMembershipIDOld, _strCreditPackageCode, _strCreditPackageCodeOld, _strReceiptNo, _strReceiptNoOld, _strupgradefrom, _strupgradeto;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblMemberCreditPackage()
		{
			// Nothing for now.
		}

        public void InsertMemberCreditPackageConvertion(int nPackageID, decimal mAmount)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberPackageConvertion_Insert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {

                cmdToExecute.Parameters.Add(new SqlParameter("@nPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@mAmount", SqlDbType.Decimal, 8, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, decimal.Parse(mAmount.ToString("0.00"))));


                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberPackage::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>DtPurchaseDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtStartDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtExpiryDate. May be SqlDateTime.Null</LI>
		///		 <LI>FFree. May be SqlBoolean.Null</LI>
		///		 <LI>StrReceiptNo. May be SqlString.Null</LI>
		///		 <LI>NStatusID. May be SqlInt32.Null</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>DtLastEditDate. May be SqlDateTime.Null</LI>
		///		 <LI>MTopupAmount. May be SqlMoney.Null</LI>
		///		 <LI>NTempPackageID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>NCreditPackageID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtPurchaseDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtExpiryDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtExpiryDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtLastEditDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtLastEditDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmTopupAmount", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mTopupAmount));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTempPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nTempPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_nCreditPackageID = (SqlInt32)cmdToExecute.Parameters["@inCreditPackageID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCreditPackageID</LI>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>DtPurchaseDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtStartDate. May be SqlDateTime.Null</LI>
		///		 <LI>DtExpiryDate. May be SqlDateTime.Null</LI>
		///		 <LI>FFree. May be SqlBoolean.Null</LI>
		///		 <LI>StrReceiptNo. May be SqlString.Null</LI>
		///		 <LI>NStatusID. May be SqlInt32.Null</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>DtLastEditDate. May be SqlDateTime.Null</LI>
		///		 <LI>MTopupAmount. May be SqlMoney.Null</LI>
		///		 <LI>NTempPackageID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtPurchaseDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtExpiryDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtExpiryDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtLastEditDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtLastEditDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmTopupAmount", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mTopupAmount));
				cmdToExecute.Parameters.Add(new SqlParameter("@inTempPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nTempPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@strUpgradeFrom", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strupgradefrom));
                cmdToExecute.Parameters.Add(new SqlParameter("@strUpgradeTo", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strupgradeto));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strMembershipID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strMembershipID' in
		/// all rows which have as value for this field the value as set in property 'StrMembershipIDOld' to 
		/// the value as set in property 'StrMembershipID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrMembershipIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_UpdateAllWstrMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipIDOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_UpdateAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::UpdateAllWstrMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strCreditPackageCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strCreditPackageCode' in
		/// all rows which have as value for this field the value as set in property 'StrCreditPackageCodeOld' to 
		/// the value as set in property 'StrCreditPackageCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>StrCreditPackageCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrCreditPackageCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_UpdateAllWstrCreditPackageCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCodeOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_UpdateAllWstrCreditPackageCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::UpdateAllWstrCreditPackageCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strReceiptNo.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strReceiptNo' in
		/// all rows which have as value for this field the value as set in property 'StrReceiptNoOld' to 
		/// the value as set in property 'StrReceiptNo'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrReceiptNo. May be SqlString.Null</LI>
		///		 <LI>StrReceiptNoOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrReceiptNoLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_UpdateAllWstrReceiptNoLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNoOld", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNoOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_UpdateAllWstrReceiptNoLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::UpdateAllWstrReceiptNoLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nEmployeeID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nEmployeeID' in
		/// all rows which have as value for this field the value as set in property 'NEmployeeIDOld' to 
		/// the value as set in property 'NEmployeeID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>NEmployeeIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_UpdateAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_UpdateAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::UpdateAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public bool MemberCreditPackage_ExtensionUpdate(int nCreditPackageID, int nStatusID, DateTime dtExpiryDate, string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_ExtensionUpdate]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@nCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, nCreditPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@nStatusID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, nStatusID));
                cmdToExecute.Parameters.Add(new SqlParameter("@dtExpiryDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 23, 3, "", DataRowVersion.Proposed, dtExpiryDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));                
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_ExtensionUpdate' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMemberCreditPackage::MemberCreditPackage_ExtensionUpdate::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCreditPackageID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strMembershipID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_DeleteAllWstrMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_DeleteAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::DeleteAllWstrMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strCreditPackageCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrCreditPackageCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_DeleteAllWstrCreditPackageCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_DeleteAllWstrCreditPackageCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::DeleteAllWstrCreditPackageCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strReceiptNo'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrReceiptNo. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrReceiptNoLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_DeleteAllWstrReceiptNoLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_DeleteAllWstrReceiptNoLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::DeleteAllWstrReceiptNoLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nEmployeeID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_DeleteAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_DeleteAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::DeleteAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCreditPackageID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>NCreditPackageID</LI>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>DtPurchaseDate</LI>
		///		 <LI>DtStartDate</LI>
		///		 <LI>DtExpiryDate</LI>
		///		 <LI>FFree</LI>
		///		 <LI>StrReceiptNo</LI>
		///		 <LI>NStatusID</LI>
		///		 <LI>NEmployeeID</LI>
		///		 <LI>StrRemarks</LI>
		///		 <LI>DtLastEditDate</LI>
		///		 <LI>MTopupAmount</LI>
		///		 <LI>NTempPackageID</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_nCreditPackageID = (Int32)toReturn.Rows[0]["nCreditPackageID"];
					_strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
					_strCreditPackageCode = (string)toReturn.Rows[0]["strCreditPackageCode"];
					_dtPurchaseDate = toReturn.Rows[0]["dtPurchaseDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtPurchaseDate"];
					_dtStartDate = toReturn.Rows[0]["dtStartDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartDate"];
					_dtExpiryDate = toReturn.Rows[0]["dtExpiryDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtExpiryDate"];
					_fFree = toReturn.Rows[0]["fFree"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fFree"];
					_strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
					_nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatusID"];
					_nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
					_strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
					_dtLastEditDate = toReturn.Rows[0]["dtLastEditDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtLastEditDate"];
					_mTopupAmount = toReturn.Rows[0]["mTopupAmount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mTopupAmount"];
					_nTempPackageID = toReturn.Rows[0]["nTempPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nTempPackageID"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strMembershipID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_SelectAllWstrMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_SelectAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::SelectAllWstrMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strCreditPackageCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrCreditPackageCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_SelectAllWstrCreditPackageCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_SelectAllWstrCreditPackageCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::SelectAllWstrCreditPackageCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strReceiptNo'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrReceiptNo. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrReceiptNoLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_SelectAllWstrReceiptNoLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_SelectAllWstrReceiptNoLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::SelectAllWstrReceiptNoLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nEmployeeID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnEmployeeIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMemberCreditPackage_SelectAllWnEmployeeIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMemberCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMemberCreditPackage_SelectAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMemberCreditPackage::SelectAllWnEmployeeIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 NCreditPackageID
		{
			get
			{
				return _nCreditPackageID;
			}
			set
			{
				SqlInt32 nCreditPackageIDTmp = (SqlInt32)value;
				if(nCreditPackageIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NCreditPackageID", "NCreditPackageID can't be NULL");
				}
				_nCreditPackageID = value;
			}
		}


		public SqlString StrMembershipID
		{
			get
			{
				return _strMembershipID;
			}
			set
			{
				SqlString strMembershipIDTmp = (SqlString)value;
				if(strMembershipIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrMembershipID", "StrMembershipID can't be NULL");
				}
				_strMembershipID = value;
			}
		}
		public SqlString StrMembershipIDOld
		{
			get
			{
				return _strMembershipIDOld;
			}
			set
			{
				SqlString strMembershipIDOldTmp = (SqlString)value;
				if(strMembershipIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrMembershipIDOld", "StrMembershipIDOld can't be NULL");
				}
				_strMembershipIDOld = value;
			}
		}


		public SqlString StrCreditPackageCode
		{
			get
			{
				return _strCreditPackageCode;
			}
			set
			{
				SqlString strCreditPackageCodeTmp = (SqlString)value;
				if(strCreditPackageCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrCreditPackageCode", "StrCreditPackageCode can't be NULL");
				}
				_strCreditPackageCode = value;
			}
		}
		public SqlString StrCreditPackageCodeOld
		{
			get
			{
				return _strCreditPackageCodeOld;
			}
			set
			{
				SqlString strCreditPackageCodeOldTmp = (SqlString)value;
				if(strCreditPackageCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrCreditPackageCodeOld", "StrCreditPackageCodeOld can't be NULL");
				}
				_strCreditPackageCodeOld = value;
			}
		}


		public SqlDateTime DtPurchaseDate
		{
			get
			{
				return _dtPurchaseDate;
			}
			set
			{
				_dtPurchaseDate = value;
			}
		}


		public SqlDateTime DtStartDate
		{
			get
			{
				return _dtStartDate;
			}
			set
			{
				_dtStartDate = value;
			}
		}


		public SqlDateTime DtExpiryDate
		{
			get
			{
				return _dtExpiryDate;
			}
			set
			{
				_dtExpiryDate = value;
			}
		}


		public SqlBoolean FFree
		{
			get
			{
				return _fFree;
			}
			set
			{
				_fFree = value;
			}
		}


		public SqlString StrReceiptNo
		{
			get
			{
				return _strReceiptNo;
			}
			set
			{
				_strReceiptNo = value;
			}
		}
		public SqlString StrReceiptNoOld
		{
			get
			{
				return _strReceiptNoOld;
			}
			set
			{
				_strReceiptNoOld = value;
			}
		}

        public SqlString StrUpgradeFrom
        {
            get
            {
                return _strupgradefrom;
            }
            set
            {
                _strupgradefrom = value;
            }
        }

        public SqlString StrUpgradeTo
        {
            get
            {
                return _strupgradeto;
            }
            set
            {
                _strupgradeto = value;
            }
        }

		public SqlInt32 NStatusID
		{
			get
			{
				return _nStatusID;
			}
			set
			{
				_nStatusID = value;
			}
		}


		public SqlInt32 NEmployeeID
		{
			get
			{
				return _nEmployeeID;
			}
			set
			{
				SqlInt32 nEmployeeIDTmp = (SqlInt32)value;
				if(nEmployeeIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeID", "NEmployeeID can't be NULL");
				}
				_nEmployeeID = value;
			}
		}
		public SqlInt32 NEmployeeIDOld
		{
			get
			{
				return _nEmployeeIDOld;
			}
			set
			{
				SqlInt32 nEmployeeIDOldTmp = (SqlInt32)value;
				if(nEmployeeIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeIDOld", "NEmployeeIDOld can't be NULL");
				}
				_nEmployeeIDOld = value;
			}
		}


		public SqlString StrRemarks
		{
			get
			{
				return _strRemarks;
			}
			set
			{
				_strRemarks = value;
			}
		}


		public SqlDateTime DtLastEditDate
		{
			get
			{
				return _dtLastEditDate;
			}
			set
			{
				_dtLastEditDate = value;
			}
		}


		public SqlMoney MTopupAmount
		{
			get
			{
				return _mTopupAmount;
			}
			set
			{
				_mTopupAmount = value;
			}
		}


		public SqlInt32 NTempPackageID
		{
			get
			{
				return _nTempPackageID;
			}
			set
			{
				_nTempPackageID = value;
			}
		}
		#endregion

		#region PickHui
		public void SaveData(DataTable table)
		{
			base.SaveData(table, "Select * From tblMemberCreditPackage");
		}

		public DataTable GetValidMemberCreditPackage(string strMembershipID)
		{
            string cmdtext = " Select A.*, B.mCreditAmount,(B.mListPrice-re.mSubTotal)+((select ISNULL(SUM(mSubtotal),0) from tblReceiptEntries where strReceiptNo=re.strReceiptNo)-r.mNettAmount-ISNULL(r.mUpgradeAmount,0))*(re.mSubTotal/CASE WHEN (select ISNULL(SUM(mSubtotal),1) from tblReceiptEntries where strReceiptNo=re.strReceiptNo)=0 THEN 1 " +
                " ELSE (select ISNULL(SUM(mSubtotal),1) from tblReceiptEntries where strReceiptNo=re.strReceiptNo) END) as mDiscountAmount, " +
                " A.mTopupAmount, C.strEmployeeName, B.strDescription,'Credit Package' as strPackageType, B.nCategoryID, r.strDiscountCode as BillDiscount,re.strDiscountCode as ItemDiscount, ISNULL(mFreeCredit,0) as mFreeCredit " +
                " from tblMemberCreditPackage A inner Join tblCreditPackage B on " + 
				" (A.strCreditPackageCode = B.strCreditPackageCode) " + 
				" Left Outer Join tblEmployee C on A.nEmployeeID = C.nEmployeeID " +
                " left join tblReceipt r on A.strReceiptNo=r.strReceiptNo " +
                " left join tblReceiptEntries re on A.strReceiptNo=re.strReceiptNo and A.strCreditPackageCode=re.strCode " +
                " Where A.strMembershipID = @strMembershipID and A.nStatusID = 0 ";

			return base.LoadData(cmdtext, new string[] {"@strMembershipID"}, new object[] {strMembershipID});
		}

        public DataTable GetValidAndExpiredMemberCreditPackage(string strMembershipID)
        {        
            string cmdText = "sp_GetValidAndExpiredMemberCreditPackage";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValidMemberCreditPackageForConvert(string strMembershipID)
        {          
            string cmdText = "sp_GetValidMemberCreditPackageForConvert";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValidMemberCreditPackageForConvertToFit(string strMembershipID)
        {
            string cmdText = "sp_GetValidMemberCreditPackageForConvertToFit";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValidMemberCreditPackageForPackageUsage(string strMembershipID)
        {          
            string cmdText = "sp_GetValidMemberCreditPackageForPackageUsage";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValidMemberCreditPackageForConvertHolistic(string strMembershipID)
        {       
            string cmdText = "sp_GetValidMemberCreditPackageForConvertHolistic";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValidMemberCreditPackageForConvertHolisticToHolisticFit(string strMembershipID)
        {
            string cmdText = "sp_GetValidMemberCreditPackageForConvertHolisticToHolisticFit";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValidMemberCreditPackageForHolisticPackageUsage(string strMembershipID)
        {         
            string cmdText = "sp_GetValidMemberCreditPackageForHolisticPackageUsage";

            return base.LoadData("sp", cmdText, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable GetValid_NonExpiry_MemberCreditPackage(string strMembershipID)
        {
            string cmdtext = " Select A.*, B.mCreditAmount, A.mTopupAmount, B.dCreditDiscount, B.nCategoryID , B.mFreeCredit " +
                " from tblMemberCreditPackage A inner Join tblCreditPackage B on " +
                " (A.strCreditPackageCode = B.strCreditPackageCode) Where A.strMembershipID = @strMembershipID and " +
                " A.nStatusID = 0";

            return base.LoadData(cmdtext, new string[] { "@strMembershipID" }, new object[] { strMembershipID });
        }

        public DataTable SelectAllWstrReceiptNo(string strReceiptNo)
        {
            string cmdText = "Select * From tblMemberCreditPackage Where strReceiptNo = @strReceiptNo";

            return base.LoadData(cmdText, new string[] { "@strReceiptNo" }, new object[] { strReceiptNo });
        }
        #endregion
    }
}
////////////////////////////////////////////////////////////////////////////////
// Description: Base class for Database Interaction.                       
// Generated by LLBLGen v1.21.2003.712 Final on: Tuesday, December 20, 2005, 11:28:14 PM
// Because this class implements IDisposable, derived classes shouldn't do so.
///////////////////////////////////////////////////////////////////////////////
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Error Enums used by this LLBL library.
	/// </summary>
	public enum LLBLError
	{
		AllOk
		// Add more here (check the comma's!)
	}


	/// <summary>
	/// Purpose: General interface of the API generated. Contains only common methods of all classes.
	/// </summary>
	public interface ICommonDBAccess
	{
		bool		Insert();
		bool		Update();
		bool		Delete();
		DataTable	SelectOne();
		DataTable	SelectAll();
	}


	/// <summary>
	/// Purpose: Abstract base class for Database Interaction classes.
	/// </summary>
	public abstract class DBInteractionBase : IDisposable, ICommonDBAccess
	{
		#region Class Member Declarations
			protected	SqlConnection			_mainConnection;
			protected	int						_rowsAffected;
			protected	SqlInt32				_errorCode;
			protected	bool					_mainConnectionIsCreatedLocal;
			protected	ConnectionProvider		_mainConnectionProvider;
			private		bool					_isDisposed;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public DBInteractionBase()
		{
			// Initialize the class' members.
			InitClass();
		}


		/// <summary>
		/// Purpose: Initializes class members.
		/// </summary>
		private void InitClass()
		{
			// create all the objects and other initialize members.
			_mainConnection = new SqlConnection();
			_mainConnectionIsCreatedLocal = true;
			_mainConnectionProvider = null;
			AppSettingsReader _configReader = new AppSettingsReader();

			// Set connection string of the sqlconnection object
			_mainConnection.ConnectionString = 
						_configReader.GetValue("Main.ConnectionString", typeof(string)).ToString();
			_errorCode = (int)LLBLError.AllOk;
			_isDisposed = false;
		}


		/// <summary>
		/// Purpose: Implements the IDispose' method Dispose.
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}


		/// <summary>
		/// Purpose: Implements the Dispose functionality.
		/// </summary>
		protected virtual void Dispose(bool isDisposing)
		{
			// Check to see if Dispose has already been called.
			if(!_isDisposed)
			{
				if(isDisposing)
				{
					// Dispose managed resources.
					if(_mainConnectionIsCreatedLocal)
					{
						// Object is created in this class, so destroy it here.
						_mainConnection.Close();
						_mainConnection.Dispose();
						_mainConnectionIsCreatedLocal = false;
					}
					_mainConnectionProvider = null;
					_mainConnection = null;
				}
			}
			_isDisposed = true;
		}


		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.Insert() method.
		/// </summary>
		public virtual bool Insert()
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}


		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.Delete() method.
		/// </summary>
		public virtual bool Delete()
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}


		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.Update() method.
		/// </summary>
		public virtual bool Update()
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}


		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.SelectOne() method.
		/// </summary>
		public virtual DataTable SelectOne()
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}


		/// <summary>
		/// Purpose: Implements the ICommonDBAccess.SelectAll() method.
		/// </summary>
		public virtual DataTable SelectAll()
		{
			// No implementation, throw exception
			throw new NotImplementedException();
		}


		#region Class Property Declarations
		public ConnectionProvider MainConnectionProvider
		{
			set
			{
				if(value==null)
				{
					// Invalid value
					throw new ArgumentNullException("MainConnectionProvider", "Null passed as value to this property which is not allowed.");
				}

				// A connection provider object is passed to this class.
				// Retrieve the SqlConnection object, if present and create a
				// reference to it. If there is already a MainConnection object
				// referenced by the membervar, destroy that one or simply 
				// remove the reference, based on the flag.
				if(_mainConnection!=null)
				{
					// First get rid of current connection object. Caller is responsible
					if(_mainConnectionIsCreatedLocal)
					{
						// Is local created object, close it and dispose it.
						_mainConnection.Close();
						_mainConnection.Dispose();
					}
					// Remove reference.
					_mainConnection = null;
				}
				_mainConnectionProvider = (ConnectionProvider)value;
				_mainConnection = _mainConnectionProvider.DBConnection;
				_mainConnectionIsCreatedLocal = false;
			}
		}


		public SqlInt32 ErrorCode
		{
			get
			{
				return _errorCode;
			}
		}


		public int RowsAffected
		{
			get
			{
				return _rowsAffected;
			}
		}
		#endregion

		#region PickHui
		
		public bool MainConnactionIsCreatedLocal
		{
			set { _mainConnectionIsCreatedLocal = value; }
			get { return _mainConnectionIsCreatedLocal; }
		}

		public DataTable FillSchema(string cmdText)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = cmdText;
			DataTable toReturn = new DataTable();
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.FillSchema(toReturn, SchemaType.Mapped);
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable LoadData(string cmdText)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = cmdText;
			DataTable toReturn = new DataTable();
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable LoadData(string cmdText, string[] paramNames, object[] paramValues)
		{
			SqlCommand cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = cmdText;
			
			for (int i = 0; i < paramNames.Length; i++)
				cmdToExecute.Parameters.AddWithValue(paramNames[i], paramValues[i]);

			DataTable toReturn = new DataTable();
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				return toReturn;
			 
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Load Data::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public DataTable LoadData(string cmdType, string cmdText, string[] paramNames, object[] paramValues)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = cmdText;
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            for (int i = 0; i < paramNames.Length; i++)
                cmdToExecute.Parameters.AddWithValue(paramNames[i], paramValues[i]);

            DataTable toReturn = new DataTable();
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                return toReturn;

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Load Data::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		protected void SaveData(DataTable table, string cmdText)
		{
			SqlCommand cmd = new SqlCommand();
			// Use base class' connection object
			cmd.Connection = _mainConnection;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmd.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}
				
				SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(cmd);
				SqlCommandBuilder cmdBuilder = new SqlCommandBuilder(sqlDataAdapter);
				cmd.CommandText = cmdText;
				sqlDataAdapter.Update(table);

				//return true;
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmd.Dispose();
			}
		}

		protected void UpdatePrimaryKey(DataTable table, string cmdText, 
			string newPrimaryKeyName, object newPrimaryKeyValue,
			string originalPrimaryKeyName, object originalPrimaryKeyValue, 
			string [] paramNames, object[] paramValues)
		{
			SqlCommand updateCmd = new SqlCommand();
			// Use base class' connection object
			updateCmd.Connection = _mainConnection;
			updateCmd.CommandText = cmdText;

			for (int i = 0; i < paramNames.Length; i++)
				updateCmd.Parameters.AddWithValue(paramNames[i], paramValues[i]);
			
			updateCmd.Parameters.AddWithValue(newPrimaryKeyName, newPrimaryKeyValue);

			updateCmd.Parameters.AddWithValue(originalPrimaryKeyName, originalPrimaryKeyValue);

			updateCmd.Parameters[originalPrimaryKeyName].SourceVersion = 
				DataRowVersion.Original;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						updateCmd.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}
				
				SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(updateCmd);
				sqlDataAdapter.UpdateCommand = updateCmd;
				sqlDataAdapter.Update(table);

				//return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Save::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				updateCmd.Dispose();
			}
		}
		
		public object ExecuteScalar(string cmdText, string[] paramNames, object[] paramValues)
		{
			SqlCommand cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = cmdText;
			
			for (int i = 0; i < paramNames.Length; i++)
                cmdToExecute.Parameters.AddWithValue(paramNames[i], paramValues[i]);

			cmdToExecute.Connection = _mainConnection;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				return cmdToExecute.ExecuteScalar();
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception(ex.Message);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public object ExecuteScalarStoreProc(string cmdText, string[] paramNames, object[] paramValues)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            cmdToExecute.CommandText = cmdText;

            for (int i = 0; i < paramNames.Length; i++)
                cmdToExecute.Parameters.AddWithValue(paramNames[i], paramValues[i]);

            cmdToExecute.Connection = _mainConnection;

            try
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                return cmdToExecute.ExecuteScalar();
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception(ex.Message);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }

		public int ExecuteNonQuery(string cmdText)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = cmdText;
			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				return cmdToExecute.ExecuteNonQuery();
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}
		#endregion
	}
}

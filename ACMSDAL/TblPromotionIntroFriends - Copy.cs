///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'TblPromotionIntroFriends'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:09
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblMemberPackage'.
	/// </summary>
	public class TblPromotionIntroFriends : DBInteractionBase
	{
		#region Class Member Declarations

        private SqlDateTime _dtExpiredDate, _dtCreateDate;
        private SqlDouble _dRewardsPoints;
        private SqlInt32 _nEmployeeID,  _nTransactionID, _strStaffID;
        private SqlString _strMembershipID, _strSerialNo,
           _strFriendID1, _strFriendID2, _strFriendID3, _strFriendID4, _strFriendID5,
           _strFriendID6, _strFriendID7, _strFriendID8, _strFriendID9, _strFriendID10,
        _strFriendName,_strFreebieCode;
        private SqlBoolean _fIssued;



		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
            public TblPromotionIntroFriends()
		{
			// Nothing for now.
		}


            public override bool Insert()
            {
                SqlCommand cmdToExecute = new SqlCommand();
                cmdToExecute.CommandText = "dbo.[sp_tblPromotionIntroFriends_Insert]";
                cmdToExecute.CommandType = CommandType.StoredProcedure;

                // Use base class' connection object
                cmdToExecute.Connection = _mainConnection;

                try
                {
      
                    cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strSerialNo", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strSerialNo));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID01", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID1));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID02", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID2));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID03", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID3));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID04", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID4));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID05", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID5));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID06", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID6));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID07", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID7));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID08", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID8));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID09", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID9));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID10", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID10));
                  
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFreebieCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFreebieCode));
                    cmdToExecute.Parameters.Add(new SqlParameter("@fIssued", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fIssued));
                    cmdToExecute.Parameters.Add(new SqlParameter("@strStaffID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _strStaffID));
                    cmdToExecute.Parameters.Add(new SqlParameter("@dtCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtCreateDate));
                    cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                    if (_mainConnectionIsCreatedLocal)
                    {
                        // Open connection.
                        _mainConnection.Open();
                    }
                    else
                    {
                        if (_mainConnectionProvider.IsTransactionPending)
                        {
                            cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                        }
                    }

                    // Execute query.
                    _rowsAffected = cmdToExecute.ExecuteNonQuery();
                    _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                    if (_errorCode != (int)LLBLError.AllOk)
                    {
                        // Throw error.
                        throw new Exception("Stored Procedure 'sp_tblPromotionIntroFriends_Insert' reported the ErrorCode: " + _errorCode);
                    }

                    return true;
                }
                catch (Exception ex)
                {
                    // some error occured. Bubble it to caller and encapsulate Exception object
                    throw new Exception("TblPromotionIntroFriends::Insert::Error occured.", ex);
                }
                finally
                {
                    if (_mainConnectionIsCreatedLocal)
                    {
                        // Close connection.
                        _mainConnection.Close();
                    }
                    cmdToExecute.Dispose();
                }
            }

            public bool CheckFriendExist(string strFriendID)
            {
                SqlCommand cmdToExecute = new SqlCommand();
                cmdToExecute.CommandText = "dbo.[sp_tblPromotionIntroFriends_CheckExist]";
                cmdToExecute.CommandType = CommandType.StoredProcedure;
                DataTable toReturn = new DataTable("tblPromotionIntroFriends");
                SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

                // Use base class' connection object
                cmdToExecute.Connection = _mainConnection;

                try
                {
                    cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strFriendID));
                    cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                    if (_mainConnectionIsCreatedLocal)
                    {
                        // Open connection.
                        _mainConnection.Open();
                    }
                    else
                    {
                        if (_mainConnectionProvider.IsTransactionPending)
                        {
                            cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                        }
                    }

                    // Execute query.
                    adapter.Fill(toReturn);
                    _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                    if (_errorCode != (int)LLBLError.AllOk)
                    {
                        // Throw error.
                        throw new Exception("Stored Procedure 'sp_tblPromotionIntroFriends_SelectAll' reported the ErrorCode: " + _errorCode);
                    }

                    return (toReturn.Rows.Count>0);
                }
                catch (Exception ex)
                {
                    throw new Exception("tblPromotionIntroFriends::sp_tblPromotionIntroFriends_SelectAll::Error occured.", ex);
                }
                finally
                {
                    if (_mainConnectionIsCreatedLocal)
                    {
                        // Close connection.
                        _mainConnection.Close();
                    }
                    cmdToExecute.Dispose();
                    adapter.Dispose();
                }
            }

            
            //public DataTable GetAllClassAttendancesBasePackageID(int nPackageID, string membershipID, string strBranchCode)
            //{
            //    string cmdText = "Select A.*, F.strMemberName, B.strClassCode, C.strDescription, " +
            //        " D.strEmployeeName as strMarkAttendanceEmployeeName, E.strEmployeeName as strReservationEmployeeName, " +
            //        " G.strPackageCode " +
            //        " From tblClassAttendance A " +
            //        " Inner Join tblClassInstance B on A.nClassInstanceID = B.nClassInstanceID " +
            //        " Inner Join tblClass C on C.strClassCode = B.strClassCode " +
            //        " left Outer Join tblEmployee D on A.nEmployeeID = D.nEmployeeID " +
            //        " left Outer Join tblEmployee E on A.nReservedByID = E.nEmployeeID " +
            //        " left Outer Join tblMember F on A.strMembershipID = F.strMembershipID " +
            //        " left Outer Join tblMemberPackage G on A.nPackageID =  G.nPackageID " +
            //        " Where A.nPackageID = @nPackageID and A.strMemberShipID = @strMemberShipID"; // and A.strBranchCode = @strBranchCode ";

            //    DataTable table = base.LoadData(cmdText, new string[] { "@nPackageID", "@strMemberShipID", "@strBranchCode" }, new object[] { nPackageID, membershipID, strBranchCode });
            //    return table;
            //}

            public DataTable SelectAllPromotionIntroFriends(string membershipID)
            {
                SqlCommand cmdToExecute = new SqlCommand();
                cmdToExecute.CommandText = "dbo.[sp_tblPromotionIntroFriends_SelectAll]";
                cmdToExecute.CommandType = CommandType.StoredProcedure;
                DataTable toReturn = new DataTable("tblPromotionIntroFriends");
                SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

                // Use base class' connection object
                cmdToExecute.Connection = _mainConnection;

                try
                {
                    cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, membershipID));
                    cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

                    if (_mainConnectionIsCreatedLocal)
                    {
                        // Open connection.
                        _mainConnection.Open();
                    }
                    else
                    {
                        if (_mainConnectionProvider.IsTransactionPending)
                        {
                            cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                        }
                    }

                    // Execute query.
                    adapter.Fill(toReturn);
                    _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                    if (_errorCode != (int)LLBLError.AllOk)
                    {
                        // Throw error.
                        throw new Exception("Stored Procedure 'sp_tblPromotionIntroFriends_SelectAll' reported the ErrorCode: " + _errorCode);
                    }

                    return toReturn;
                }
                catch (Exception ex)
                {
                    throw new Exception("tblPromotionIntroFriends::sp_tblPromotionIntroFriends_SelectAll::Error occured.", ex);
                }
                finally
                {
                    if (_mainConnectionIsCreatedLocal)
                    {
                        // Close connection.
                        _mainConnection.Close();
                    }
                    cmdToExecute.Dispose();
                    adapter.Dispose();
                }
            }


        //public override bool Insert()//0705
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblPromotionIntroFriends_Insert]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@strSerialNo", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strSerialNo));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@strFriendID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFriendID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@strFreebieCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strFreebieCode));


        //        cmdToExecute.Parameters.Add(new SqlParameter("@dtExpiredDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtExpiredDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@strStaffID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strStaffID));

        //        cmdToExecute.Parameters.Add(new SqlParameter("@dtCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtCreateDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inTransactionID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nTransactionID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _nTransactionID = (SqlInt32)cmdToExecute.Parameters["@inTransactionID"].Value;
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblPromotionIntroFriends_Insert' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }

        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblPromotionIntroFriends::Insert::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        //public void InsertMemberPackageConvertion(int nPackageID, decimal mAmount)
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackageConvertion_Insert]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {

        //        cmdToExecute.Parameters.Add(new SqlParameter("@nPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@mAmount", SqlDbType.Decimal, 8, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, decimal.Parse(mAmount.ToString("0.00"))));
              

        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
             
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::Insert::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}

        ///// <summary>
        ///// Purpose: Update method. This method will Update one existing row in the database.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NPackageID</LI>
        /////		 <LI>StrMembershipID</LI>
        /////		 <LI>StrPackageCode</LI>
        /////		 <LI>DtPurchaseDate. May be SqlDateTime.Null</LI>
        /////		 <LI>DtStartDate. May be SqlDateTime.Null</LI>
        /////		 <LI>DtExpiryDate. May be SqlDateTime.Null</LI>
        /////		 <LI>DtWarrantyDate. May be SqlDateTime.Null</LI>
        /////		 <LI>FFree. May be SqlBoolean.Null</LI>
        /////		 <LI>StrReceiptNo. May be SqlString.Null</LI>
        /////		 <LI>NStatusID. May be SqlInt32.Null</LI>
        /////		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
        /////		 <LI>NEmployeeID</LI>
        /////		 <LI>DtLastEdit. May be SqlDateTime.Null</LI>
        /////		 <LI>StrRemarks. May be SqlString.Null</LI>
        /////		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
        /////		 <LI>MCreditPackageUsagePrice. May be SqlMoney.Null</LI>
        /////		 <LI>NTempPackageID. May be SqlInt32.Null</LI>
        /////		 <LI>StrTempPackageCategory. May be SqlString.Null</LI>
        /////		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
        /////		 <LI>StrVoucherNumber. May be SqlString.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public override bool Update()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Update]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtPurchaseDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtPurchaseDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtStartDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtStartDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtExpiryDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtExpiryDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtWarrantyDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtWarrantyDate));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@bfFree", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFree));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptNo));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatusID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@dadtLastEdit", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtLastEdit));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@curmCreditPackageUsagePrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCreditPackageUsagePrice));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inTempPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nTempPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrTempPackageCategory", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strTempPackageCategory));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrVoucherNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strVoucherNumber));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@nBalance", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed,_nBalance));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_Update' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::Update::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Update method for updating one or more rows using the Foreign Key 'strMembershipID.
        ///// This method will Update one or more existing rows in the database. It will reset the field 'strMembershipID' in
        ///// all rows which have as value for this field the value as set in property 'StrMembershipIDOld' to 
        ///// the value as set in property 'StrMembershipID'.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>StrMembershipID</LI>
        /////		 <LI>StrMembershipIDOld</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool UpdateAllWstrMembershipIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWstrMembershipIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipIDOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipIDOld));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWstrMembershipIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Update method for updating one or more rows using the Foreign Key 'strPackageCode.
        ///// This method will Update one or more existing rows in the database. It will reset the field 'strPackageCode' in
        ///// all rows which have as value for this field the value as set in property 'StrPackageCodeOld' to 
        ///// the value as set in property 'StrPackageCode'.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>StrPackageCode</LI>
        /////		 <LI>StrPackageCodeOld</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool UpdateAllWstrPackageCodeLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWstrPackageCodeLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCodeOld", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCodeOld));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWstrPackageCodeLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWstrPackageCodeLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}

        //public void UpdatePackageStatus()
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateStatus]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@nStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nStatusID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@mTotalPaid", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mTotalPaid));
			
               
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
              
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWstrPackageCodeLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}

        //public void UpdateConvertedPackageStatus()
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackageConvertion_UpdateStatus]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@nStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nStatusID));

        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();

        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWstrPackageCodeLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}
        ///// <summary>
        ///// Purpose: Update method for updating one or more rows using the Foreign Key 'nGIRORefID.
        ///// This method will Update one or more existing rows in the database. It will reset the field 'nGIRORefID' in
        ///// all rows which have as value for this field the value as set in property 'NGIRORefIDOld' to 
        ///// the value as set in property 'NGIRORefID'.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
        /////		 <LI>NGIRORefIDOld. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool UpdateAllWnGIRORefIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnGIRORefIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefIDOld));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnGIRORefIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWnGIRORefIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Update method for updating one or more rows using the Foreign Key 'nEmployeeID.
        ///// This method will Update one or more existing rows in the database. It will reset the field 'nEmployeeID' in
        ///// all rows which have as value for this field the value as set in property 'NEmployeeIDOld' to 
        ///// the value as set in property 'NEmployeeID'.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NEmployeeID</LI>
        /////		 <LI>NEmployeeIDOld</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool UpdateAllWnEmployeeIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnEmployeeIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeIDOld));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWnEmployeeIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Update method for updating one or more rows using the Foreign Key 'nCreditPackageID.
        ///// This method will Update one or more existing rows in the database. It will reset the field 'nCreditPackageID' in
        ///// all rows which have as value for this field the value as set in property 'NCreditPackageIDOld' to 
        ///// the value as set in property 'NCreditPackageID'.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
        /////		 <LI>NCreditPackageIDOld. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool UpdateAllWnCreditPackageIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnCreditPackageIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageIDOld));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnCreditPackageIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWnCreditPackageIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Update method for updating one or more rows using the Foreign Key 'nVoucherTypeID.
        ///// This method will Update one or more existing rows in the database. It will reset the field 'nVoucherTypeID' in
        ///// all rows which have as value for this field the value as set in property 'NVoucherTypeIDOld' to 
        ///// the value as set in property 'NVoucherTypeID'.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
        /////		 <LI>NVoucherTypeIDOld. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool UpdateAllWnVoucherTypeIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_UpdateAllWnVoucherTypeIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeIDOld));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_UpdateAllWnVoucherTypeIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::UpdateAllWnVoucherTypeIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
        ///// </summary>
        ///// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NPackageID</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public override bool Delete()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_Delete]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_Delete' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::Delete::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strMembershipID'
        ///// </summary>
        ///// <returns>True if succeeded, false otherwise. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>StrMembershipID</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool DeleteAllWstrMembershipIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWstrMembershipIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::DeleteAllWstrMembershipIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strPackageCode'
        ///// </summary>
        ///// <returns>True if succeeded, false otherwise. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>StrPackageCode</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool DeleteAllWstrPackageCodeLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWstrPackageCodeLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWstrPackageCodeLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::DeleteAllWstrPackageCodeLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nGIRORefID'
        ///// </summary>
        ///// <returns>True if succeeded, false otherwise. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool DeleteAllWnGIRORefIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnGIRORefIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnGIRORefIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::DeleteAllWnGIRORefIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nEmployeeID'
        ///// </summary>
        ///// <returns>True if succeeded, false otherwise. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NEmployeeID</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool DeleteAllWnEmployeeIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnEmployeeIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::DeleteAllWnEmployeeIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nCreditPackageID'
        ///// </summary>
        ///// <returns>True if succeeded, false otherwise. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool DeleteAllWnCreditPackageIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnCreditPackageIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnCreditPackageIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::DeleteAllWnCreditPackageIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nVoucherTypeID'
        ///// </summary>
        ///// <returns>True if succeeded, false otherwise. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public bool DeleteAllWnVoucherTypeIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_DeleteAllWnVoucherTypeIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        _rowsAffected = cmdToExecute.ExecuteNonQuery();
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_DeleteAllWnVoucherTypeIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return true;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::DeleteAllWnVoucherTypeIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NPackageID</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        /////		 <LI>NPackageID</LI>
        /////		 <LI>StrMembershipID</LI>
        /////		 <LI>StrPackageCode</LI>
        /////		 <LI>DtPurchaseDate</LI>
        /////		 <LI>DtStartDate</LI>
        /////		 <LI>DtExpiryDate</LI>
        /////		 <LI>DtWarrantyDate</LI>
        /////		 <LI>FFree</LI>
        /////		 <LI>StrReceiptNo</LI>
        /////		 <LI>NStatusID</LI>
        /////		 <LI>NGIRORefID</LI>
        /////		 <LI>NEmployeeID</LI>
        /////		 <LI>DtLastEdit</LI>
        /////		 <LI>StrRemarks</LI>
        /////		 <LI>NCreditPackageID</LI>
        /////		 <LI>MCreditPackageUsagePrice</LI>
        /////		 <LI>NTempPackageID</LI>
        /////		 <LI>StrTempPackageCategory</LI>
        /////		 <LI>NVoucherTypeID</LI>
        /////		 <LI>StrVoucherNumber</LI>
        ///// </UL>
        ///// Will fill all properties corresponding with a field in the table with the value of the row selected.
        ///// </remarks>
        //public override DataTable SelectOne()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectOne]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectOne' reported the ErrorCode: " + _errorCode);
        //        }

        //        if(toReturn.Rows.Count > 0)
        //        {
        //            _nPackageID = (Int32)toReturn.Rows[0]["nPackageID"];
        //            _strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
        //            _strPackageCode = (string)toReturn.Rows[0]["strPackageCode"];
        //            _dtPurchaseDate = toReturn.Rows[0]["dtPurchaseDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtPurchaseDate"];
        //            _dtStartDate = toReturn.Rows[0]["dtStartDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartDate"];
        //            _dtExpiryDate = toReturn.Rows[0]["dtExpiryDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtExpiryDate"];
        //            _dtWarrantyDate = toReturn.Rows[0]["dtWarrantyDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtWarrantyDate"];
        //            _fFree = toReturn.Rows[0]["fFree"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fFree"];
        //            _strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
        //            _nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatusID"];
        //            _nGIRORefID = toReturn.Rows[0]["nGIRORefID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nGIRORefID"];
        //            _nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
        //            _dtLastEdit = toReturn.Rows[0]["dtLastEdit"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtLastEdit"];
        //            _strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
        //            _nCreditPackageID = toReturn.Rows[0]["nCreditPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nCreditPackageID"];
        //            _mCreditPackageUsagePrice = toReturn.Rows[0]["mCreditPackageUsagePrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCreditPackageUsagePrice"];
        //            _nTempPackageID = toReturn.Rows[0]["nTempPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nTempPackageID"];
        //            _strTempPackageCategory = toReturn.Rows[0]["strTempPackageCategory"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strTempPackageCategory"];
        //            _nVoucherTypeID = toReturn.Rows[0]["nVoucherTypeID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nVoucherTypeID"];
        //            _strVoucherNumber = toReturn.Rows[0]["strVoucherNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strVoucherNumber"];
        //            _nBalance = toReturn.Rows[0]["nBalance"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nBalance"];
				
        //        }
        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectOne::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}

        //public  DataTable SelectOneReceipt()
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectOne_Receipt]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@strReceiptNo", SqlDbType.VarChar, 20, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _strReceiptNo));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if (_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectOne' reported the ErrorCode: " + _errorCode);
        //        }

        //        if (toReturn.Rows.Count > 0)
        //        {
        //            _nPackageID = (Int32)toReturn.Rows[0]["nPackageID"];                  
        //            _strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
        //            _mTotalPaid = toReturn.Rows[0]["mTotalPaidAmt"] == System.DBNull.Value ? 0 : (Decimal)toReturn.Rows[0]["mTotalPaidAmt"];                   
        //        }
        //        return toReturn;
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectOne::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}

        //public DataTable SelectFreePackage()
        //{
        //    SqlCommand cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectFreePackage]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if (_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if (_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectOne' reported the ErrorCode: " + _errorCode);
        //        }

        //        if (toReturn.Rows.Count > 0)
        //        {
        //            _nPackageID = (Int32)toReturn.Rows[0]["nPackageID"];
        //            _strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
        //            _strPackageCode = (string)toReturn.Rows[0]["strPackageCode"];
        //            _dtPurchaseDate = toReturn.Rows[0]["dtPurchaseDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtPurchaseDate"];
        //            _dtStartDate = toReturn.Rows[0]["dtStartDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtStartDate"];
        //            _dtExpiryDate = toReturn.Rows[0]["dtExpiryDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtExpiryDate"];
        //            _dtWarrantyDate = toReturn.Rows[0]["dtWarrantyDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtWarrantyDate"];
        //            _fFree = toReturn.Rows[0]["fFree"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fFree"];
        //            _strReceiptNo = toReturn.Rows[0]["strReceiptNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptNo"];
        //            _nStatusID = toReturn.Rows[0]["nStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatusID"];
        //            _nGIRORefID = toReturn.Rows[0]["nGIRORefID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nGIRORefID"];
        //            _nEmployeeID = (Int32)toReturn.Rows[0]["nEmployeeID"];
        //            _dtLastEdit = toReturn.Rows[0]["dtLastEdit"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtLastEdit"];
        //            _strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
        //            _nCreditPackageID = toReturn.Rows[0]["nCreditPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nCreditPackageID"];
        //            _mCreditPackageUsagePrice = toReturn.Rows[0]["mCreditPackageUsagePrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCreditPackageUsagePrice"];                 
        //            _nTempPackageID = toReturn.Rows[0]["nTempPackageID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nTempPackageID"];
        //            _strTempPackageCategory = toReturn.Rows[0]["strTempPackageCategory"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strTempPackageCategory"];
        //            _nVoucherTypeID = toReturn.Rows[0]["nVoucherTypeID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nVoucherTypeID"];
        //            _strVoucherNumber = toReturn.Rows[0]["strVoucherNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strVoucherNumber"];
        //            _nBalance = toReturn.Rows[0]["nBalance"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nBalance"];

        //        }
        //        return toReturn;
        //    }
        //    catch (Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectOne::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if (_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}
     
        ///// <summary>
        ///// Purpose: SelectAll method. This method will Select all rows from the table.
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public override DataTable SelectAll()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAll]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAll' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAll::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strMembershipID'
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>StrMembershipID</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public DataTable SelectAllWstrMembershipIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWstrMembershipIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWstrMembershipIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAllWstrMembershipIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strPackageCode'
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>StrPackageCode</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public DataTable SelectAllWstrPackageCodeLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWstrPackageCodeLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWstrPackageCodeLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAllWstrPackageCodeLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nGIRORefID'
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NGIRORefID. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public DataTable SelectAllWnGIRORefIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnGIRORefIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inGIRORefID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nGIRORefID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnGIRORefIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAllWnGIRORefIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nEmployeeID'
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NEmployeeID</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public DataTable SelectAllWnEmployeeIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnEmployeeIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnEmployeeIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAllWnEmployeeIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nCreditPackageID'
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NCreditPackageID. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public DataTable SelectAllWnCreditPackageIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnCreditPackageIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCreditPackageID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnCreditPackageIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAllWnCreditPackageIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


        ///// <summary>
        ///// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nVoucherTypeID'
        ///// </summary>
        ///// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        ///// <remarks>
        ///// Properties needed for this method: 
        ///// <UL>
        /////		 <LI>NVoucherTypeID. May be SqlInt32.Null</LI>
        ///// </UL>
        ///// Properties set after a succesful call of this method: 
        ///// <UL>
        /////		 <LI>ErrorCode</LI>
        ///// </UL>
        ///// </remarks>
        //public DataTable SelectAllWnVoucherTypeIDLogic()
        //{
        //    SqlCommand	cmdToExecute = new SqlCommand();
        //    cmdToExecute.CommandText = "dbo.[sp_tblMemberPackage_SelectAllWnVoucherTypeIDLogic]";
        //    cmdToExecute.CommandType = CommandType.StoredProcedure;
        //    DataTable toReturn = new DataTable("tblMemberPackage");
        //    SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

        //    // Use base class' connection object
        //    cmdToExecute.Connection = _mainConnection;

        //    try
        //    {
        //        cmdToExecute.Parameters.Add(new SqlParameter("@inVoucherTypeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nVoucherTypeID));
        //        cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Open connection.
        //            _mainConnection.Open();
        //        }
        //        else
        //        {
        //            if(_mainConnectionProvider.IsTransactionPending)
        //            {
        //                cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
        //            }
        //        }

        //        // Execute query.
        //        adapter.Fill(toReturn);
        //        _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

        //        if(_errorCode != (int)LLBLError.AllOk)
        //        {
        //            // Throw error.
        //            throw new Exception("Stored Procedure 'sp_tblMemberPackage_SelectAllWnVoucherTypeIDLogic' reported the ErrorCode: " + _errorCode);
        //        }

        //        return toReturn;
        //    }
        //    catch(Exception ex)
        //    {
        //        // some error occured. Bubble it to caller and encapsulate Exception object
        //        throw new Exception("TblMemberPackage::SelectAllWnVoucherTypeIDLogic::Error occured.", ex);
        //    }
        //    finally
        //    {
        //        if(_mainConnectionIsCreatedLocal)
        //        {
        //            // Close connection.
        //            _mainConnection.Close();
        //        }
        //        cmdToExecute.Dispose();
        //        adapter.Dispose();
        //    }
        //}


		#region Class Property Declarations
        //public SqlInt32 NPackageID
        //{
        //    get
        //    {
        //        return _nPackageID;
        //    }
        //    set
        //    {
        //        SqlInt32 nPackageIDTmp = (SqlInt32)value;
        //        if(nPackageIDTmp.IsNull)
        //        {
        //            throw new ArgumentOutOfRangeException("NPackageID", "NPackageID can't be NULL");
        //        }
        //        _nPackageID = value;
        //    }
        //}


		public SqlString StrMembershipID
		{
			get
			{
				return _strMembershipID;
			}
			set
			{
				SqlString strMembershipIDTmp = (SqlString)value;
				if(strMembershipIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrMembershipID", "StrMembershipID can't be NULL");
				}
				_strMembershipID = value;
			}
		}

        public SqlBoolean FIssued
        {
            get
            {
                return _fIssued;
            }
            set
            {
                _fIssued = value;
            }
        }
        
        public SqlString StrFreebieCode
        {
            get
            {
                return _strFreebieCode;
            }
            set
            {
                _strFreebieCode = value;
            }
        }


        public SqlString strSerialNo
        {
            get
            {
                return _strSerialNo;
            }
            set
            {
                _strSerialNo = value;
            }
        }

        //public SqlString strStaffID
        //{
        //    get
        //    {
        //        return _strStaffID;
        //    }
        //    set
        //    {
        //        _strStaffID = value;
        //    }
        //}


        public SqlInt32 strStaffID
        {
            get
            {
                return _strStaffID;
            }
            set
            {
                _strStaffID = value;
            }
        }

        public SqlString strFriendID1
        {
            get
            {
                return _strFriendID1;
            }
            set
            {
                _strFriendID1 = value;
            }
        }

        public SqlString strFriendID2
        {
            get
            {
                return _strFriendID2;
            }
            set
            {
                _strFriendID2 = value;
            }
        }

        public SqlString strFriendID3
        {
            get
            {
                return _strFriendID3;
            }
            set
            {
                _strFriendID3 = value;
            }
        }

        public SqlString strFriendID4
        {
            get
            {
                return _strFriendID4;
            }
            set
            {
                _strFriendID4 = value;
            }
        }

        public SqlString strFriendID5
        {
            get
            {
                return _strFriendID5;
            }
            set
            {
                _strFriendID5 = value;
            }
        }

        public SqlString strFriendID6
        {
            get
            {
                return _strFriendID6;
            }
            set
            {
                _strFriendID6 = value;
            }
        }

        public SqlString strFriendID7
        {
            get
            {
                return _strFriendID7;
            }
            set
            {
                _strFriendID7 = value;
            }
        }

        public SqlString strFriendID8
        {
            get
            {
                return _strFriendID8;
            }
            set
            {
                _strFriendID8 = value;
            }
        }

        public SqlString strFriendID9
        {
            get
            {
                return _strFriendID9;
            }
            set
            {
                _strFriendID9 = value;
            }
        }

        public SqlString strFriendID10
        {
            get
            {
                return _strFriendID10;
            }
            set
            {
                _strFriendID10 = value;
            }
        }
        public SqlString strFriendName
        {
            get
            {
                return _strFriendName;
            }
            set
            {
                _strFriendName = value;
            }
        }

        public SqlDateTime DtExpiredDate
        {
            get
            {
                return _dtExpiredDate;
            }
            set
            {
                _dtExpiredDate = value;
            }
        }

        public SqlDateTime DtCreateDate
        {
            get
            {
                return _dtCreateDate;
            }
            set
            {
                _dtCreateDate = value;
            }
        }



        #endregion


        #endregion
    }
}

///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblPackage'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:10
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblPackage'.
	/// </summary>
	public class TblPackage : DBInteractionBase
	{
		#region Class Member Declarations
            private SqlBoolean      _fCanUpgradeFrom, _fCanUpgradeTo, _fStudentPackage, _fPeak, _fGIRO;
			private SqlDateTime		_dtValidStart, _dtValidEnd;
            private SqlInt32        _nFreeDuration, _nFreeSession, _nPackageID, _nValidMonths, _nCategoryID, _nCategoryIDOld, _nStatus, _nWarrantyMonths, _nMaxSession, _nPackageDuration, _fNoRestrictionUpgrade, _nPackageDay;
            private SqlMoney        _mBaseUnitPrice, _mListPrice, _mListPriceWGST;
			private SqlString		_strFreeDurationUnit, _strDurationUnit, _strPackageCode, _strReceiptDesc, _strDescription;
		#endregion
 
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblPackage()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		///		 <LI>StrDescription. May be SqlString.Null</LI>
		///		 <LI>StrReceiptDesc. May be SqlString.Null</LI>
		///		 <LI>MListPrice. May be SqlMoney.Null</LI>
		///		 <LI>NMaxSession. May be SqlInt32.Null</LI>
		///		 <LI>NPackageDuration. May be SqlInt32.Null</LI>
		///		 <LI>MBaseUnitPrice. May be SqlMoney.Null</LI>
		///		 <LI>DtValidStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtValidEnd. May be SqlDateTime.Null</LI>
		///		 <LI>FPeak. May be SqlBoolean.Null</LI>
		///		 <LI>FStudentPackage. May be SqlBoolean.Null</LI>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NValidMonths. May be SqlInt32.Null</LI>
		///		 <LI>NWarrantyMonths. May be SqlInt32.Null</LI>
		///		 <LI>FGIRO. May be SqlBoolean.Null</LI>
		///		 <LI>FNoRestrictionUpgrade. May be SqlBoolean.Null</LI>
		///		 <LI>NStatus. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrDescription", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strDescription));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptDesc", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptDesc));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmListPrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mListPrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMaxSession", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMaxSession));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPackageDuration", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPackageDuration));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmBaseUnitPrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mBaseUnitPrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPeak", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPeak));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfStudentPackage", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fStudentPackage));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inValidMonths", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nValidMonths));
				cmdToExecute.Parameters.Add(new SqlParameter("@inWarrantyMonths", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nWarrantyMonths));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfGIRO", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fGIRO));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfNoRestrictionUpgrade", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _fNoRestrictionUpgrade));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatus", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatus));                
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));                

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				//_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		///		 <LI>StrDescription. May be SqlString.Null</LI>
		///		 <LI>StrReceiptDesc. May be SqlString.Null</LI>
		///		 <LI>MListPrice. May be SqlMoney.Null</LI>
		///		 <LI>NMaxSession. May be SqlInt32.Null</LI>
		///		 <LI>NPackageDuration. May be SqlInt32.Null</LI>
		///		 <LI>MBaseUnitPrice. May be SqlMoney.Null</LI>
		///		 <LI>DtValidStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtValidEnd. May be SqlDateTime.Null</LI>
		///		 <LI>FPeak. May be SqlBoolean.Null</LI>
		///		 <LI>FStudentPackage. May be SqlBoolean.Null</LI>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NValidMonths. May be SqlInt32.Null</LI>
		///		 <LI>NWarrantyMonths. May be SqlInt32.Null</LI>
		///		 <LI>FGIRO. May be SqlBoolean.Null</LI>
		///		 <LI>FNoRestrictionUpgrade. May be SqlBoolean.Null</LI>
		///		 <LI>NStatus. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrDescription", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strDescription));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptDesc", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptDesc));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmListPrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mListPrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMaxSession", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMaxSession));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPackageDuration", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPackageDuration));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmBaseUnitPrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mBaseUnitPrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPeak", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPeak));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfStudentPackage", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fStudentPackage));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inValidMonths", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nValidMonths));
				cmdToExecute.Parameters.Add(new SqlParameter("@inWarrantyMonths", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nWarrantyMonths));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfGIRO", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fGIRO));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfNoRestrictionUpgrade", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fNoRestrictionUpgrade));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatus", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatus));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nCategoryID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nCategoryID' in
		/// all rows which have as value for this field the value as set in property 'NCategoryIDOld' to 
		/// the value as set in property 'NCategoryID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NCategoryIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnCategoryIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_UpdateAllWnCategoryIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_UpdateAllWnCategoryIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::UpdateAllWnCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nCategoryID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCategoryID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnCategoryIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_DeleteAllWnCategoryIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_DeleteAllWnCategoryIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::DeleteAllWnCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>StrPackageCode</LI>
		///		 <LI>StrDescription</LI>
		///		 <LI>StrReceiptDesc</LI>
		///		 <LI>MListPrice</LI>
		///		 <LI>NMaxSession</LI>
		///		 <LI>NPackageDuration</LI>
		///		 <LI>MBaseUnitPrice</LI>
		///		 <LI>DtValidStart</LI>
		///		 <LI>DtValidEnd</LI>
		///		 <LI>FPeak</LI>
		///		 <LI>FStudentPackage</LI>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NValidMonths</LI>
		///		 <LI>NWarrantyMonths</LI>
		///		 <LI>FGIRO</LI>
		///		 <LI>FNoRestrictionUpgrade</LI>
		///		 <LI>NStatus</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				//_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strPackageCode = (string)toReturn.Rows[0]["strPackageCode"];
					_strDescription = toReturn.Rows[0]["strDescription"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strDescription"];
					_strReceiptDesc = toReturn.Rows[0]["strReceiptDesc"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptDesc"];
					_mListPrice = toReturn.Rows[0]["mListPrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mListPrice"];
					_nMaxSession = toReturn.Rows[0]["nMaxSession"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMaxSession"];
					_nPackageDuration = toReturn.Rows[0]["nPackageDuration"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPackageDuration"];
					_mBaseUnitPrice = toReturn.Rows[0]["mBaseUnitPrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mBaseUnitPrice"];
					_dtValidStart = toReturn.Rows[0]["dtValidStart"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtValidStart"];
					_dtValidEnd = toReturn.Rows[0]["dtValidEnd"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtValidEnd"];
					_fPeak = toReturn.Rows[0]["fPeak"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fPeak"];
					_fStudentPackage = toReturn.Rows[0]["fStudentPackage"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fStudentPackage"];
					_nCategoryID = (Int32)toReturn.Rows[0]["nCategoryID"];
					_nValidMonths = toReturn.Rows[0]["nValidMonths"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nValidMonths"];
					_nWarrantyMonths = toReturn.Rows[0]["nWarrantyMonths"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nWarrantyMonths"];
					_fGIRO = toReturn.Rows[0]["fGIRO"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fGIRO"];
					_fNoRestrictionUpgrade = toReturn.Rows[0]["fNoRestrictionUpgrade"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["fNoRestrictionUpgrade"];
					_nStatus = toReturn.Rows[0]["nStatus"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatus"];
                    _nPackageDay = toReturn.Rows[0]["nPackageDay"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPackageDay"];
                    _nFreeSession = toReturn.Rows[0]["nFreeSession"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFreeSession"];
                    _strDurationUnit = toReturn.Rows[0]["strDurationUnit"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strDurationUnit"];
                    _nFreeDuration = toReturn.Rows[0]["nFreeDuration"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFreeDuration"];
                    _strFreeDurationUnit = toReturn.Rows[0]["strFreeDurationUnit"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strFreeDurationUnit"];
                    _fCanUpgradeTo = toReturn.Rows[0]["fCanUpgradeTo"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fCanUpgradeTo"];
                    _fCanUpgradeFrom = toReturn.Rows[0]["fCanUpgradeFrom"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fCanUpgradeFrom"];
                    _mListPriceWGST = toReturn.Rows[0]["mListPriceWGST"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mListPriceWGST"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nCategoryID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCategoryID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnCategoryIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_SelectAllWnCategoryIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_SelectAllWnCategoryIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::SelectAllWnCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable SelectSpaPackageFreebie()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_SelectSpaPackageFreebie]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPackage");
			//string toReturn;
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@strPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_SelectSpaPackageFreebie' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::sp_tblPackage_SelectSpaPackageFreebie::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable SelectSpaPackageFreebieID()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblPackage_SelectSpaPackageFreebieID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblPackage");
			//string toReturn;
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@strPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strPackageCode));				
				cmdToExecute.Parameters.Add(new SqlParameter("@nPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPackageID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblPackage_SelectSpaPackageFreebie' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblPackage::sp_tblPackage_SelectSpaPackageFreebie::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		#region Class Property Declarations
		public SqlString StrPackageCode
		{
			get
			{
				return _strPackageCode;
			}
			set
			{
				SqlString strPackageCodeTmp = (SqlString)value;
				if(strPackageCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrPackageCode", "StrPackageCode can't be NULL");
				}
				_strPackageCode = value;
			}
		}


		public SqlString StrDescription
		{
			get
			{
				return _strDescription;
			}
			set
			{
				_strDescription = value;
			}
		}


		public SqlString StrReceiptDesc
		{
			get
			{
				return _strReceiptDesc;
			}
			set
			{
				_strReceiptDesc = value;
			}
		}

        public SqlString StrDurationUnit
        {
            get
            {
                return _strDurationUnit;
            }
            set
            {
                _strDurationUnit = value;
            }
        }


		public SqlMoney MListPrice
		{
			get
			{
				return _mListPrice;
			}
			set
			{
				_mListPrice = value;
			}
		}

        public SqlMoney MListPriceWGST
        {
            get
            {
                return _mListPriceWGST;
            }
            set
            {
                _mListPriceWGST = value;
            }
        }


		public SqlInt32 NMaxSession
		{
			get
			{
				return _nMaxSession;
			}
			set
			{
				_nMaxSession = value;
			}
		}

        public SqlInt32 NPackageDay
        {
            get
            {
                return _nPackageDay;
            }
            set
            {
                _nPackageDay = value;
            }
        }

		public SqlInt32 NPackageID
		{
			get
			{
				return _nPackageID;
			}
			set
			{
				_nPackageID = value;
			}
		}

		public SqlInt32 NPackageDuration
		{
			get
			{
				return _nPackageDuration;
			}
			set
			{
				_nPackageDuration = value;
			}
		}


		public SqlMoney MBaseUnitPrice
		{
			get
			{
				return _mBaseUnitPrice;
			}
			set
			{
				_mBaseUnitPrice = value;
			}
		}


		public SqlDateTime DtValidStart
		{
			get
			{
				return _dtValidStart;
			}
			set
			{
				_dtValidStart = value;
			}
		}


		public SqlDateTime DtValidEnd
		{
			get
			{
				return _dtValidEnd;
			}
			set
			{
				_dtValidEnd = value;
			}
		}


		public SqlBoolean FPeak
		{
			get
			{
				return _fPeak;
			}
			set
			{
				_fPeak = value;
			}
		}


		public SqlBoolean FStudentPackage
		{
			get
			{
				return _fStudentPackage;
			}
			set
			{
				_fStudentPackage = value;
			}
		}


		public SqlInt32 NCategoryID
		{
			get
			{
				return _nCategoryID;
			}
			set
			{
				SqlInt32 nCategoryIDTmp = (SqlInt32)value;
				if(nCategoryIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NCategoryID", "NCategoryID can't be NULL");
				}
				_nCategoryID = value;
			}
		}
		public SqlInt32 NCategoryIDOld
		{
			get
			{
				return _nCategoryIDOld;
			}
			set
			{
				SqlInt32 nCategoryIDOldTmp = (SqlInt32)value;
				if(nCategoryIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NCategoryIDOld", "NCategoryIDOld can't be NULL");
				}
				_nCategoryIDOld = value;
			}
		}


		public SqlInt32 NValidMonths
		{
			get
			{
				return _nValidMonths;
			}
			set
			{
				_nValidMonths = value;
			}
		}


		public SqlInt32 NWarrantyMonths
		{
			get
			{
				return _nWarrantyMonths;
			}
			set
			{
				_nWarrantyMonths = value;
			}
		}


		public SqlBoolean FGIRO
		{
			get
			{
				return _fGIRO;
			}
			set
			{
				_fGIRO = value;
			}
		}


		public SqlInt32 FNoRestrictionUpgrade
		{
			get
			{
				return _fNoRestrictionUpgrade;
			}
			set
			{
				_fNoRestrictionUpgrade = value;
			}
		}


		public SqlInt32 NStatus
		{
			get
			{
				return _nStatus;
			}
			set
			{
				_nStatus = value;
			}
		}
		#endregion

		#region PickHui
		public DataTable GetPromotionPackage(string branchCode, int nCategoryID)
		{
			string cmdText = "Select A.* from tblPackage A " + 
			" Inner Join tblPackageBranch B on A.strPackageCode = B.strPackageCode " + 
			" inner join tblPromotionPackage C on A.strPackageCode = C.strPackageCode " + 
			" and A.nStatus = 1 and @CurrentDate >= A.dtValidStart and @CurrentDate <= A.dtValidEnd " + 
			" and B.strBranchCode = @BranchCode and A.nCategoryID = @nCategoryID ";
			
			return base.LoadData(cmdText, new string[] {"@CurrentDate", "@BranchCode", "@nCategoryID"}, new object[] {System.DateTime.Today, branchCode, nCategoryID});
		}

		public DataTable GetPromotionPackageBasePromotionCode(string strPromotionCode)
		{
			string cmdText = " Select A.*, B.strDescription From tblPromotionPackage A, tblPackage B Where A.strPackageCode = B.strPackageCode AND " +
                " A.strPromotionCode = @strPromotionCode union Select A.*, B.strDescription From tblPromotionPackage A, tblCreditPackage B Where A.strPackageCode = B.strCreditPackageCode AND  A.strPromotionCode =@strPromotionCode";
			
			return base.LoadData(cmdText, new string[] {"@strPromotionCode"}, new object[]{strPromotionCode});
		}

		public DataTable GetValidPackage(string branchCode)
		{
			string cmdText = "Select A.* from tblPackage A Inner Join tblPackageBranch B on A.strPackageCode = B.strPackageCode Where nStatus = 1 and @CurrentDate >= dtValidStart and @CurrentDate <= dtValidEnd and B.strBranchCode = @BranchCode ";
			return base.LoadData(cmdText, new string[] {"@CurrentDate", "@BranchCode"}, new object[] {System.DateTime.Today, branchCode});
		}

		public DataTable GetAllPackageFromBranch(string branchCode)
		{
			string cmdText = "Select A.* From tblPackage A Inner Join tblPackageBranch B on A.strPackageCode = B.strPackageCode Where B.strBranchCode = @BranchCode";
			return base.LoadData(cmdText, new string[] {"@BranchCode"}, new object[] {branchCode});
		}

		public DataTable GetValidPackageFromBranchBaseCategory(string branchCode, int nCategoryID)
		{
			string cmdText = "Select A.* from tblPackage A Inner Join tblPackageBranch B " + 
				" on A.strPackageCode = B.strPackageCode Where nStatus = 1 and " + 
				" @CurrentDate >= dtValidStart and @CurrentDate <= dtValidEnd and " + 
				" B.strBranchCode = @BranchCode and A.nCategoryID = @nCategoryID ";
			
			return base.LoadData(cmdText, new string[] {"@CurrentDate", "@BranchCode", "@nCategoryID"}, new object[] {System.DateTime.Today, branchCode, nCategoryID});
		}

		public DataTable GetValidPackageFromBranchForCreditPackageUsage(string branchCode, int nCreditPackageID)
		{
			 string cmdText = "Select A.*, 1 as nQuantity from tblPackage A Inner Join tblPackageBranch B " + 
				" on A.strPackageCode = B.strPackageCode " + 
				" Where nStatus = 1 and " + 
				" @CurrentDate >= dtValidStart and @CurrentDate <= dtValidEnd and " + 
				" B.strBranchCode = @BranchCode AND A.strPackageCode in " + 
				" (Select strPackageCode From tblCreditPackageRestriction A Inner Join " + 
				" tblMemberCreditPackage B On A.strCreditPackageCode = B.strCreditPackageCode " + 
				" Where B.nCreditPackageID = @nCreditPackageID)";
			
			return base.LoadData(cmdText, new string[] {"@CurrentDate", "@BranchCode", "@nCreditPackageID"}, 
				new object[] {System.DateTime.Today, branchCode, nCreditPackageID});
		}

		public DataTable GetValidUpgradablePackageBaseOldPackage(string branchCode, string oldStrPackageCode)
		{
		
			string cmdText = "Select B.* from tblPackage B Inner Join tblPackageBranch C on B.strPackageCode = C.strPackageCode Where B.fNoRestrictionUpgrade IN (" + 
				"select fNoRestrictionUpgrade from tblPackage where strPackageCode= @oldStrPackageCode) AND fSell = 1 AND" + " C.strBranchCode = @strBranchCode"; 
		
			return base.LoadData(cmdText, new string[] {"@oldStrPackageCode", "@strBranchCode"}, new object[] {oldStrPackageCode, branchCode});
		}
        //jackie 06/03/2012
        public DataTable GetValidConvertPackage(string branchCode, decimal BaseUnitPrice)
        {

            string cmdText = "Select A.* from tblPackage A, tblPackageBranch B where nCategoryID = 4 AND " +
                       " A.dtValidStart <= @CurrentDate  and A.dtValidEnd >= @CurrentDate  AND A.strPackageCode = B.strPackageCode AND " +
                       " B.strBranchCode = @strBranchCode AND A.nStatus = 1 and fSell=1 and mListPrice> @BaseUnitPrice";

            return base.LoadData(cmdText, new string[] { "@CurrentDate", "@strBranchCode", "@BaseUnitPrice" },
                new object[] { System.DateTime.Today, branchCode, BaseUnitPrice });
        }
		//DEREK 131007
        public DataTable GetLastestPurchasedMemberPackage(string strPackageCode, string strMembershipID, int nCreditPackageID, string strPdfExportPath)
        {
            //string cmdText = "SELECT top 1 m.nPackageID, p.nCategoryID, m.strPackageCode, m.strMembershipID, ISNULL(P.nMaxSession, 0) AS nMaxSession " +
            string cmdText = "SELECT m.nPackageID, p.nCategoryID, m.strPackageCode, m.strMembershipID, ISNULL(P.nMaxSession, 0) AS nMaxSession " +
                                " FROM tblMemberPackage AS m LEFT OUTER JOIN  " +
                                        " tblPackage AS p ON m.strPackageCode = p.strPackageCode  " +
                                " WHERE m.strPackageCode = @strPackageCode AND m.strMembershipID = @strMembershipID AND m.nCreditPackageID = @nCreditPackageID AND m.nStatusID = 0  " +
                                        " AND m.strSigPdfPath = @strPdfExportPath " + 
                                " ORDER BY m.nPackageID DESC";
            return base.LoadData(cmdText, new string[] { "@strPackageCode", "@strMembershipID", "@nCreditPackageID", "@strPdfExportPath" },
                new object[] { strPackageCode, strMembershipID, nCreditPackageID, strPdfExportPath });
        }

        //DEREK
        public string GetPackageDescription(string strPackageCode)
        {          
            string rval = "";

            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = @"SELECT strDescription FROM tblPackage WHERE strPackageCode = @strPackageCode";

            cmdToExecute.CommandType = CommandType.Text;

            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add("@strPackageCode", strPackageCode);

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                SqlDataReader dr = cmdToExecute.ExecuteReader();

                if (dr.HasRows)
                {
                    while (dr.Read())
                    {
                        rval = dr["strDescription"].ToString();
                    }
                }
                dr.Close();
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }

            return rval;
        }
		/*public DataTable GetValidUpgradablePackageBaseOldPackage(string branchCode, string oldStrPackageCode)
		{
			string cmdText = "Select B.* from tblUpgradeRestriction A inner Join tblPackage B on A.strUpgradePackageCode = B.strPackageCode " +
				" Inner Join tblPackageBranch C on B.strPackageCode = C.strPackageCode Where A.strBasePackageCode = @oldStrPackageCode AND " + 
				" C.strBranchCode = @strBranchCode"; 
		
			return base.LoadData(cmdText, new string[] {"@oldStrPackageCode", "@strBranchCode"}, new object[] {oldStrPackageCode, branchCode});
		}
		*/
		public DataTable GetUpgradableCreditPackage(string oldStrPackageCode)
		{
			string cmdText = "select * from tblcreditPackage Where @CurrentDate >= dtValidStart and @CurrentDate <= dtValidEnd " + 
							"AND fNoRestrictionUpgrade IN (select fNoRestrictionUpgrade from tblcreditPackage where strCreditPackageCode='" + oldStrPackageCode + "')";
			return base.LoadData(cmdText, new string[] {"@CurrentDate"}, 
				new object[] {System.DateTime.Today});

		}
		#endregion
	}
}

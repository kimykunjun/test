///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblCreditPackage'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:06
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblCreditPackage'.
	/// </summary>
	public class TblCreditPackage : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_dtValidStart, _dtValidEnd;
			private SqlDouble		_dCreditDiscount;
			private SqlInt32		_nValidMonths, _nCategoryID, _nCategoryIDOld;
            private SqlMoney        _mListPrice, _mCreditAmount, _mListPriceWGST, _mFreeCredit;
			private SqlString		_strReceiptDesc, _strDescription, _strCreditPackageCode;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblCreditPackage()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>StrDescription. May be SqlString.Null</LI>
		///		 <LI>StrReceiptDesc. May be SqlString.Null</LI>
		///		 <LI>MListPrice. May be SqlMoney.Null</LI>
		///		 <LI>DtValidStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtValidEnd. May be SqlDateTime.Null</LI>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NValidMonths. May be SqlInt32.Null</LI>
		///		 <LI>MCreditAmount. May be SqlMoney.Null</LI>
		///		 <LI>DCreditDiscount. May be SqlDouble.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrDescription", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strDescription));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptDesc", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptDesc));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmListPrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mListPrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inValidMonths", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nValidMonths));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCreditAmount", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCreditAmount));
				cmdToExecute.Parameters.Add(new SqlParameter("@fdCreditDiscount", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _dCreditDiscount));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>StrDescription. May be SqlString.Null</LI>
		///		 <LI>StrReceiptDesc. May be SqlString.Null</LI>
		///		 <LI>MListPrice. May be SqlMoney.Null</LI>
		///		 <LI>DtValidStart. May be SqlDateTime.Null</LI>
		///		 <LI>DtValidEnd. May be SqlDateTime.Null</LI>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NValidMonths. May be SqlInt32.Null</LI>
		///		 <LI>MCreditAmount. May be SqlMoney.Null</LI>
		///		 <LI>DCreditDiscount. May be SqlDouble.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrDescription", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strDescription));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrReceiptDesc", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strReceiptDesc));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmListPrice", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mListPrice));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidStart", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidStart));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtValidEnd", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtValidEnd));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inValidMonths", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nValidMonths));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCreditAmount", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCreditAmount));
				cmdToExecute.Parameters.Add(new SqlParameter("@fdCreditDiscount", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _dCreditDiscount));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nCategoryID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nCategoryID' in
		/// all rows which have as value for this field the value as set in property 'NCategoryIDOld' to 
		/// the value as set in property 'NCategoryID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NCategoryIDOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnCategoryIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_UpdateAllWnCategoryIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryIDOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_UpdateAllWnCategoryIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::UpdateAllWnCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nCategoryID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCategoryID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnCategoryIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_DeleteAllWnCategoryIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_DeleteAllWnCategoryIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::DeleteAllWnCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCreditPackageCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>StrCreditPackageCode</LI>
		///		 <LI>StrDescription</LI>
		///		 <LI>StrReceiptDesc</LI>
		///		 <LI>MListPrice</LI>
		///		 <LI>DtValidStart</LI>
		///		 <LI>DtValidEnd</LI>
		///		 <LI>NCategoryID</LI>
		///		 <LI>NValidMonths</LI>
		///		 <LI>MCreditAmount</LI>
		///		 <LI>DCreditDiscount</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditPackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCreditPackageCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strCreditPackageCode = (string)toReturn.Rows[0]["strCreditPackageCode"];
					_strDescription = toReturn.Rows[0]["strDescription"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strDescription"];
					_strReceiptDesc = toReturn.Rows[0]["strReceiptDesc"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strReceiptDesc"];
					_mListPrice = toReturn.Rows[0]["mListPrice"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mListPrice"];
					_dtValidStart = toReturn.Rows[0]["dtValidStart"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtValidStart"];
					_dtValidEnd = toReturn.Rows[0]["dtValidEnd"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtValidEnd"];
					_nCategoryID = (Int32)toReturn.Rows[0]["nCategoryID"];
					_nValidMonths = toReturn.Rows[0]["nValidMonths"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nValidMonths"];
					_mCreditAmount = toReturn.Rows[0]["mCreditAmount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCreditAmount"];
					_dCreditDiscount = toReturn.Rows[0]["dCreditDiscount"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["dCreditDiscount"];
                    _mListPriceWGST = toReturn.Rows[0]["mListPriceWGST"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mListPriceWGST"];
                    _mFreeCredit = toReturn.Rows[0]["mFreeCredit"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mFreeCredit"]; 
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nCategoryID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NCategoryID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnCategoryIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCreditPackage_SelectAllWnCategoryIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCreditPackage");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nCategoryID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCreditPackage_SelectAllWnCategoryIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCreditPackage::SelectAllWnCategoryIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString StrCreditPackageCode
		{
			get
			{
				return _strCreditPackageCode;
			}
			set
			{
				SqlString strCreditPackageCodeTmp = (SqlString)value;
				if(strCreditPackageCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrCreditPackageCode", "StrCreditPackageCode can't be NULL");
				}
				_strCreditPackageCode = value;
			}
		}


		public SqlString StrDescription
		{
			get
			{
				return _strDescription;
			}
			set
			{
				_strDescription = value;
			}
		}


		public SqlString StrReceiptDesc
		{
			get
			{
				return _strReceiptDesc;
			}
			set
			{
				_strReceiptDesc = value;
			}
		}


		public SqlMoney MListPrice
		{
			get
			{
				return _mListPrice;
			}
			set
			{
				_mListPrice = value;
			}
		}

        public SqlMoney MListPriceWGST
        {
            get
            {                
                return _mListPriceWGST;
            }
            set
            {
                _mListPriceWGST = value;
            }
        }

        public SqlMoney MFreeCredit
        {
            get
            {
                return _mFreeCredit;
            }
            set
            {
                _mFreeCredit = value;
            }
        }
        
		public SqlDateTime DtValidStart
		{
			get
			{
				return _dtValidStart;
			}
			set
			{
				_dtValidStart = value;
			}
		}


		public SqlDateTime DtValidEnd
		{
			get
			{
				return _dtValidEnd;
			}
			set
			{
				_dtValidEnd = value;
			}
		}


		public SqlInt32 NCategoryID
		{
			get
			{
				return _nCategoryID;
			}
			set
			{
				SqlInt32 nCategoryIDTmp = (SqlInt32)value;
				if(nCategoryIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NCategoryID", "NCategoryID can't be NULL");
				}
				_nCategoryID = value;
			}
		}
		public SqlInt32 NCategoryIDOld
		{
			get
			{
				return _nCategoryIDOld;
			}
			set
			{
				SqlInt32 nCategoryIDOldTmp = (SqlInt32)value;
				if(nCategoryIDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NCategoryIDOld", "NCategoryIDOld can't be NULL");
				}
				_nCategoryIDOld = value;
			}
		}


		public SqlInt32 NValidMonths
		{
			get
			{
				return _nValidMonths;
			}
			set
			{
				_nValidMonths = value;
			}
		}


		public SqlMoney MCreditAmount
		{
			get
			{
				return _mCreditAmount;
			}
			set
			{
				_mCreditAmount = value;
			}
		}


		public SqlDouble DCreditDiscount
		{
			get
			{
				return _dCreditDiscount;
			}
			set
			{
				_dCreditDiscount = value;
			}
		}
		#endregion
	}
}

///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblMember'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:09
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblMember'.
	/// </summary>
	public class TblMember : DBInteractionBase
	{
		#region Class Member Declarations

            private SqlBoolean _fFemale, _fEmail, _fPhoneCall, _fSMS, _fAirCrew, _fPostalMail, _fBounceCheck, _fGIROFailed, _fLockerDeposit, _fMember, _fSingaporean;
			private SqlString _strCardBranchCode, _strBranchCode, _strBranchCodeOld, _strIntroducerMembershipID, _strIntroducerMembershipIDOld, _strRemarks, _strCreditCardNo, _strSecurityQuestion, _strSecurityAnswer, _strMobileAppPwd;
			private SqlDateTime _dtDOB, _dtSignupDate;
            private SqlInt32 _nEmployeeID, _nSignupID, _nSignupIDOld, _nMediaSourceID, _nMembershipNo, _nLoyaltyStatusID, _nLoyaltyStatusIDOld, _nCardStatusID, _nStatus;
			private SqlString _strMembershipID, _strEmergencyContactPerson, _strEmergencyContactNumber, _strOccupation, _strOfficeNo, _strMobileNo, _strPagerNo, _strHomeNo, 
                                _strAddress1, _strAddress2, _strPostalCode, _strAltEmail, _strMediaSource, _strCompany, _strEmail, _strNRICFIN, _strCardName, _strMemberName;
		
        #endregion

		#region LLBLGen code
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblMember()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>NMembershipNo. May be SqlInt32.Null</LI>
		///		 <LI>StrMemberName. May be SqlString.Null</LI>
		///		 <LI>StrCardName. May be SqlString.Null</LI>
		///		 <LI>StrNRICFIN. May be SqlString.Null</LI>
		///		 <LI>FSingaporean. May be SqlBoolean.Null</LI>
		///		 <LI>FMember. May be SqlBoolean.Null</LI>
		///		 <LI>FAirCrew. May be SqlBoolean.Null</LI>
		///		 <LI>DtDOB. May be SqlDateTime.Null</LI>
		///		 <LI>StrAddress1. May be SqlString.Null</LI>
		///		 <LI>StrAddress2. May be SqlString.Null</LI>
		///		 <LI>StrPostalCode. May be SqlString.Null</LI>
		///		 <LI>StrHomeNo. May be SqlString.Null</LI>
		///		 <LI>StrOfficeNo. May be SqlString.Null</LI>
		///		 <LI>StrMobileNo. May be SqlString.Null</LI>
		///		 <LI>StrPagerNo. May be SqlString.Null</LI>
		///		 <LI>FSMS. May be SqlBoolean.Null</LI>
		///		 <LI>FEmail. May be SqlBoolean.Null</LI>
		///		 <LI>FPostalMail. May be SqlBoolean.Null</LI>
		///		 <LI>StrEmail. May be SqlString.Null</LI>
		///		 <LI>StrAltEmail. May be SqlString.Null</LI>
		///		 <LI>NMediaSourceID. May be SqlInt32.Null</LI>
		///		 <LI>StrMediaSource. May be SqlString.Null</LI>
		///		 <LI>StrCompany. May be SqlString.Null</LI>
		///		 <LI>StrOccupation. May be SqlString.Null</LI>
		///		 <LI>NLoyaltyStatusID. May be SqlInt32.Null</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>DtSignupDate. May be SqlDateTime.Null</LI>
		///		 <LI>StrCreditCardNo. May be SqlString.Null</LI>
		///		 <LI>StrIntroducerMembershipID. May be SqlString.Null</LI>
		///		 <LI>NSignupID. May be SqlInt32.Null</LI>
		///		 <LI>NCardStatusID. May be SqlInt32.Null</LI>
		///		 <LI>StrCardBranchCode. May be SqlString.Null</LI>
		///		 <LI>FLockerDeposit. May be SqlBoolean.Null</LI>
		///		 <LI>FGIROFailed. May be SqlBoolean.Null</LI>
		///		 <LI>FBounceCheck. May be SqlBoolean.Null</LI>
		///		 <LI>NStatus. May be SqlInt32.Null</LI>
		///		 <LI>StrEmergencyContactPerson. May be SqlString.Null</LI>
		///		 <LI>StrEmergencyContactNumber. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMemberName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMemberName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCardName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCardName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrNRICFIN", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strNRICFIN));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfSingaporean", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fSingaporean));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfMember", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fMember));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAirCrew", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAirCrew));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtDOB", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDOB));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress1", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress1));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress2", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress2));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPostalCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHomeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHomeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOfficeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOfficeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMobileNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPagerNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPagerNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfSMS", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fSMS));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfEmail", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPostalMail", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPostalMail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmail", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAltEmail", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAltEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMediaSourceID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMediaSourceID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMediaSource", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMediaSource));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompany", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompany));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOccupation", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOccupation));
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtSignupDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtSignupDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditCardNo", SqlDbType.Char, 19, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCreditCardNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strIntroducerMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSignupID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSignupID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCardStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCardStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCardBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCardBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfLockerDeposit", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fLockerDeposit));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfGIROFailed", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fGIROFailed));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfBounceCheck", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fBounceCheck));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatus", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatus));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmergencyContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmergencyContactPerson));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmergencyContactNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmergencyContactNumber));
                cmdToExecute.Parameters.Add(new SqlParameter("@bfFemale", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFemale));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>NMembershipNo. May be SqlInt32.Null</LI>
		///		 <LI>StrMemberName. May be SqlString.Null</LI>
		///		 <LI>StrCardName. May be SqlString.Null</LI>
		///		 <LI>StrNRICFIN. May be SqlString.Null</LI>
		///		 <LI>FSingaporean. May be SqlBoolean.Null</LI>
		///		 <LI>FMember. May be SqlBoolean.Null</LI>
		///		 <LI>FAirCrew. May be SqlBoolean.Null</LI>
		///		 <LI>DtDOB. May be SqlDateTime.Null</LI>
		///		 <LI>StrAddress1. May be SqlString.Null</LI>
		///		 <LI>StrAddress2. May be SqlString.Null</LI>
		///		 <LI>StrPostalCode. May be SqlString.Null</LI>
		///		 <LI>StrHomeNo. May be SqlString.Null</LI>
		///		 <LI>StrOfficeNo. May be SqlString.Null</LI>
		///		 <LI>StrMobileNo. May be SqlString.Null</LI>
		///		 <LI>StrPagerNo. May be SqlString.Null</LI>
		///		 <LI>FSMS. May be SqlBoolean.Null</LI>
		///		 <LI>FEmail. May be SqlBoolean.Null</LI>
		///		 <LI>FPostalMail. May be SqlBoolean.Null</LI>
		///		 <LI>StrEmail. May be SqlString.Null</LI>
		///		 <LI>StrAltEmail. May be SqlString.Null</LI>
		///		 <LI>NMediaSourceID. May be SqlInt32.Null</LI>
		///		 <LI>StrMediaSource. May be SqlString.Null</LI>
		///		 <LI>StrCompany. May be SqlString.Null</LI>
		///		 <LI>StrOccupation. May be SqlString.Null</LI>
		///		 <LI>NLoyaltyStatusID. May be SqlInt32.Null</LI>
		///		 <LI>StrRemarks. May be SqlString.Null</LI>
		///		 <LI>DtSignupDate. May be SqlDateTime.Null</LI>
		///		 <LI>StrCreditCardNo. May be SqlString.Null</LI>
		///		 <LI>StrIntroducerMembershipID. May be SqlString.Null</LI>
		///		 <LI>NSignupID. May be SqlInt32.Null</LI>
		///		 <LI>NCardStatusID. May be SqlInt32.Null</LI>
		///		 <LI>StrCardBranchCode. May be SqlString.Null</LI>
		///		 <LI>FLockerDeposit. May be SqlBoolean.Null</LI>
		///		 <LI>FGIROFailed. May be SqlBoolean.Null</LI>
		///		 <LI>FBounceCheck. May be SqlBoolean.Null</LI>
		///		 <LI>NStatus. May be SqlInt32.Null</LI>
		///		 <LI>StrEmergencyContactPerson. May be SqlString.Null</LI>
		///		 <LI>StrEmergencyContactNumber. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMemberName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMemberName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCardName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCardName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrNRICFIN", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strNRICFIN));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfSingaporean", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fSingaporean));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfMember", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fMember));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAirCrew", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAirCrew));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtDOB", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtDOB));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress1", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress1));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress2", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress2));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPostalCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHomeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHomeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOfficeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOfficeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMobileNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPagerNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPagerNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfSMS", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fSMS));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfEmail", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPostalMail", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPostalMail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmail", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAltEmail", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAltEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMediaSourceID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMediaSourceID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMediaSource", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMediaSource));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompany", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompany));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOccupation", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOccupation));
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtSignupDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, _dtSignupDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditCardNo", SqlDbType.Char, 19, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCreditCardNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strIntroducerMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSignupID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSignupID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCardStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nCardStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCardBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCardBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfLockerDeposit", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fLockerDeposit));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfGIROFailed", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fGIROFailed));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfBounceCheck", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fBounceCheck));
				cmdToExecute.Parameters.Add(new SqlParameter("@inStatus", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nStatus));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmergencyContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmergencyContactPerson));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmergencyContactNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmergencyContactNumber));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrSecurityQuestion", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strSecurityQuestion));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrSecurityAnswer", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strSecurityAnswer));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrPassword", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileAppPwd));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strBranchCode.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strBranchCode' in
		/// all rows which have as value for this field the value as set in property 'StrBranchCodeOld' to 
		/// the value as set in property 'StrBranchCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrBranchCodeOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_UpdateAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCodeOld", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCodeOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_UpdateAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::UpdateAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nLoyaltyStatusID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nLoyaltyStatusID' in
		/// all rows which have as value for this field the value as set in property 'NLoyaltyStatusIDOld' to 
		/// the value as set in property 'NLoyaltyStatusID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NLoyaltyStatusID. May be SqlInt32.Null</LI>
		///		 <LI>NLoyaltyStatusIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnLoyaltyStatusIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_UpdateAllWnLoyaltyStatusIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_UpdateAllWnLoyaltyStatusIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::UpdateAllWnLoyaltyStatusIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'strIntroducerMembershipID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'strIntroducerMembershipID' in
		/// all rows which have as value for this field the value as set in property 'StrIntroducerMembershipIDOld' to 
		/// the value as set in property 'StrIntroducerMembershipID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrIntroducerMembershipID. May be SqlString.Null</LI>
		///		 <LI>StrIntroducerMembershipIDOld. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWstrIntroducerMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_UpdateAllWstrIntroducerMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strIntroducerMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipIDOld", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strIntroducerMembershipIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_UpdateAllWstrIntroducerMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::UpdateAllWstrIntroducerMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nSignupID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nSignupID' in
		/// all rows which have as value for this field the value as set in property 'NSignupIDOld' to 
		/// the value as set in property 'NSignupID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NSignupID. May be SqlInt32.Null</LI>
		///		 <LI>NSignupIDOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWnSignupIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_UpdateAllWnSignupIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inSignupID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nSignupID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSignupIDOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSignupIDOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_UpdateAllWnSignupIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::UpdateAllWnSignupIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strBranchCode'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_DeleteAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_DeleteAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::DeleteAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nLoyaltyStatusID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NLoyaltyStatusID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnLoyaltyStatusIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_DeleteAllWnLoyaltyStatusIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_DeleteAllWnLoyaltyStatusIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::DeleteAllWnLoyaltyStatusIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'strIntroducerMembershipID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrIntroducerMembershipID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrIntroducerMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_DeleteAllWstrIntroducerMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strIntroducerMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_DeleteAllWstrIntroducerMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::DeleteAllWstrIntroducerMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nSignupID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NSignupID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnSignupIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_DeleteAllWnSignupIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inSignupID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nSignupID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_DeleteAllWnSignupIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::DeleteAllWnSignupIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrMembershipID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>StrMembershipID</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>NMembershipNo</LI>
		///		 <LI>StrMemberName</LI>
		///		 <LI>StrCardName</LI>
		///		 <LI>StrNRICFIN</LI>
		///		 <LI>FSingaporean</LI>
		///		 <LI>FMember</LI>
		///		 <LI>FAirCrew</LI>
		///		 <LI>DtDOB</LI>
		///		 <LI>StrAddress1</LI>
		///		 <LI>StrAddress2</LI>
		///		 <LI>StrPostalCode</LI>
		///		 <LI>StrHomeNo</LI>
		///		 <LI>StrOfficeNo</LI>
		///		 <LI>StrMobileNo</LI>
		///		 <LI>StrPagerNo</LI>
		///		 <LI>FSMS</LI>
		///		 <LI>FEmail</LI>
		///		 <LI>FPostalMail</LI>
		///		 <LI>StrEmail</LI>
		///		 <LI>StrAltEmail</LI>
		///		 <LI>NMediaSourceID</LI>
		///		 <LI>StrMediaSource</LI>
		///		 <LI>StrCompany</LI>
		///		 <LI>StrOccupation</LI>
		///		 <LI>NLoyaltyStatusID</LI>
		///		 <LI>StrRemarks</LI>
		///		 <LI>DtSignupDate</LI>
		///		 <LI>StrCreditCardNo</LI>
		///		 <LI>StrIntroducerMembershipID</LI>
		///		 <LI>NSignupID</LI>
		///		 <LI>NCardStatusID</LI>
		///		 <LI>StrCardBranchCode</LI>
		///		 <LI>FLockerDeposit</LI>
		///		 <LI>FGIROFailed</LI>
		///		 <LI>FBounceCheck</LI>
		///		 <LI>NStatus</LI>
		///		 <LI>StrEmergencyContactPerson</LI>
		///		 <LI>StrEmergencyContactNumber</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strMembershipID = (string)toReturn.Rows[0]["strMembershipID"];
					_strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
					_nMembershipNo = toReturn.Rows[0]["nMembershipNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMembershipNo"];
					_strMemberName = toReturn.Rows[0]["strMemberName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strMemberName"];
					_strCardName = toReturn.Rows[0]["strCardName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCardName"];
					_strNRICFIN = toReturn.Rows[0]["strNRICFIN"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strNRICFIN"];
					_fSingaporean = toReturn.Rows[0]["fSingaporean"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fSingaporean"];
					_fMember = toReturn.Rows[0]["fMember"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fMember"];
					_fAirCrew = toReturn.Rows[0]["fAirCrew"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fAirCrew"];
					_dtDOB = toReturn.Rows[0]["dtDOB"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtDOB"];
					_strAddress1 = toReturn.Rows[0]["strAddress1"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strAddress1"];
					_strAddress2 = toReturn.Rows[0]["strAddress2"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strAddress2"];
					_strPostalCode = toReturn.Rows[0]["strPostalCode"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strPostalCode"];
					_strHomeNo = toReturn.Rows[0]["strHomeNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strHomeNo"];
					_strOfficeNo = toReturn.Rows[0]["strOfficeNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strOfficeNo"];
					_strMobileNo = toReturn.Rows[0]["strMobileNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strMobileNo"];
					_strPagerNo = toReturn.Rows[0]["strPagerNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strPagerNo"];
					_fSMS = toReturn.Rows[0]["fSMS"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fSMS"];
					_fEmail = toReturn.Rows[0]["fEmail"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fEmail"];
					_fPostalMail = toReturn.Rows[0]["fPostalMail"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fPostalMail"];
					_strEmail = toReturn.Rows[0]["strEmail"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strEmail"];
					_strAltEmail = toReturn.Rows[0]["strAltEmail"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strAltEmail"];
					_nMediaSourceID = toReturn.Rows[0]["nMediaSourceID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMediaSourceID"];
					_strMediaSource = toReturn.Rows[0]["strMediaSource"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strMediaSource"];
					_strCompany = toReturn.Rows[0]["strCompany"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCompany"];
					_strOccupation = toReturn.Rows[0]["strOccupation"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strOccupation"];
					_nLoyaltyStatusID = toReturn.Rows[0]["nLoyaltyStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nLoyaltyStatusID"];
					_strRemarks = toReturn.Rows[0]["strRemarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strRemarks"];
					_dtSignupDate = toReturn.Rows[0]["dtSignupDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["dtSignupDate"];
					_strCreditCardNo = toReturn.Rows[0]["strCreditCardNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCreditCardNo"];
					_strIntroducerMembershipID = toReturn.Rows[0]["strIntroducerMembershipID"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strIntroducerMembershipID"];
					_nSignupID = toReturn.Rows[0]["nSignupID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSignupID"];
					_nCardStatusID = toReturn.Rows[0]["nCardStatusID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nCardStatusID"];
					_strCardBranchCode = toReturn.Rows[0]["strCardBranchCode"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strCardBranchCode"];
					_fLockerDeposit = toReturn.Rows[0]["fLockerDeposit"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fLockerDeposit"];
					_fGIROFailed = toReturn.Rows[0]["fGIROFailed"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fGIROFailed"];
					_fBounceCheck = toReturn.Rows[0]["fBounceCheck"] == System.DBNull.Value ? SqlBoolean.Null : (bool)toReturn.Rows[0]["fBounceCheck"];
					_nStatus = toReturn.Rows[0]["nStatus"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nStatus"];
					_strEmergencyContactPerson = toReturn.Rows[0]["strEmergencyContactPerson"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strEmergencyContactPerson"];
					_strEmergencyContactNumber = toReturn.Rows[0]["strEmergencyContactNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strEmergencyContactNumber"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectOne::Error occured. " + ex.Message);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strBranchCode'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrBranchCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_SelectAllWstrBranchCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_SelectAllWstrBranchCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectAllWstrBranchCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nLoyaltyStatusID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NLoyaltyStatusID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnLoyaltyStatusIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_SelectAllWnLoyaltyStatusIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_SelectAllWnLoyaltyStatusIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectAllWnLoyaltyStatusIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'strIntroducerMembershipID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrIntroducerMembershipID. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWstrIntroducerMembershipIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_SelectAllWstrIntroducerMembershipIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strIntroducerMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_SelectAllWstrIntroducerMembershipIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectAllWstrIntroducerMembershipIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nSignupID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NSignupID. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnSignupIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblMember_SelectAllWnSignupIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inSignupID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSignupID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblMember_SelectAllWnSignupIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectAllWnSignupIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
		#endregion

		#region Lee Chau Chon Code
		public bool MembershipIDExists(string strMembershipID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_CountBystrMembershipID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				int count = (Int32)cmdToExecute.ExecuteScalar();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_CountBystrMembershipID' reported the ErrorCode: " + _errorCode);
				}

				if (count > 0)
					return true;
				else
					return false;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::CountBystrMembershipID::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public bool MembershipThisMonthBirtdayForUtilised(string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectByMonthDOBForSpaSingleTreatmentHalfPrice]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                int count = (Int32)cmdToExecute.ExecuteScalar();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_tblMember_SelectByMonthDOB' reported the ErrorCode: " + _errorCode);
                }

                if (count > 0)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::SelectByMonthDOB::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        public bool MembershipThisMonthBirtdayForUtilised(string strMembershipID, int nCreditPackageID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectByMonthDOBForCreditRedemptionHalfPrice]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            
            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@nNCreditPackageID", SqlDbType.Int, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, nCreditPackageID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                int count = (Int32)cmdToExecute.ExecuteScalar();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_tblMember_SelectByMonthDOB' reported the ErrorCode: " + _errorCode);
                }

                if (count > 0)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::SelectByMonthDOB::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
        public bool MembershipThisMonthBirtday(string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectByMonthDOB]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                int count = (Int32)cmdToExecute.ExecuteScalar();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_tblMember_SelectByMonthDOB' reported the ErrorCode: " + _errorCode);
                }

                if (count > 0)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::SelectByMonthDOB::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
		public DataTable SelectLast15(string strBranchCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectLast15]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_SelectLast15' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectLast15::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable AddIntroFriendFreebie(string strMembershipID, string strIntroducerID,string strPromoteFreebie,string strBranchCode, int nEmployee)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[dw_tblFriendPromotion]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblFriendPromotion");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@strMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@strIntroducerID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strIntroducerID));
				cmdToExecute.Parameters.Add(new SqlParameter("@strPromoteFreebie", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strPromoteFreebie));
				cmdToExecute.Parameters.Add(new SqlParameter("@strBranchCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add("@nEmployee", nEmployee);
				
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);	
			//	_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

			

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectLast15::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        //Added by TBBC on 23 September 2015 for intro friend package promotion.
        public DataTable AddIntroFriendPackage(string strIntroducerID, string strRemarks, string strPromotePackage, int nEmployee)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[dw_tblFriendPackagePromotion]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblFriendPackagePromotion");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@strIntroducerID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strIntroducerID));
                cmdToExecute.Parameters.Add(new SqlParameter("@strRemarks", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strRemarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@strPromotePackage", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strPromotePackage));
                cmdToExecute.Parameters.Add("@nEmployee", nEmployee);

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                //	_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;



                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::SelectLast15::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		public DataTable SelectLatest(string dtCardForm, string dtCardTill)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectLastest]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@dtCardForm", SqlDbType.DateTime,10, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, Convert.ToDateTime(dtCardForm).ToShortDateString()));
				cmdToExecute.Parameters.Add(new SqlParameter("@dtCardTill", SqlDbType.DateTime,10, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, Convert.ToDateTime(dtCardTill).ToShortDateString()));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_SelectLast15' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectLast15::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable SelectFixedOne(string strMembershipID, string strBranchCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectFixedOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_SelectFixedOne' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectFixedOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable SelectBirthOfMonth(string strBranchCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectBirthOfMonth]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_SelectBirthOfMonth' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectBirthOfMonth::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable SelectExpireInAWeek(string strBranchCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectExpireInAWeek]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_SelectExpireInAWeek' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectExpireInAWeek::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


        public int CheckMediaSource(string strMemberID)
        {

            object obj = base.ExecuteScalar("SELECT isnull(nMediaSourceID,0) AS nMediaSourceID from tblMember Where strMemberShipID = @strMembershipID ",
             new string[] { "@strMemberShipID" }, new object[] { strMemberID });

            if (obj != null)
            {
                int nMediaSourceID = (int)((int)obj);
                return nMediaSourceID;
            }
            return 0;
        }

		public int CheckNRIC(string strNRICFIN, string strMembershipID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_CheckNIRC]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrNRICFIN", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strNRICFIN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				int count = (int)cmdToExecute.ExecuteScalar();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_CheckNIRC' reported the ErrorCode: " + _errorCode);
				}

				return count;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::CheckNIRC::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		public DataTable Search_Old(string searchKey, object strBranchCode, object fMember)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrKey", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, searchKey));
				
				if (strBranchCode != DBNull.Value && fMember != DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_SearchByBranchnMember]";
				else if (strBranchCode == DBNull.Value && fMember != DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_SearchByMember]";
				else if (strBranchCode != DBNull.Value && fMember == DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_SearchByBranch]";
				else if (strBranchCode == DBNull.Value && fMember == DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_Search]";

				if (strBranchCode != DBNull.Value)
					cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				if (fMember != DBNull.Value)
					cmdToExecute.Parameters.Add(new SqlParameter("@fMember", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, fMember));
				
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_Search' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::Search::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable Search(string searchKey, object strBranchCode, object fMember, int page, int recperpage)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add("@Page", page);
				cmdToExecute.Parameters.Add("@RecsPerPage", recperpage);
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrKey", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, searchKey));
				
				if (strBranchCode != DBNull.Value && fMember != DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_PagedSearch2ByBranchnMember]";
				else if (strBranchCode == DBNull.Value && fMember != DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_PagedSearch2ByMember]";
				else if (strBranchCode != DBNull.Value && fMember == DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_PagedSearch2ByBranch]";
				else if (strBranchCode == DBNull.Value && fMember == DBNull.Value)
					cmdToExecute.CommandText = "dbo.[pr_tblMember_PagedSearch2]";

				if (strBranchCode != DBNull.Value)
					cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				if (fMember != DBNull.Value)
					cmdToExecute.Parameters.Add(new SqlParameter("@fMember", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, fMember));
				
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::Search::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public void ConvertMember(string strMembershipID, string strNewMembershipID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_UpdateConvertToMember]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@strNewMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strNewMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_UpdateConvertToMember' reported the ErrorCode: " + _errorCode);
				}
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::pr_tblMember_UpdateConvertToMember::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		public void ConvertMemberPurchase(string strMembershipID, string strNewMembershipID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_ConvertPurchase]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@strNewMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, strNewMembershipID));
				//cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_ConvertPurchase' reported the ErrorCode: " + _errorCode);
				}
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::pr_tblMember_ConvertPurchase::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		/// <summary>
		/// Use to update member record when save user change about the user profile.
		/// </summary>
		/// <returns></returns>
		public bool Update2(object dtDOB, string strBeforePhoto, string strAfterPhoto, byte[] imgPhoto)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_Update2]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMemberName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMemberName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCardName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCardName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrNRICFIN", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strNRICFIN));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfSingaporean", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fSingaporean));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfAirCrew", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fAirCrew));
				cmdToExecute.Parameters.Add(new SqlParameter("@dadtDOB", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 23, 3, "", DataRowVersion.Proposed, dtDOB));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress1", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress1));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress2", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress2));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPostalCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHomeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHomeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOfficeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOfficeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMobileNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrPagerNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strPagerNo));
                cmdToExecute.Parameters.Add(new SqlParameter("@bfPhoneCall", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPhoneCall));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrUpdatedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nEmployeeID.ToString()));
                cmdToExecute.Parameters.Add(new SqlParameter("@bfSMS", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fSMS));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfEmail", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfPostalMail", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fPostalMail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmail", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAltEmail", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAltEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMediaSourceID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMediaSourceID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMediaSource", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMediaSource));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCompany", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCompany));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOccupation", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOccupation));
				cmdToExecute.Parameters.Add(new SqlParameter("@inLoyaltyStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLoyaltyStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strRemarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCreditCardNo", SqlDbType.Char, 19, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strCreditCardNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfGIROFailed", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fGIROFailed));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmergencyContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmergencyContactPerson));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmergencyContactNumber", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmergencyContactNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@bfBounceCheck", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fBounceCheck));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBeforePhoto", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strBeforePhoto));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAfterPhoto", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strAfterPhoto));
				SqlParameter paramPhoto = new SqlParameter("@imgPhoto", SqlDbType.Image);
				paramPhoto.Value = imgPhoto;
				cmdToExecute.Parameters.Add(paramPhoto);
                cmdToExecute.Parameters.Add(new SqlParameter("@bfFemale", SqlDbType.Bit, 1, ParameterDirection.Input, true, 1, 0, "", DataRowVersion.Proposed, _fFemale));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrSecurityQuestion", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strSecurityQuestion));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrSecurityAnswer", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strSecurityAnswer));
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrPassword", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileAppPwd));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_Update2' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::Update2::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public void InsertFWFChance(string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();

            cmdToExecute.CommandText = "INSERT INTO tblfwfpool (strMembershipID,strDescription,dtCreate,nSelected,isExpired) VALUES (@sstrMembershipID,'FRIEND SIGNUP',GETDATE(),0,0)	";
            cmdToExecute.CommandType = CommandType.Text;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;
            
            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
            
            }
            catch (Exception ex)
            {






                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::UpdateIntroducerMembershipID::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }
            
		public bool UpdateIntroducerMembershipID(string strMembershipID, string strIntroducerMembershipID)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_UpdateIntroducerMembershipID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrIntroducerMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strIntroducerMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_UpdateIntroducerMembershipID' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)




			{






				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::UpdateIntroducerMembershipID::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		public bool DeleteMember(string strMembershipID, string strRemark)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_DeleteMember]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrRemarks", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strRemark));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_DeleteMember' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::DeleteMember::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		public bool UpdateCardStatus(string strMembershipID, int nCardStatusID, string strCardBranchCode)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_UpdateCardStatus]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inCardStatusID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nCardStatusID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCardBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strCardBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_UpdateCardStatus' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::UpdateCardStatus::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		public DataTable SelectAllForLookupEdit()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblMember_SelectAllForLookupEdit]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblMember");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblMember_SelectAllForLookupEdit' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblMember::SelectAllForLookupEdit::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
		#endregion
		
		#region PickHui
		public void UpdateKey(DataTable table, string cmdText,
			string newPrimaryKeyName, object newPrimaryKeyValue,
			string originalPrimaryKeyName, object originalPrimaryKeyValue, 
			string [] paramNames, object[] paramValues)
		{
			
			base.UpdatePrimaryKey(table, cmdText, newPrimaryKeyName, newPrimaryKeyValue, 
				originalPrimaryKeyName, originalPrimaryKeyValue, paramNames, paramValues);
		}

		public void SaveData(DataTable table)
		{
			base.SaveData(table, "Select * From tblMember");
		}

		public DataTable GetMemberBaseBranchCode(string strBranchCode)
		{
			string cmdText = "Select strNRICFIN, strMembershipID, strBranchCode, nMembershipNo, strMemberName, fMember From tblMember where " +
				" strBranchCode = @strBranchCode";
			return base.LoadData(cmdText, new string[] {"@strBranchCode"}, new object[] {strBranchCode});
		}

		public DataTable GetMember()
		{
			string cmdText = "Select strNRICFIN, strMembershipID, strBranchCode, nMembershipNo, strMemberName, fMember From tblMember ";
			return base.LoadData(cmdText);
		}

		#endregion

        #region Dyi woei code
        public DataTable GetMemberBooking(string strMembershipID)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_GetMemberBooking]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblMember");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sstrMembershipID", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, strMembershipID));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                //_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                //if (_errorCode != (int)LLBLError.AllOk)
                //{
                //    // Throw error.
                //    throw new Exception("Stored Procedure 'sp_GetMemberBooking' reported the ErrorCode: " + _errorCode);
                //}

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::sp_GetMemberBooking::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable GetMemberConfirmationEmail()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblMembers_getMemberConfirmationEmail]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblMember");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                //cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                //_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                //if (_errorCode != (int)LLBLError.AllOk)
                //{
                // Throw error.
                //throw new Exception("Stored Procedure 'sp_tblContacts_getLeadConfirmationEmail' reported the ErrorCode: " + _errorCode);
                //}

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblMember::sp_tblMembers_getMemberConfirmationEmail::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable GetMediaSource(string strCategory)
        {
            string cmdText = "Select nMediaSourceID,strDescription From tblMediaSource where nMediasourceID NOT IN (14,38) and strCategory='"+ strCategory +"'";
            return base.LoadData(cmdText);
        }

        public DataTable GetRelationShip()
        {
            string cmdText = "Select strRelationCode From tblRelationship";
            return base.LoadData(cmdText);
        }
        #endregion

        #region Class Property Declarations

        public SqlInt32 NEmployeeID
        {
            get
            {
                return _nEmployeeID;
            }
            set
            {
                SqlInt32 nEmployeeIDTmp = (SqlInt32)value;
                if (nEmployeeIDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("NEmployeeID", "NEmployeeID can't be NULL");
                }
                _nEmployeeID = value;
            }
        }

        public SqlString StrMembershipID
		{
			get
			{
				return _strMembershipID;
			}
			set
			{
				SqlString strMembershipIDTmp = (SqlString)value;
				if(strMembershipIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrMembershipID", "StrMembershipID can't be NULL");
				}
				_strMembershipID = value;
			}
		}

		public SqlString StrBranchCode
		{
			get
			{
				return _strBranchCode;
			}
			set
			{
				SqlString strBranchCodeTmp = (SqlString)value;
				if(strBranchCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
				}
				_strBranchCode = value;
			}
		}

		public SqlString StrBranchCodeOld
		{
			get
			{
				return _strBranchCodeOld;
			}
			set
			{
				SqlString strBranchCodeOldTmp = (SqlString)value;
				if(strBranchCodeOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCodeOld", "StrBranchCodeOld can't be NULL");
				}
				_strBranchCodeOld = value;
			}
		}

		public SqlInt32 NMembershipNo
		{
			get
			{
				return _nMembershipNo;
			}
			set
			{
				_nMembershipNo = value;
			}
		}

		public SqlString StrMemberName
		{
			get
			{
				return _strMemberName;
			}
			set
			{
				_strMemberName = value;
			}
		}

		public SqlString StrCardName
		{
			get
			{
				return _strCardName;
			}
			set
			{
				_strCardName = value;
			}
		}

		public SqlString StrNRICFIN
		{
			get
			{
				return _strNRICFIN;
			}
			set
			{
				_strNRICFIN = value;
			}
		}

		public SqlBoolean FSingaporean
		{
			get
			{
				return _fSingaporean;
			}
			set
			{
				_fSingaporean = value;
			}
		}

		public SqlBoolean FMember
		{
			get
			{
				return _fMember;
			}
			set
			{
				_fMember = value;
			}
		}

		public SqlBoolean FAirCrew
		{
			get
			{
				return _fAirCrew;
			}
			set
			{
				_fAirCrew = value;
			}
		}

		public SqlDateTime DtDOB
		{
			get
			{
				return _dtDOB;
			}
			set
			{
				_dtDOB = value;
			}
		}

		public SqlString StrAddress1
		{
			get
			{
				return _strAddress1;
			}
			set
			{
				_strAddress1 = value;
			}
		}

		public SqlString StrAddress2
		{
			get
			{
				return _strAddress2;
			}
			set
			{
				_strAddress2 = value;
			}
		}

		public SqlString StrPostalCode
		{
			get
			{
				return _strPostalCode;
			}
			set
			{
				_strPostalCode = value;
			}
		}

		public SqlString StrHomeNo
		{
			get
			{
				return _strHomeNo;
			}
			set
			{
				_strHomeNo = value;
			}
		}

		public SqlString StrOfficeNo
		{
			get
			{
				return _strOfficeNo;
			}
			set
			{
				_strOfficeNo = value;
			}
		}

		public SqlString StrMobileNo
		{
			get
			{
				return _strMobileNo;
			}
			set
			{
				_strMobileNo = value;
			}
		}

		public SqlString StrPagerNo
		{
			get
			{
				return _strPagerNo;
			}
			set
			{
				_strPagerNo = value;
			}
		}

		public SqlBoolean FPhoneCall
		{
			get
			{
				return _fPhoneCall;
			}
			set
			{
                _fPhoneCall = value;
			}
		}

        public SqlBoolean FSMS
        {
            get
            {
                return _fSMS;
            }
            set
            {
                _fSMS = value;
            }
        }

		public SqlBoolean FEmail
		{
			get
			{
				return _fEmail;
			}
			set
			{
				_fEmail = value;
			}
		}

        public SqlBoolean FFemale
        {
            get
            {
                return _fFemale;
            }
            set
            {
                _fFemale = value;
            }
        }

		public SqlBoolean FPostalMail
		{
			get
			{
				return _fPostalMail;
			}
			set
			{
				_fPostalMail = value;
			}
		}

		public SqlString StrEmail
		{
			get
			{
				return _strEmail;
			}
			set
			{
				_strEmail = value;
			}
		}

		public SqlString StrAltEmail
		{
			get
			{
				return _strAltEmail;
			}
			set
			{
				_strAltEmail = value;
			}
		}

		public SqlInt32 NMediaSourceID
		{
			get
			{
				return _nMediaSourceID;
			}
			set
			{
				_nMediaSourceID = value;
			}
		}

		public SqlString StrMediaSource
		{
			get
			{
				return _strMediaSource;
			}
			set
			{
				_strMediaSource = value;
			}
		}

		public SqlString StrCompany
		{
			get
			{
				return _strCompany;
			}
			set
			{
				_strCompany = value;
			}
		}

		public SqlString StrOccupation
		{
			get
			{
				return _strOccupation;
			}
			set
			{
				_strOccupation = value;
			}
		}

		public SqlInt32 NLoyaltyStatusID
		{
			get
			{
				return _nLoyaltyStatusID;
			}
			set
			{
				_nLoyaltyStatusID = value;
			}
		}

		public SqlInt32 NLoyaltyStatusIDOld
		{
			get
			{
				return _nLoyaltyStatusIDOld;
			}
			set
			{
				_nLoyaltyStatusIDOld = value;
			}
		}

		public SqlString StrRemarks
		{
			get
			{
				return _strRemarks;
			}
			set
			{
				_strRemarks = value;
			}
		}

		public SqlDateTime DtSignupDate
		{
			get
			{
				return _dtSignupDate;
			}
			set
			{
				_dtSignupDate = value;
			}
		}

		public SqlString StrCreditCardNo
		{
			get
			{
				return _strCreditCardNo;
			}
			set
			{
				_strCreditCardNo = value;
			}
		}

		public SqlString StrIntroducerMembershipID
		{
			get
			{
				return _strIntroducerMembershipID;
			}
			set
			{
				_strIntroducerMembershipID = value;
			}
		}

		public SqlString StrIntroducerMembershipIDOld
		{
			get
			{
				return _strIntroducerMembershipIDOld;
			}
			set
			{
				_strIntroducerMembershipIDOld = value;
			}
		}

		public SqlInt32 NSignupID
		{
			get
			{
				return _nSignupID;
			}
			set
			{
				_nSignupID = value;
			}
		}

		public SqlInt32 NSignupIDOld
		{
			get
			{
				return _nSignupIDOld;
			}
			set
			{
				_nSignupIDOld = value;
			}
		}

		public SqlInt32 NCardStatusID
		{
			get
			{
				return _nCardStatusID;
			}
			set
			{
				_nCardStatusID = value;
			}
		}

		public SqlString StrCardBranchCode
		{
			get
			{
				return _strCardBranchCode;
			}
			set
			{
				_strCardBranchCode = value;
			}
		}

		public SqlBoolean FLockerDeposit
		{
			get
			{
				return _fLockerDeposit;
			}
			set
			{
				_fLockerDeposit = value;
			}
		}

		public SqlBoolean FGIROFailed
		{
			get
			{
				return _fGIROFailed;
			}
			set
			{
				_fGIROFailed = value;
			}
		}

		public SqlBoolean FBounceCheck
		{
			get
			{
				return _fBounceCheck;
			}
			set
			{
				_fBounceCheck = value;
			}
		}

		public SqlInt32 NStatus
		{
			get
			{
				return _nStatus;
			}
			set
			{
				_nStatus = value;
			}
		}

		public SqlString StrEmergencyContactPerson
		{
			get
			{
				return _strEmergencyContactPerson;
			}
			set
			{
				_strEmergencyContactPerson = value;
			}
		}

		public SqlString StrEmergencyContactNumber
		{
			get
			{
				return _strEmergencyContactNumber;
			}
			set
			{
				_strEmergencyContactNumber = value;
			}
		}

        public SqlString StrSecurityQuestion
        {
            get
            {
                return _strSecurityQuestion;
            }
            set
            {
                _strSecurityQuestion = value;
            }
        }

        public SqlString StrSecurityAnswer
        {
            get
            {
                return _strSecurityAnswer;
            }
            set
            {
                _strSecurityAnswer = value;
            }
        }

        public SqlString StrPassword
        {
            get
            {
                return _strMobileAppPwd;
            }
            set
            {
                _strMobileAppPwd = value;
            }
        }

		#endregion
	}
}

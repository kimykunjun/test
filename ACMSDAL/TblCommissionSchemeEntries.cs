///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblCommissionSchemeEntries'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:06
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblCommissionSchemeEntries'.
	/// </summary>
	public class TblCommissionSchemeEntries : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt32		_nPTPackageBranchExcess, _nFitnessPackageIndExcess, _nFitnessProductIndExcess, _nFitnessProductBranchExcess, _nSpaPackageBranchExcess, _nSpaProductBranchExcess, _nBranchPercentComm, _nBranchPercentSharedComm, _nIndPercentComm, _nSpaPackageIndExcess, _nSpaProductIndExcess, _nPTPackageIndExcess, _nFitnessPackageBranchExcess, _nSpaPackageBranchTargetPercent, _nSpaProductBranchTargetPercent, _nFitnessProductBranchTargetPercent, _nPriorityID, _nFitnessPackageBranchTargetPercent, _nPTPackageBranchTargetPercent, _nSpaProductIndTargetPercent, _nPTPackageIndTargetPercent, _nSpaPackageIndTargetPercent, _nFitnessPackageIndTargetPercent, _nFitnessProductIndTargetPercent;
			private SqlMoney		_mCommissionAmount;
			private SqlString		_strCommissionCode;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblCommissionSchemeEntries()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCommissionCode</LI>
		///		 <LI>NPriorityID</LI>
		///		 <LI>NFitnessPackageBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessPackageIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessPackageBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessPackageIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NBranchPercentComm. May be SqlInt32.Null</LI>
		///		 <LI>NBranchPercentSharedComm. May be SqlInt32.Null</LI>
		///		 <LI>NIndPercentComm. May be SqlInt32.Null</LI>
		///		 <LI>MCommissionAmount. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCommissionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCommissionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPriorityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPriorityID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inBranchPercentComm", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nBranchPercentComm));
				cmdToExecute.Parameters.Add(new SqlParameter("@inBranchPercentSharedComm", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nBranchPercentSharedComm));
				cmdToExecute.Parameters.Add(new SqlParameter("@inIndPercentComm", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nIndPercentComm));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCommissionAmount", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCommissionAmount));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCommissionCode</LI>
		///		 <LI>NPriorityID</LI>
		///		 <LI>NFitnessPackageBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageBranchTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessPackageIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageIndTargetPercent. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessPackageBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageBranchExcess. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessPackageIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NFitnessProductIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaPackageIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NSpaProductIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NPTPackageIndExcess. May be SqlInt32.Null</LI>
		///		 <LI>NBranchPercentComm. May be SqlInt32.Null</LI>
		///		 <LI>NBranchPercentSharedComm. May be SqlInt32.Null</LI>
		///		 <LI>NIndPercentComm. May be SqlInt32.Null</LI>
		///		 <LI>MCommissionAmount. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCommissionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCommissionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPriorityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPriorityID));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageBranchTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageBranchTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageIndTargetPercent", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageIndTargetPercent));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageBranchExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageBranchExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessPackageIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessPackageIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inFitnessProductIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nFitnessProductIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaPackageIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaPackageIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inSpaProductIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nSpaProductIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPTPackageIndExcess", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nPTPackageIndExcess));
				cmdToExecute.Parameters.Add(new SqlParameter("@inBranchPercentComm", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nBranchPercentComm));
				cmdToExecute.Parameters.Add(new SqlParameter("@inBranchPercentSharedComm", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nBranchPercentSharedComm));
				cmdToExecute.Parameters.Add(new SqlParameter("@inIndPercentComm", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nIndPercentComm));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmCommissionAmount", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mCommissionAmount));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCommissionCode</LI>
		///		 <LI>NPriorityID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCommissionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCommissionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPriorityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPriorityID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'strCommissionCode'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'strCommissionCode'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCommissionCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWstrCommissionCodeLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_DeleteAllWstrCommissionCodeLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCommissionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCommissionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_DeleteAllWstrCommissionCodeLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::DeleteAllWstrCommissionCodeLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method using PK field 'nPriorityID'. This method will 
		/// delete one or more rows from the database, based on the Primary Key field 'nPriorityID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NPriorityID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnPriorityIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_DeleteAllWnPriorityIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inPriorityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPriorityID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_DeleteAllWnPriorityIDLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::DeleteAllWnPriorityIDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrCommissionCode</LI>
		///		 <LI>NPriorityID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>StrCommissionCode</LI>
		///		 <LI>NPriorityID</LI>
		///		 <LI>NFitnessPackageBranchTargetPercent</LI>
		///		 <LI>NFitnessProductBranchTargetPercent</LI>
		///		 <LI>NSpaPackageBranchTargetPercent</LI>
		///		 <LI>NSpaProductBranchTargetPercent</LI>
		///		 <LI>NPTPackageBranchTargetPercent</LI>
		///		 <LI>NFitnessPackageIndTargetPercent</LI>
		///		 <LI>NFitnessProductIndTargetPercent</LI>
		///		 <LI>NSpaPackageIndTargetPercent</LI>
		///		 <LI>NSpaProductIndTargetPercent</LI>
		///		 <LI>NPTPackageIndTargetPercent</LI>
		///		 <LI>NFitnessPackageBranchExcess</LI>
		///		 <LI>NFitnessProductBranchExcess</LI>
		///		 <LI>NSpaPackageBranchExcess</LI>
		///		 <LI>NSpaProductBranchExcess</LI>
		///		 <LI>NPTPackageBranchExcess</LI>
		///		 <LI>NFitnessPackageIndExcess</LI>
		///		 <LI>NFitnessProductIndExcess</LI>
		///		 <LI>NSpaPackageIndExcess</LI>
		///		 <LI>NSpaProductIndExcess</LI>
		///		 <LI>NPTPackageIndExcess</LI>
		///		 <LI>NBranchPercentComm</LI>
		///		 <LI>NBranchPercentSharedComm</LI>
		///		 <LI>NIndPercentComm</LI>
		///		 <LI>MCommissionAmount</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCommissionSchemeEntries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrCommissionCode", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strCommissionCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inPriorityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nPriorityID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strCommissionCode = (string)toReturn.Rows[0]["strCommissionCode"];
					_nPriorityID = (Int32)toReturn.Rows[0]["nPriorityID"];
					_nFitnessPackageBranchTargetPercent = toReturn.Rows[0]["nFitnessPackageBranchTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessPackageBranchTargetPercent"];
					_nFitnessProductBranchTargetPercent = toReturn.Rows[0]["nFitnessProductBranchTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessProductBranchTargetPercent"];
					_nSpaPackageBranchTargetPercent = toReturn.Rows[0]["nSpaPackageBranchTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaPackageBranchTargetPercent"];
					_nSpaProductBranchTargetPercent = toReturn.Rows[0]["nSpaProductBranchTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaProductBranchTargetPercent"];
					_nPTPackageBranchTargetPercent = toReturn.Rows[0]["nPTPackageBranchTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPTPackageBranchTargetPercent"];
					_nFitnessPackageIndTargetPercent = toReturn.Rows[0]["nFitnessPackageIndTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessPackageIndTargetPercent"];
					_nFitnessProductIndTargetPercent = toReturn.Rows[0]["nFitnessProductIndTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessProductIndTargetPercent"];
					_nSpaPackageIndTargetPercent = toReturn.Rows[0]["nSpaPackageIndTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaPackageIndTargetPercent"];
					_nSpaProductIndTargetPercent = toReturn.Rows[0]["nSpaProductIndTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaProductIndTargetPercent"];
					_nPTPackageIndTargetPercent = toReturn.Rows[0]["nPTPackageIndTargetPercent"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPTPackageIndTargetPercent"];
					_nFitnessPackageBranchExcess = toReturn.Rows[0]["nFitnessPackageBranchExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessPackageBranchExcess"];
					_nFitnessProductBranchExcess = toReturn.Rows[0]["nFitnessProductBranchExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessProductBranchExcess"];
					_nSpaPackageBranchExcess = toReturn.Rows[0]["nSpaPackageBranchExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaPackageBranchExcess"];
					_nSpaProductBranchExcess = toReturn.Rows[0]["nSpaProductBranchExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaProductBranchExcess"];
					_nPTPackageBranchExcess = toReturn.Rows[0]["nPTPackageBranchExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPTPackageBranchExcess"];
					_nFitnessPackageIndExcess = toReturn.Rows[0]["nFitnessPackageIndExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessPackageIndExcess"];
					_nFitnessProductIndExcess = toReturn.Rows[0]["nFitnessProductIndExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nFitnessProductIndExcess"];
					_nSpaPackageIndExcess = toReturn.Rows[0]["nSpaPackageIndExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaPackageIndExcess"];
					_nSpaProductIndExcess = toReturn.Rows[0]["nSpaProductIndExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nSpaProductIndExcess"];
					_nPTPackageIndExcess = toReturn.Rows[0]["nPTPackageIndExcess"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nPTPackageIndExcess"];
					_nBranchPercentComm = toReturn.Rows[0]["nBranchPercentComm"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nBranchPercentComm"];
					_nBranchPercentSharedComm = toReturn.Rows[0]["nBranchPercentSharedComm"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nBranchPercentSharedComm"];
					_nIndPercentComm = toReturn.Rows[0]["nIndPercentComm"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nIndPercentComm"];
					_mCommissionAmount = toReturn.Rows[0]["mCommissionAmount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mCommissionAmount"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblCommissionSchemeEntries_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblCommissionSchemeEntries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblCommissionSchemeEntries_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblCommissionSchemeEntries::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString StrCommissionCode
		{
			get
			{
				return _strCommissionCode;
			}
			set
			{
				SqlString strCommissionCodeTmp = (SqlString)value;
				if(strCommissionCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrCommissionCode", "StrCommissionCode can't be NULL");
				}
				_strCommissionCode = value;
			}
		}


		public SqlInt32 NPriorityID
		{
			get
			{
				return _nPriorityID;
			}
			set
			{
				SqlInt32 nPriorityIDTmp = (SqlInt32)value;
				if(nPriorityIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NPriorityID", "NPriorityID can't be NULL");
				}
				_nPriorityID = value;
			}
		}


		public SqlInt32 NFitnessPackageBranchTargetPercent
		{
			get
			{
				return _nFitnessPackageBranchTargetPercent;
			}
			set
			{
				_nFitnessPackageBranchTargetPercent = value;
			}
		}


		public SqlInt32 NFitnessProductBranchTargetPercent
		{
			get
			{
				return _nFitnessProductBranchTargetPercent;
			}
			set
			{
				_nFitnessProductBranchTargetPercent = value;
			}
		}


		public SqlInt32 NSpaPackageBranchTargetPercent
		{
			get
			{
				return _nSpaPackageBranchTargetPercent;
			}
			set
			{
				_nSpaPackageBranchTargetPercent = value;
			}
		}


		public SqlInt32 NSpaProductBranchTargetPercent
		{
			get
			{
				return _nSpaProductBranchTargetPercent;
			}
			set
			{
				_nSpaProductBranchTargetPercent = value;
			}
		}


		public SqlInt32 NPTPackageBranchTargetPercent
		{
			get
			{
				return _nPTPackageBranchTargetPercent;
			}
			set
			{
				_nPTPackageBranchTargetPercent = value;
			}
		}


		public SqlInt32 NFitnessPackageIndTargetPercent
		{
			get
			{
				return _nFitnessPackageIndTargetPercent;
			}
			set
			{
				_nFitnessPackageIndTargetPercent = value;
			}
		}


		public SqlInt32 NFitnessProductIndTargetPercent
		{
			get
			{
				return _nFitnessProductIndTargetPercent;
			}
			set
			{
				_nFitnessProductIndTargetPercent = value;
			}
		}


		public SqlInt32 NSpaPackageIndTargetPercent
		{
			get
			{
				return _nSpaPackageIndTargetPercent;
			}
			set
			{
				_nSpaPackageIndTargetPercent = value;
			}
		}


		public SqlInt32 NSpaProductIndTargetPercent
		{
			get
			{
				return _nSpaProductIndTargetPercent;
			}
			set
			{
				_nSpaProductIndTargetPercent = value;
			}
		}


		public SqlInt32 NPTPackageIndTargetPercent
		{
			get
			{
				return _nPTPackageIndTargetPercent;
			}
			set
			{
				_nPTPackageIndTargetPercent = value;
			}
		}


		public SqlInt32 NFitnessPackageBranchExcess
		{
			get
			{
				return _nFitnessPackageBranchExcess;
			}
			set
			{
				_nFitnessPackageBranchExcess = value;
			}
		}


		public SqlInt32 NFitnessProductBranchExcess
		{
			get
			{
				return _nFitnessProductBranchExcess;
			}
			set
			{
				_nFitnessProductBranchExcess = value;
			}
		}


		public SqlInt32 NSpaPackageBranchExcess
		{
			get
			{
				return _nSpaPackageBranchExcess;
			}
			set
			{
				_nSpaPackageBranchExcess = value;
			}
		}


		public SqlInt32 NSpaProductBranchExcess
		{
			get
			{
				return _nSpaProductBranchExcess;
			}
			set
			{
				_nSpaProductBranchExcess = value;
			}
		}


		public SqlInt32 NPTPackageBranchExcess
		{
			get
			{
				return _nPTPackageBranchExcess;
			}
			set
			{
				_nPTPackageBranchExcess = value;
			}
		}


		public SqlInt32 NFitnessPackageIndExcess
		{
			get
			{
				return _nFitnessPackageIndExcess;
			}
			set
			{
				_nFitnessPackageIndExcess = value;
			}
		}


		public SqlInt32 NFitnessProductIndExcess
		{
			get
			{
				return _nFitnessProductIndExcess;
			}
			set
			{
				_nFitnessProductIndExcess = value;
			}
		}


		public SqlInt32 NSpaPackageIndExcess
		{
			get
			{
				return _nSpaPackageIndExcess;
			}
			set
			{
				_nSpaPackageIndExcess = value;
			}
		}


		public SqlInt32 NSpaProductIndExcess
		{
			get
			{
				return _nSpaProductIndExcess;
			}
			set
			{
				_nSpaProductIndExcess = value;
			}
		}


		public SqlInt32 NPTPackageIndExcess
		{
			get
			{
				return _nPTPackageIndExcess;
			}
			set
			{
				_nPTPackageIndExcess = value;
			}
		}


		public SqlInt32 NBranchPercentComm
		{
			get
			{
				return _nBranchPercentComm;
			}
			set
			{
				_nBranchPercentComm = value;
			}
		}


		public SqlInt32 NBranchPercentSharedComm
		{
			get
			{
				return _nBranchPercentSharedComm;
			}
			set
			{
				_nBranchPercentSharedComm = value;
			}
		}


		public SqlInt32 NIndPercentComm
		{
			get
			{
				return _nIndPercentComm;
			}
			set
			{
				_nIndPercentComm = value;
			}
		}


		public SqlMoney MCommissionAmount
		{
			get
			{
				return _mCommissionAmount;
			}
			set
			{
				_mCommissionAmount = value;
			}
		}
		#endregion
	}
}

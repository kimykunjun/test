///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblContacts'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:06
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using MySql.Data.MySqlClient;
using System.Configuration;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblContacts'.
	/// </summary>
	public class TblContacts : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt32		_nEmployeeId, _nEmployeeIdOld, _nContactId;
			private SqlString		_strFax, _strEmail, _strAddress, _strMobileNo, _strContactName, _strOrganization, _strOfficeNo, _strBranchCode;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblContacts()
		{
			// Nothing for now.
		}
        //protected string MySQLConnStr()
        //{
        //    string connStr = ConfigurationManager.ConnectionStrings["AmoreCssConnStr"].ConnectionString.ToString();

        //    return connStr;
        //}

		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeId</LI>
		///		 <LI>StrContactName</LI>
		///		 <LI>StrOrganization. May be SqlString.Null</LI>
		///		 <LI>StrOfficeNo. May be SqlString.Null</LI>
		///		 <LI>StrMobileNo. May be SqlString.Null</LI>
		///		 <LI>StrFax. May be SqlString.Null</LI>
		///		 <LI>StrEmail. May be SqlString.Null</LI>
		///		 <LI>StrAddress. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>NContactId</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrContactName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strContactName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOrganization", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOrganization));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOfficeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOfficeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMobileNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrFax", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strFax));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmail", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress));
				cmdToExecute.Parameters.Add(new SqlParameter("@inContactId", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nContactId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_nContactId = (SqlInt32)cmdToExecute.Parameters["@inContactId"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NContactId</LI>
		///		 <LI>NEmployeeId</LI>
		///		 <LI>StrContactName</LI>
		///		 <LI>StrOrganization. May be SqlString.Null</LI>
		///		 <LI>StrOfficeNo. May be SqlString.Null</LI>
		///		 <LI>StrMobileNo. May be SqlString.Null</LI>
		///		 <LI>StrFax. May be SqlString.Null</LI>
		///		 <LI>StrEmail. May be SqlString.Null</LI>
		///		 <LI>StrAddress. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inContactId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nContactId));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrContactName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strContactName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOrganization", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOrganization));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrOfficeNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strOfficeNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrMobileNo", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strMobileNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrFax", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strFax));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrEmail", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strEmail));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrAddress", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strAddress));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'nEmployeeId.
		/// This method will Update one or more existing rows in the database. It will reset the field 'nEmployeeId' in
		/// all rows which have as value for this field the value as set in property 'NEmployeeIdOld' to 
		/// the value as set in property 'NEmployeeId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeId</LI>
		///		 <LI>NEmployeeIdOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
        /// 
        public void AddNewLead(ref int nContactId, string strContactName, string strNRICFIN, string strMobileNo, string strEmail,
                                string strGender, Nullable<DateTime> dtDOB, int nMediaSourceID, int nEmployeeID,
                                string strBranchCode, string strRemarks, bool fPhoneCall, bool fSMS,
                                bool fEmail, int fDNC, string nEntryBy)
        {
            string sql_NewLead = "sp_DNCLeadInsertNew";

            SqlCommand cmd_NewLead = new SqlCommand();
            cmd_NewLead.CommandText = sql_NewLead;
            cmd_NewLead.CommandType = CommandType.StoredProcedure;

            cmd_NewLead.Connection = _mainConnection;

            try
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmd_NewLead.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                cmd_NewLead.Parameters.Add(new SqlParameter("@strContactName", strContactName));
                cmd_NewLead.Parameters.Add(new SqlParameter("@strNRICFIN", strNRICFIN));
                cmd_NewLead.Parameters.Add(new SqlParameter("@strMobileNo", strMobileNo));
                cmd_NewLead.Parameters.Add(new SqlParameter("@Email", strEmail));
                cmd_NewLead.Parameters.Add(new SqlParameter("@Gender", strGender));

                SqlParameter paramDOB = new SqlParameter("@dtDOB", SqlDbType.DateTime, 8);
                paramDOB.IsNullable = true;
                paramDOB.Value = dtDOB != null ? (Object)dtDOB : DBNull.Value;
                paramDOB.Direction = ParameterDirection.Input;

                cmd_NewLead.Parameters.Add(paramDOB);

                cmd_NewLead.Parameters.Add(new SqlParameter("@nMediaSourceID", nMediaSourceID));
                cmd_NewLead.Parameters.Add(new SqlParameter("@nEmployeeID", nEmployeeID));
                cmd_NewLead.Parameters.Add(new SqlParameter("@strBranchCode", strBranchCode));
                cmd_NewLead.Parameters.Add(new SqlParameter("@strRemarks", strRemarks));
                cmd_NewLead.Parameters.Add(new SqlParameter("@fPhoneCall", fPhoneCall));
                cmd_NewLead.Parameters.Add(new SqlParameter("@fSMS", fSMS));
                cmd_NewLead.Parameters.Add(new SqlParameter("@fEmail", fEmail));
                cmd_NewLead.Parameters.Add(new SqlParameter("@fDNC", fDNC));
                cmd_NewLead.Parameters.Add(new SqlParameter("@nEntryBy", nEntryBy));

                nContactId = Convert.ToInt32(cmd_NewLead.ExecuteScalar());

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblContacts::sp_DNCLeadInsertNew::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmd_NewLead.Dispose();
            }            
        }
        public void UpdateLeadStatus(int nContactId, int nStatus)
        {
            string sql_UpdateLead = "sp_LeadUpdateStatus";

            SqlCommand cmd_UpdateLead = new SqlCommand();
            cmd_UpdateLead.CommandText = sql_UpdateLead;
            cmd_UpdateLead.CommandType = CommandType.StoredProcedure;

            cmd_UpdateLead.Connection = _mainConnection;

            try
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmd_UpdateLead.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nContactId", nContactId));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nStatus", nStatus));                
                cmd_UpdateLead.ExecuteNonQuery();

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblContacts::sp_LeadUpdateStatus::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmd_UpdateLead.Dispose();
            }
        }
        public void UpdateLead(int nContactId, string strContactName, string strNRICFIN, string strMobileNo, string strEmail,
                                string strGender, Nullable<DateTime> dtDOB, int nMediaSourceID, int nEmployeeID,
                                string strBranchCode, string strRemarks, bool nstatus, bool fPhoneCall, bool fSMS,
                                bool fEmail, int fDNC, string nEntryBy)
        {
            string sql_UpdateLead = "sp_DNCLeadUpdateDetailsWithLogs";

            SqlCommand cmd_UpdateLead = new SqlCommand();
            cmd_UpdateLead.CommandText = sql_UpdateLead;
            cmd_UpdateLead.CommandType = CommandType.StoredProcedure;

            cmd_UpdateLead.Connection = _mainConnection;

            try
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmd_UpdateLead.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nContactId", nContactId));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@strContactName", strContactName));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@strNRICFIN", strNRICFIN));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@strMobileNo", strMobileNo));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@Email", strEmail));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@Gender", strGender));

                SqlParameter paramDOB = new SqlParameter("@dtDOB", SqlDbType.DateTime, 8);
                paramDOB.IsNullable = true;
                paramDOB.Value = dtDOB != null ? (Object)dtDOB : DBNull.Value;
                paramDOB.Direction = ParameterDirection.Input;

                cmd_UpdateLead.Parameters.Add(paramDOB);

                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nMediaSourceID", nMediaSourceID));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nEmployeeID", nEmployeeID));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@strBranchCode", strBranchCode));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@strRemarks", strRemarks));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nstatus", nstatus));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@fPhoneCall", fPhoneCall));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@fSMS", fSMS));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@fEmail", fEmail));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@fDNC", fDNC));
                cmd_UpdateLead.Parameters.Add(new SqlParameter("@nEntryBy", nEntryBy));

                //nContactId = Convert.ToInt32(cmd_UpdateLead.ExecuteScalar());
                cmd_UpdateLead.ExecuteNonQuery();

            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblContacts::sp_DNCLeadUpdateDetailsWithLogs::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmd_UpdateLead.Dispose();
            }
        }

		public bool UpdateAllWnEmployeeIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_UpdateAllWnEmployeeIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeIdOld", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeIdOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_UpdateAllWnEmployeeIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::UpdateAllWnEmployeeIdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NContactId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inContactId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nContactId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'nEmployeeId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWnEmployeeIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_DeleteAllWnEmployeeIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_DeleteAllWnEmployeeIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::DeleteAllWnEmployeeIdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NContactId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>NContactId</LI>
		///		 <LI>NEmployeeId</LI>
		///		 <LI>StrContactName</LI>
		///		 <LI>StrOrganization</LI>
		///		 <LI>StrOfficeNo</LI>
		///		 <LI>StrMobileNo</LI>
		///		 <LI>StrFax</LI>
		///		 <LI>StrEmail</LI>
		///		 <LI>StrAddress</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblContacts");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inContactId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nContactId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_nContactId = (Int32)toReturn.Rows[0]["nContactId"];
					_nEmployeeId = (Int32)toReturn.Rows[0]["nEmployeeId"];
                    _strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
					_strContactName = (string)toReturn.Rows[0]["strContactName"];
					_strOrganization = toReturn.Rows[0]["strOrganization"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strOrganization"];
					_strOfficeNo = toReturn.Rows[0]["strOfficeNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strOfficeNo"];
					_strMobileNo = toReturn.Rows[0]["strMobileNo"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strMobileNo"];
					_strFax = toReturn.Rows[0]["strFax"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strFax"];
					_strEmail = toReturn.Rows[0]["strEmail"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strEmail"];
					_strAddress = toReturn.Rows[0]["strAddress"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strAddress"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblContacts_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblContacts");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'nEmployeeId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>NEmployeeId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWnEmployeeIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblContacts_SelectAllWnEmployeeIdLogicActive]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblContacts");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblContacts_SelectAllWnEmployeeIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblContacts::SelectAllWnEmployeeIdLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public int CreateNewEdm(string strSender, string strSubject, string strContent, int nTotalRecipients, int nType, string strTargetGroup)
        {
            int rval = 0;
            string connectionString = (string)ConfigurationSettings.AppSettings["AmoreMySQLConnStr"];
            MySqlConnection myConn = new MySqlConnection(connectionString);

            if (myConn.State == ConnectionState.Closed)
            {
                myConn.Open();
            }

            try
            {
                string mysql_CreateNewEdm = @"Call mysp_InsertNewEdm(@p_strSender, @p_strSubject, @p_strContent, @p_nTotalRecipients, @p_nType, @p_strTargetGroup);";

                MySqlCommand cmd_CreateNewEdm = myConn.CreateCommand();
                cmd_CreateNewEdm.CommandText = mysql_CreateNewEdm;
                cmd_CreateNewEdm.CommandType = CommandType.Text;

                cmd_CreateNewEdm.Parameters.Add(new MySqlParameter("@p_strSender", strSender));
                cmd_CreateNewEdm.Parameters.Add(new MySqlParameter("@p_strSubject", strSubject));
                cmd_CreateNewEdm.Parameters.Add(new MySqlParameter("@p_strContent", strContent));
                cmd_CreateNewEdm.Parameters.Add(new MySqlParameter("@p_nTotalRecipients", nTotalRecipients));
                cmd_CreateNewEdm.Parameters.Add(new MySqlParameter("@p_nType", nType));
                cmd_CreateNewEdm.Parameters.Add(new MySqlParameter("@p_strTargetGroup", strTargetGroup));

                //MySqlParameter p_nEdmId = new MySqlParameter("@p_nEdmId", MySqlDbType.Int16);          
                //p_nEdmId.Direction = ParameterDirection.Output;
                //p_nEdmId.IsNullable = true;
                //p_nEdmId.Value = 0;
                //cmd_CreateNewEdm.Parameters.Add(p_nEdmId);
                int nEdmId = Convert.ToInt32(cmd_CreateNewEdm.ExecuteScalar());

                //int nEdmId = (int)cmd_CreateNewEdm.Parameters["nLast].Value;

                //Response.Write(nEdmId.ToString()); 

                rval = nEdmId;

            }
            catch (Exception ex)
            {

            }

            myConn.Close();

            return rval;
        }

        public DataTable GetLeadConfirmationEmail()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblContacts_getLeadConfirmationEmail]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblContacts");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                //cmdToExecute.Parameters.Add(new SqlParameter("@inEmployeeId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _nEmployeeId));
                //cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                //_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                //if (_errorCode != (int)LLBLError.AllOk)
                //{
                    // Throw error.
                    //throw new Exception("Stored Procedure 'sp_tblContacts_getLeadConfirmationEmail' reported the ErrorCode: " + _errorCode);
                //}

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblContacts::sp_tblContacts_getLeadConfirmationEmail::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllWnBranchCodeLogic()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[sp_tblContacts_SelectAllWnBranchCodeLogicActive]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("tblContacts");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@strBranchCode", SqlDbType.VarChar, 2, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _strBranchCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'sp_tblContacts_SelectAllWnBranchCodeLogicActive' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("TblContacts::SelectAllWnBranchCodeLogic::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		#region Class Property Declarations
		public SqlInt32 NContactId
		{
			get
			{
				return _nContactId;
			}
			set
			{
				SqlInt32 nContactIdTmp = (SqlInt32)value;
				if(nContactIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NContactId", "NContactId can't be NULL");
				}
				_nContactId = value;
			}
		}


		public SqlInt32 NEmployeeId
		{
			get
			{
				return _nEmployeeId;
			}
			set
			{
				SqlInt32 nEmployeeIdTmp = (SqlInt32)value;
				if(nEmployeeIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeId", "NEmployeeId can't be NULL");
				}
				_nEmployeeId = value;
			}
		}
        public SqlString StrBranchCode
          {
            get
            {
                return _strBranchCode;
            }
            set
            {
                SqlString strBranchCodeTmp = (SqlString)value;
                if (strBranchCodeTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
                }
                _strBranchCode = value;
            }
        }
		public SqlInt32 NEmployeeIdOld
		{
			get
			{
				return _nEmployeeIdOld;
			}
			set
			{
				SqlInt32 nEmployeeIdOldTmp = (SqlInt32)value;
				if(nEmployeeIdOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NEmployeeIdOld", "NEmployeeIdOld can't be NULL");
				}
				_nEmployeeIdOld = value;
			}
		}


		public SqlString StrContactName
		{
			get
			{
				return _strContactName;
			}
			set
			{
				SqlString strContactNameTmp = (SqlString)value;
				if(strContactNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrContactName", "StrContactName can't be NULL");
				}
				_strContactName = value;
			}
		}


		public SqlString StrOrganization
		{
			get
			{
				return _strOrganization;
			}
			set
			{
				_strOrganization = value;
			}
		}


		public SqlString StrOfficeNo
		{
			get
			{
				return _strOfficeNo;
			}
			set
			{
				_strOfficeNo = value;
			}
		}


		public SqlString StrMobileNo
		{
			get
			{
				return _strMobileNo;
			}
			set
			{
				_strMobileNo = value;
			}
		}


		public SqlString StrFax
		{
			get
			{
				return _strFax;
			}
			set
			{
				_strFax = value;
			}
		}


		public SqlString StrEmail
		{
			get
			{
				return _strEmail;
			}
			set
			{
				_strEmail = value;
			}
		}


		public SqlString StrAddress
		{
			get
			{
				return _strAddress;
			}
			set
			{
				_strAddress = value;
			}
		}
		#endregion
	}
}
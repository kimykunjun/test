///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'tblBranch'
// Generated by LLBLGen v1.21.2003.712 Final on: 2005年12月17日, 20:14:04
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Configuration;

namespace ACMSDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'tblBranch'.
	/// </summary>
	public class TblBranch : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt32		_nMembershipNo, _nLockerGracePeriod;
			private SqlMoney		_mLockerRentalRate1, _mLockerRentalRate2, _mLockerDepositRate;
			private SqlString		_strHeader4,_strHeader5, _strBranchName, _strBranchCode, _strHeader1, _strHeader3, _strHeader2;
		#endregion

		#region LLBLGen Code
		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TblBranch()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrBranchName. May be SqlString.Null</LI>
		///		 <LI>StrHeader1. May be SqlString.Null</LI>
		///		 <LI>StrHeader2. May be SqlString.Null</LI>
		///		 <LI>StrHeader3. May be SqlString.Null</LI>
		///		 <LI>StrHeader4. May be SqlString.Null</LI>
		///		 <LI>MLockerRentalRate1. May be SqlMoney.Null</LI>
		///		 <LI>MLockerRentalRate2. May be SqlMoney.Null</LI>
		///		 <LI>MLockerDepositRate. May be SqlMoney.Null</LI>
		///		 <LI>NMembershipNo. May be SqlInt32.Null</LI>
		///		 <LI>NLockerGracePeriod. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblBranch_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strBranchName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader1", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader1));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader2", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader2));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader3", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader3));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader4", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader4));
				//cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader5", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader5));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmLockerRentalRate1", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mLockerRentalRate1));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmLockerRentalRate2", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mLockerRentalRate2));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmLockerDepositRate", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mLockerDepositRate));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inLockerGracePeriod", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLockerGracePeriod));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblBranch_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrBranchName. May be SqlString.Null</LI>
		///		 <LI>StrHeader1. May be SqlString.Null</LI>
		///		 <LI>StrHeader2. May be SqlString.Null</LI>
		///		 <LI>StrHeader3. May be SqlString.Null</LI>
		///		 <LI>StrHeader4. May be SqlString.Null</LI>
		///		 <LI>MLockerRentalRate1. May be SqlMoney.Null</LI>
		///		 <LI>MLockerRentalRate2. May be SqlMoney.Null</LI>
		///		 <LI>MLockerDepositRate. May be SqlMoney.Null</LI>
		///		 <LI>NMembershipNo. May be SqlInt32.Null</LI>
		///		 <LI>NLockerGracePeriod. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblBranch_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchName", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strBranchName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader1", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader1));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader2", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader2));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader3", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader3));
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrHeader4", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _strHeader4));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmLockerRentalRate1", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mLockerRentalRate1));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmLockerRentalRate2", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mLockerRentalRate2));
				cmdToExecute.Parameters.Add(new SqlParameter("@curmLockerDepositRate", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _mLockerDepositRate));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@inLockerGracePeriod", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nLockerGracePeriod));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblBranch_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblBranch_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblBranch_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        public Boolean CheckSpaTerminal()
        {
            System.Security.Principal.WindowsIdentity userLogin = System.Security.Principal.WindowsIdentity.GetCurrent();
            string connectionString;
            string strBranchCode = "";
            SqlConnection connection;
            connectionString = (string)ConfigurationSettings.AppSettings["Main.ConnectionString"];
            connection = new SqlConnection(connectionString);
            string strSpaBranchCode = ConfigurationSettings.AppSettings["SpaBranch"].ToUpper();
            string[] astrSpaBranchCode = new string[50];
            if (strSpaBranchCode.Contains(","))
                astrSpaBranchCode = strSpaBranchCode.Split(',');
            else
                astrSpaBranchCode[0] = strSpaBranchCode;

            try
            {
                connection.Open();
                SqlDataReader myBranchReader = null;
                SqlCommand myBranchCommand = new SqlCommand("select strBranchCode from tblTerminalUser where strTerminalUserCode = @strTerminalUserCode and nTerminalID = 2 and Status = 1", connection);
                myBranchCommand.Parameters.AddWithValue("@strTerminalUserCode", userLogin.Name);

                myBranchReader = myBranchCommand.ExecuteReader();
                while (myBranchReader.Read())
                {
                    strBranchCode = myBranchReader["strBranchCode"].ToString();
                }
                connection.Close();
                connection.Dispose();

                for (int i = 0; i < astrSpaBranchCode.Length; i++)
                {
                    if (strBranchCode == astrSpaBranchCode[i].ToString())
                        return true;
                }
                return false;
            }
            catch (Exception b)
            {
                return false;
            }
        }


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StrBranchCode</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>StrBranchCode</LI>
		///		 <LI>StrBranchName</LI>
		///		 <LI>StrHeader1</LI>
		///		 <LI>StrHeader2</LI>
		///		 <LI>StrHeader3</LI>
		///		 <LI>StrHeader4</LI>
		///		 <LI>MLockerRentalRate1</LI>
		///		 <LI>MLockerRentalRate2</LI>
		///		 <LI>MLockerDepositRate</LI>
		///		 <LI>NMembershipNo</LI>
		///		 <LI>NLockerGracePeriod</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
        {
            Boolean bSpaTerminal = false;
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblBranch_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblBranch");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            //Rev 6.7.0.0 Check if terminal under spa, check branch and print spa header and footer in receipt
            if (CheckSpaTerminal())
                bSpaTerminal = true;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblBranch_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
                    //Rev 6.7.0.0 Check if terminal under spa, check branch and print spa header and footer in receipt
                    _strBranchCode = (string)toReturn.Rows[0]["strBranchCode"];
                    _strBranchName = toReturn.Rows[0]["strBranchName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strBranchName"];
                    if (bSpaTerminal)
                    {
                        toReturn.Rows[0]["strHeader1"] = "AMORE BOUTIQUE SPA";
                        toReturn.Rows[0]["strFooter1"] = "All Products Once Sold Are Not Refundable or Exchangeable. All Fees Paid Are Non-Refundable And Memberships Are Non-Transferable.Unutilized spa packages/deposits are refundable within 5 working days from the date of purchase.";
                    }
					_strHeader1 = toReturn.Rows[0]["strHeader1"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strHeader1"];
					_strHeader2 = toReturn.Rows[0]["strHeader2"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strHeader2"];
					_strHeader3 = toReturn.Rows[0]["strHeader3"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strHeader3"];
					_strHeader4 = toReturn.Rows[0]["strHeader4"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strHeader4"];
					_strHeader5 = toReturn.Rows[0]["strHeader5"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strHeader5"];
					_mLockerRentalRate1 = toReturn.Rows[0]["mLockerRentalRate1"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mLockerRentalRate1"];
					_mLockerRentalRate2 = toReturn.Rows[0]["mLockerRentalRate2"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mLockerRentalRate2"];
					_mLockerDepositRate = toReturn.Rows[0]["mLockerDepositRate"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["mLockerDepositRate"];
					_nMembershipNo = toReturn.Rows[0]["nMembershipNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMembershipNo"];
					_nLockerGracePeriod = toReturn.Rows[0]["nLockerGracePeriod"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nLockerGracePeriod"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[sp_tblBranch_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblBranch");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'sp_tblBranch_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
		#endregion

		#region Lee Chau Chon Code
		public DataTable SelectAllForLookupEdit()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblBranch_LookupEdit]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblBranch");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblBranch_LookupEdit' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public DataTable IncOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblBranch_IncOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("tblBranch");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblBranch_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_strBranchName = toReturn.Rows[0]["strBranchName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["strBranchName"];
					_nMembershipNo = toReturn.Rows[0]["nMembershipNo"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["nMembershipNo"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::IncOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		public bool UpdateLastMembershipID(string strBranchCode, int nMembershipNo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblBranch_UpdateLastMembershipID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblBranch_UpdateLastMembershipID' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::UpdateLastMembershipID::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

		public bool UpdateBlockMembershipID(string strBranchCode, int nMembershipNo)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_tblBranch_UpdateBlockMembershipID]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sstrBranchCode", SqlDbType.Char, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, strBranchCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@inNumberOfMembershipNo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, nMembershipNo));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_tblBranch_UpdateBlockMembershipID' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TblBranch::UpdateBlockMembershipID::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}
		#endregion

		#region Class Property Declarations
		public SqlString StrBranchCode
		{
			get
			{
				return _strBranchCode;
			}
			set
			{
				SqlString strBranchCodeTmp = (SqlString)value;
				if(strBranchCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("StrBranchCode", "StrBranchCode can't be NULL");
				}
				_strBranchCode = value;
			}
		}


		public SqlString StrBranchName
		{
			get
			{
				return _strBranchName;
			}
			set
			{
				_strBranchName = value;
			}
		}


		public SqlString StrHeader1
		{
			get
			{
				return _strHeader1;
			}
			set
			{
				_strHeader1 = value;
			}
		}


		public SqlString StrHeader2
		{
			get
			{
				return _strHeader2;
			}
			set
			{
				_strHeader2 = value;
			}
		}


		public SqlString StrHeader3
		{
			get
			{
				return _strHeader3;
			}
			set
			{
				_strHeader3 = value;
			}
		}


		public SqlString StrHeader4
		{
			get
			{
				return _strHeader4;
			}
			set
			{
				_strHeader4 = value;
			}
		}


		public SqlMoney MLockerRentalRate1
		{
			get
			{
				return _mLockerRentalRate1;
			}
			set
			{
				_mLockerRentalRate1 = value;
			}
		}


		public SqlMoney MLockerRentalRate2
		{
			get
			{
				return _mLockerRentalRate2;
			}
			set
			{
				_mLockerRentalRate2 = value;
			}
		}


		public SqlMoney MLockerDepositRate
		{
			get
			{
				return _mLockerDepositRate;
			}
			set
			{
				_mLockerDepositRate = value;
			}
		}


		public SqlInt32 NMembershipNo
		{
			get
			{
				return _nMembershipNo;
			}
			set
			{
				_nMembershipNo = value;
			}
		}


		public SqlInt32 NLockerGracePeriod
		{
			get
			{
				return _nLockerGracePeriod;
			}
			set
			{
				_nLockerGracePeriod = value;
			}
		}
		#endregion
	}
}

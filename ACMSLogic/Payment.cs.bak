using System;
using System.Data;
using System.Data.SqlClient;
using ACMSDAL;
using Do = Acms.Core.Domain;

namespace ACMSLogic
{
	/// <summary>
	/// Summary description for Payment.
	/// </summary>
	public class Payment
	{
		private TblReceipt myReceipt = new TblReceipt();
		private DataTable myTable = new DataTable();
		private Do.Employee employee;

		public Payment()
		{
			//
			// TODO: Add constructor logic here
			//
		}

		public DataTable Table
		{
			get {return myTable; }
		}
		
		public void SalesConvertion(int newCategoryID, string strReceiptNo, string remarks)
		{
			ACMSDAL.TblReceipt sqlReceipt = new TblReceipt();
			sqlReceipt.StrReceiptNo = strReceiptNo;
			sqlReceipt.SelectOne();
			sqlReceipt.NCategoryID = newCategoryID;
			sqlReceipt.Update();
		}

		public void ChangeSalesPersonID(int newSalesPersonID, string strReceiptNo)
		{
			ACMSDAL.TblReceipt sqlReceipt = new TblReceipt();
			sqlReceipt.StrReceiptNo = strReceiptNo;
			sqlReceipt.SelectOne();
			sqlReceipt.NSalespersonID = newSalesPersonID;
			sqlReceipt.Update();
		}

		public DataTable GetReceipt(string strMembershipID, int nSalesCategoryID)
		{
		
			myTable = myReceipt.GetReceipt(strMembershipID, nSalesCategoryID);
			DataColumn colDiscountAmt = new DataColumn("DiscountAmt", System.Type.GetType("System.Decimal"));
			//DataColumn colTenderedAmt = new DataColumn("TenderedAmt", System.Type.GetType("System.Decimal"), "mTotalAmount - mOutstandingAmount");
			myTable.Columns.Add(colDiscountAmt);
			//myTable.Columns.Add(colTenderedAmt);

			foreach (DataRow r in myTable.Rows)
			{
				if (r["dDiscountPercent"] != DBNull.Value)
				{
					decimal discountPercent = ACMS.Convert.ToDecimal(r["dDiscountPercent"]);
					decimal netTotal =  GetReceiptNetTotal(r["strReceiptNo"].ToString());
	
					decimal discountAmt = netTotal * discountPercent / 100;
					r["DiscountAmt"] = discountAmt;
				}
				else if (r["dDiscountValue"] != DBNull.Value)
				{
					r["DiscountAmt"] = ACMS.Convert.ToDecimal(r["dDiscountValue"]);
				}
			}

			return myTable;
		}

		public DataTable GetReceipt(string strMembershipID, int nSalesCategoryID,string strReceiptNo)
		{
		
			myTable = myReceipt.GetReceipt(strMembershipID, nSalesCategoryID,strReceiptNo);
			DataColumn colDiscountAmt = new DataColumn("DiscountAmt", System.Type.GetType("System.Decimal"));
			DataColumn colTenderedAmt = new DataColumn("TenderedAmt", System.Type.GetType("System.Decimal"), "mTotalAmount - mOutstandingAmount");
			myTable.Columns.Add(colDiscountAmt);
			myTable.Columns.Add(colTenderedAmt);

			foreach (DataRow r in myTable.Rows)
			{
				if (r["dDiscountPercent"] != DBNull.Value)
				{
					decimal discountPercent = ACMS.Convert.ToDecimal(r["dDiscountPercent"]);
					decimal netTotal =  GetReceiptNetTotal(r["strReceiptNo"].ToString());
	
					decimal discountAmt = netTotal * discountPercent / 100;
					r["DiscountAmt"] = discountAmt;
				}
				else if (r["dDiscountValue"] != DBNull.Value)
				{
					r["DiscountAmt"] = ACMS.Convert.ToDecimal(r["dDiscountValue"]);
				}
			}

			return myTable;
		}

		public DataTable GetReceipt(string strMembershipID)
		{
			myTable = myReceipt.GetReceipt(strMembershipID);
			DataColumn colDiscountAmt = new DataColumn("DiscountAmt", System.Type.GetType("System.Decimal"));
			DataColumn colTenderedAmt = new DataColumn("TenderedAmt", System.Type.GetType("System.Decimal"), "mTotalAmount - mOutstandingAmount");
			myTable.Columns.Add(colDiscountAmt);
			myTable.Columns.Add(colTenderedAmt);

			foreach (DataRow r in myTable.Rows)
			{
				if (r["dDiscountPercent"] != DBNull.Value)
				{
					decimal discountPercent = ACMS.Convert.ToDecimal(r["dDiscountPercent"]);
					decimal netTotal =  GetReceiptNetTotal(r["strReceiptNo"].ToString());
	
					decimal discountAmt = netTotal * discountPercent / 100;
					r["DiscountAmt"] = discountAmt;
				}
				else if (r["dDiscountValue"] != DBNull.Value)
				{
					r["DiscountAmt"] = ACMS.Convert.ToDecimal(r["dDiscountValue"]);
				}
			}

			return myTable;
		}

		public DataTable GetOutstandingReceipt(string strMembershipID)
		{
			DataTable table = myReceipt.GetOutStandingReceipt(strMembershipID);
			DataColumn colDiscountAmt = new DataColumn("DiscountAmt", System.Type.GetType("System.Decimal"));
			DataColumn colTenderedAmt = new DataColumn("TenderedAmt", System.Type.GetType("System.Decimal"), "mTotalAmount - mOutstandingAmount");
			table.Columns.Add(colDiscountAmt);
			table.Columns.Add(colTenderedAmt);

			foreach (DataRow r in table.Rows)
			{
				if (r["dDiscountPercent"] != DBNull.Value)
				{
					decimal discountPercent = ACMS.Convert.ToDecimal(r["dDiscountPercent"]);
					decimal netTotal = GetReceiptNetTotal(r["strReceiptNo"].ToString());
	
					decimal discountAmt = netTotal * discountPercent / 100;
					r["DiscountAmt"] = discountAmt;
				}
				else if (r["dDiscountValue"] != DBNull.Value)
				{
					r["DiscountAmt"] = ACMS.Convert.ToDecimal(r["dDiscountValue"]);
				}
			}

			return table;
		}
		
		public DataTable GetReceiptPayment(string strMembershipID, int nSalesCategoryID)
		{
			TblReceiptPayment receiptPayment = new TblReceiptPayment();
			DataTable table = receiptPayment.GetReceiptPayment(strMembershipID, nSalesCategoryID);
			return table;
		}

		public DataTable GetReceiptPayment(string strReceiptNo)
		{
			TblReceiptPayment receiptPayment = new TblReceiptPayment();
			receiptPayment.StrReceiptNo = strReceiptNo;
			DataTable table = receiptPayment.SelectAllWstrReceiptNoLogic();
			return table;
		}


		/// <summary>
		/// 2.2.4.2. View Receipt Details
		/// </summary>
		/// <param name="strReceiptNo"></param>
		/// <returns></returns>
		public DataTable GetReceiptEntries(string strReceiptNo)
		{
			TblReceiptEntries receiptEntries = new TblReceiptEntries();
			receiptEntries.StrReceiptNo = strReceiptNo;
			DataTable table = receiptEntries.SelectAllWstrReceiptNoLogic();
			return table;
		}
	
		private decimal GetReceiptNetTotal(string strReceiptNo)
		{
			TblReceiptEntries receiptEntries = new TblReceiptEntries();
			DataTable table = receiptEntries.LoadData("Select Sum (mSubTotal) as mSubTotal From tblReceiptEntries where strReceiptNo = @strReceiptNo group by strReceiptNo", new string[] {"@strReceiptNo"}, new object[] {strReceiptNo});
			decimal netTotal = 0;
			if (table.Rows.Count > 0)
				netTotal = ACMS.Convert.ToDecimal(table.Rows[0]["mSubTotal"]);
			
			return netTotal;
		}
		
		public void DeleteFreeMemberPackage(string strReceiptNo, ConnectionProvider connProvider)
		{
			ActionTakeWhenVoidReceiptForCategory_1_3_4_5_6_8_9_14_23(strReceiptNo, connProvider);
		}

		public void VoidReceipt(string strReceiptNo, bool VoidPre)
		{
			ACMSDAL.ConnectionProvider connProvider = new ConnectionProvider();
			
			try
			{
				// Check Access Right here
				TblReceipt receipt = new TblReceipt();
				TblReceiptFreebie sqlReceiptFreebie = new TblReceiptFreebie();	
				TblRewardsTransaction mRewardTransaction = new TblRewardsTransaction();
				
				mRewardTransaction.MainConnectionProvider = connProvider;
				receipt.MainConnectionProvider = connProvider;
				sqlReceiptFreebie.MainConnectionProvider = connProvider;
				
				connProvider.OpenConnection();
				connProvider.BeginTransaction("VoidReceipt");

				receipt.StrReceiptNo = strReceiptNo;
				receipt.SelectOne();

				int nCategoryID = receipt.NCategoryID.Value;
				string strBranchCode = receipt.StrBranchCode.Value;
				
			
				if (receipt.DtDate.Value != System.DateTime.Today && VoidPre == false)
					throw new Exception("Not allow to void previous data receipt. ");

				if (strBranchCode != User.BranchCode)
					throw new Exception("No allow to void other's branches' receipt. ");
				
				receipt.FVoid = System.Data.SqlTypes.SqlBoolean.True;
				receipt.Update();

				#region ====== Added By Albert ======
				/*
				 * To remove reward transaction.
				 */
				mRewardTransaction.StrReferenceNo = strReceiptNo;
				mRewardTransaction.SelectAllWReferenceNo();
				mRewardTransaction.NTypeID = 3;
				mRewardTransaction.Update();
				#endregion

				// rollback the freebies and free package
				TblProductInventory proInven = new TblProductInventory();
				proInven.MainConnectionProvider = connProvider;

				sqlReceiptFreebie.StrReceiptNo = strReceiptNo;
				DataTable receiptFreebieTable = sqlReceiptFreebie.SelectAllWstrReceiptNoLogic();

				string strItemCode = "";
				
				foreach (DataRow row in receiptFreebieTable.Rows)
				{
					strItemCode = row["strItemCode"].ToString(); //strItemCode = strProductcode
					proInven.IncreaseQuantity(strItemCode, User.BranchCode, 1);
				}
				
				// i no need to rollback the memberpackage here .. bcoz will handle in below
				// Method DeleteFreeMemberPackag will handle it.

				//end rollback 

				if (nCategoryID == 1 || nCategoryID == 3 || nCategoryID == 4 || nCategoryID == 5 ||
					nCategoryID == 6 || nCategoryID == 8 || nCategoryID == 9 || nCategoryID == 14 || nCategoryID == 23)
				{
					ActionTakeWhenVoidReceiptForCategory_1_3_4_5_6_8_9_14_23(strReceiptNo, connProvider);
				}
				else if (nCategoryID == 2)
				{
					//Fitness GIRO
					ActionTakeWhenVoidReceiptForCategory_2(strReceiptNo, connProvider);
				}
				else if (nCategoryID == 7)
				{
					// Spa Credit Account
					ActionTakeWhenVoidReceiptForCategory_7(strReceiptNo, connProvider);
				}
				else 
				{
					DeleteFreeMemberPackage(strReceiptNo, connProvider);
					
					if (nCategoryID == 11 || nCategoryID == 12)
					{
						ActionTakeWhenVoidReceiptForCategory_11_12(strReceiptNo, connProvider);
					}
					else if (nCategoryID == 21)
					{
						// mineral water
					}
					else if (nCategoryID == 15)
					{
						//Locker Rental
					}
					else if (nCategoryID == 0)
					{
						// Pay Outstanding
						ActionTakeWhenVoidReceiptForCategory_0(receipt, connProvider);
					}
					else if (nCategoryID == 18)
					{
						ActionTakeWhenVoidReceiptForCategory_18(strReceiptNo, connProvider);
					}
					else if (nCategoryID == 19)
					{
						ActionTakeWhenVoidReceiptForCategory_19(strReceiptNo, connProvider);
					}
						#region Un-support voiding
					/*
					else if (nCategoryID == 17)
					{
						//throw new Exception("Forget card's receipt is not allow to void.");
						//do notthing. Just void the receipt
					}
					else if (nCategoryID == 10)
					{
						//throw new Exception("Upgrade Package's receipt is not allow to void.");
						// do notthing. Just void the receipt.
					}
					else if (nCategoryID == 20)
					{
						//Replace Membership Card
						//throw new Exception("Replace member card's receipt is not allow to void.");
						//do notthing, just void the receipt
					}
					*/
						#endregion

				}
			
				connProvider.CommitTransaction();
			}
			catch (Exception ex)
			{
				connProvider.RollbackTransaction("VoidReceipt");
				throw ex;
			}
			finally
			{
				if (connProvider.CurrentTransaction != null)
					connProvider.CurrentTransaction.Dispose();
				if (connProvider.DBConnection != null)
				{
					if (connProvider.DBConnection.State == ConnectionState.Open)
						connProvider.DBConnection.Close();
					
				}
			}
		}

        public void Refund(string strReceiptNo, string strChequeNo, double mRefundAmount)
        {
            ACMSDAL.ConnectionProvider connProvider = new ConnectionProvider();

            try
            {
                // Check Access Right here
                TblReceipt receipt = new TblReceipt();                                
                receipt.MainConnectionProvider = connProvider;

                connProvider.OpenConnection();
                connProvider.BeginTransaction("Refund");

                receipt.StrReceiptNo = strReceiptNo;
                receipt.SelectOne();

                receipt.FRefund = System.Data.SqlTypes.SqlBoolean.True;
                receipt.StrChequeNo = strChequeNo;
                receipt.MRefundAmount = ACMS.Convert.ToDecimal(mRefundAmount);
                receipt.NChequeUpdateBy = User.EmployeeID;
                receipt.UpdateChequeDetails();

                connProvider.CommitTransaction();
            }
            catch (Exception ex)
            {
                connProvider.RollbackTransaction("Refund");
                throw ex;
            }
            finally
            {
                if (connProvider.CurrentTransaction != null)
                    connProvider.CurrentTransaction.Dispose();
                if (connProvider.DBConnection != null)
                {
                    if (connProvider.DBConnection.State == ConnectionState.Open)
                        connProvider.DBConnection.Close();

                }
            }
        }	
		
		private void ActionTakeWhenVoidReceiptForCategory_1_3_4_5_6_8_9_14_23(string strReceiptNo, 
			ConnectionProvider connProvider)
		{
			//1	Fitness Package
			//3	PT Package
			//4	Spa Single Treatment
			//5	Spa Package
			//6	IPL Package
			//8	Fitness Combined Package
			//9	Spa Combined Package

			TblMemberPackage memberPackage = new TblMemberPackage();
			memberPackage.MainConnectionProvider = connProvider;
			memberPackage.StrReceiptNo = strReceiptNo;
			DataTable table = memberPackage.SelectAllWstrReceiptNo(strReceiptNo);
			
			TblClassAttendance sqlClassAttendance = new TblClassAttendance();
			TblServiceSession sqlServiceSession = new TblServiceSession();

			sqlClassAttendance.MainConnectionProvider = connProvider;
			sqlServiceSession.MainConnectionProvider = connProvider;
			
			if (table.Rows.Count > 0)
			{
				int nPackageID = 0;
				foreach (DataRow r in table.Rows)
				{

					nPackageID = ACMS.Convert.ToInt32(r["nPackageID"]);
					sqlClassAttendance.NPackageID = nPackageID;
					DataTable classAttTable = sqlClassAttendance.SelectAllWnPackageIDLogic();
					if (classAttTable.Rows.Count > 0)
						throw new Exception("The item(s) has been used, you are not allow to void the receipt");
					else 
					{
						sqlServiceSession.NPackageID = nPackageID;
						classAttTable = sqlServiceSession.SelectAllWnPackageIDLogic();
						if (classAttTable.Rows.Count > 0)
							throw new Exception("The item(s) has been used, you are not allow to void the receipt");
					}

					r["nEmployeeID"] = User.EmployeeID;
					r["nStatusID"] = 2;
					r["strRemarks"] = "Voided Receipt";
					r["dtLastEdit"] = System.DateTime.Now;
				}
				memberPackage.SaveData(table);
			}
		}

		private void ActionTakeWhenVoidReceiptForCategory_2(string strReceiptNo, ConnectionProvider connProvider)
		{
			TblMemberPackage memberPackage = new TblMemberPackage();
			TblGIRO giro = new TblGIRO();
			giro.MainConnectionProvider = connProvider;
			memberPackage.MainConnectionProvider = connProvider;

			memberPackage.StrReceiptNo = strReceiptNo;
			DataTable table = memberPackage.SelectAllWstrReceiptNo(strReceiptNo);

			TblClassAttendance sqlClassAttendance = new TblClassAttendance();
			TblServiceSession sqlServiceSession = new TblServiceSession();

			sqlClassAttendance.MainConnectionProvider = connProvider;
			sqlServiceSession.MainConnectionProvider = connProvider;

			if (table.Rows.Count > 0)
			{
				int nPackageID = 0;
				foreach (DataRow r in table.Rows)
				{
					nPackageID = ACMS.Convert.ToInt32(r["nPackageID"]);
					sqlClassAttendance.NPackageID = nPackageID;
					DataTable classAttTable = sqlClassAttendance.SelectAllWnPackageIDLogic();
					if (classAttTable.Rows.Count > 0)
						throw new Exception("The item(s) has been used, you are not allow to void the receipt");
					else 
					{
						sqlServiceSession.NPackageID = nPackageID;
						classAttTable = sqlServiceSession.SelectAllWnPackageIDLogic();
						if (classAttTable.Rows.Count > 0)
							throw new Exception("The item(s) has been used, you are not allow to void the receipt");
					}

					r["nEmployeeID"] = User.EmployeeID;
					r["nStatusID"] = 2;
					r["strRemarks"] = "Voided Receipt";
					r["dtLastEdit"] = System.DateTime.Now;
				
					if (r["nGIRORefID"] != DBNull.Value)
					{
						int nGiroRefID = ACMS.Convert.ToInt32(r["nGIRORefID"]);
					
						giro.NGIRORefID = nGiroRefID;
						giro.SelectOne();
						giro.NEmployeeID = User.EmployeeID;
						giro.NStatusID = 4;
						giro.StrRemarks =  "Voided Receipt" + " - " + System.DateTime.Now.ToString("dd/MM/yyyy");			
						giro.Update();
					}
				}
				
				
				memberPackage.SaveData(table);
			}
		}

		private void ActionTakeWhenVoidReceiptForCategory_7(string strReceiptNo, ConnectionProvider connProvider)
		{
			TblMemberCreditPackage memberCreditPackage = new TblMemberCreditPackage();
			memberCreditPackage.MainConnectionProvider = connProvider;
			DataTable table = memberCreditPackage.SelectAllWstrReceiptNo(strReceiptNo);
				
			TblMemberPackage sqlMemberPackage = new TblMemberPackage();
			sqlMemberPackage.MainConnectionProvider = connProvider;


			if (table.Rows.Count > 0)
			{
				int nCreditPackageID = 0;

				foreach (DataRow r in table.Rows)
				{
					nCreditPackageID = ACMS.Convert.ToInt32(r["nCreditPackageID"]);
					sqlMemberPackage.NCreditPackageID = nCreditPackageID;
					DataTable memberPackagetable = sqlMemberPackage.SelectAllWnCreditPackageIDLogic();

					if (memberPackagetable.Rows.Count > 0)
						throw new Exception("The item(s) has been used, you are not allow to void the receipt");

					r["nEmployeeID"] = User.EmployeeID;
					r["nStatusID"] = 2;
					r["strRemarks"] = "Voided Receipt";
					r["dtLastEditDate"] = System.DateTime.Now;
				}
				memberCreditPackage.SaveData(table);
			}

				sqlMemberPackage.StrReceiptNo = strReceiptNo;
				DataTable tblMemPackage = sqlMemberPackage.SelectAllWstrReceiptNo(strReceiptNo);
			
				TblClassAttendance sqlClassAttendance = new TblClassAttendance();
				TblServiceSession sqlServiceSession = new TblServiceSession();

				sqlClassAttendance.MainConnectionProvider = connProvider;
				sqlServiceSession.MainConnectionProvider = connProvider;
			
				if (tblMemPackage.Rows.Count > 0)
				{
					int nPackageID = 0;
					foreach (DataRow row in tblMemPackage.Rows)
					{

						nPackageID = ACMS.Convert.ToInt32(row["nPackageID"]);
						sqlClassAttendance.NPackageID = nPackageID;
						DataTable classAttTable = sqlClassAttendance.SelectAllWnPackageIDLogic();
						if (classAttTable.Rows.Count > 0)
							throw new Exception("The item(s) has been used, you are not allow to void the receipt");
						else 
						{
							sqlServiceSession.NPackageID = nPackageID;
							classAttTable = sqlServiceSession.SelectAllWnPackageIDLogic();
							if (classAttTable.Rows.Count > 0)
								throw new Exception("The item(s) has been used, you are not allow to void the receipt");
						}

						row["nEmployeeID"] = User.EmployeeID;
						row["nStatusID"] = 2;
						row["strRemarks"] = "Voided Receipt";
						row["dtLastEdit"] = System.DateTime.Now;
					}
					sqlMemberPackage.SaveData(tblMemPackage);
				
			}
		}

		private void ActionTakeWhenVoidReceiptForCategory_11_12(string strReceiptNo, ConnectionProvider connProvider)
		{
			//string cmdText = "Select sum (nQuantity) as Qty, strCode From tblReceiptEntries where strReceiptNo = @strReceiptNo group by strReceiptNo, strCode";
			TblReceiptEntries receiptEntries = new TblReceiptEntries();
			receiptEntries.MainConnectionProvider = connProvider;
			DataTable table = receiptEntries.GetQty_StrCodeBaseStrReceiptNo(strReceiptNo);
	
			if (table.Rows.Count > 0)
			{
				TblProductInventory productInven = new TblProductInventory();
				productInven.MainConnectionProvider = connProvider;

				foreach (DataRow r in table.Rows)
				{
					if (CheckIsRegistrationRow(r)) return;

					if (r["strCode"].ToString().Length > 0)
					{
						string strCode = r["strCode"].ToString();
						int totalQtyToAddup = ACMS.Convert.ToInt32(r["Qty"]);
						productInven.IncreaseQuantity(strCode, User.BranchCode, totalQtyToAddup);
					}
				}
			}
		}

		private void ActionTakeWhenVoidReceiptForCategory_15(string strReceiptNo, ConnectionProvider connProvider)
		{
			TblLocker locker = new TblLocker();
			TblMember member = new TblMember();
			
			DataTable table = locker.SelectAllWstrReceiptNo(strReceiptNo);
			
			if (table != null && table.Rows.Count > 0)
			{
				member.MainConnectionProvider = connProvider;

				foreach (DataRow r in table.Rows)
				{
					r["nStatusID"] = "0";
					r["strReceiptNo"] = DBNull.Value;
					r["dtExpiry"] = DBNull.Value;
					r["strRemarks"] = DBNull.Value;

					string memberID = r["strMembershipID"].ToString();
					r["strMembershipID"] = DBNull.Value;
					
					member.StrMembershipID = memberID;
					member.SelectOne();
					member.FLockerDeposit = System.Data.SqlTypes.SqlBoolean.True;
					
					member.Update();
				}

				locker.MainConnectionProvider = connProvider;
				locker.SaveData(table);
			}
		}	

		private void ActionTakeWhenVoidReceiptForCategory_0(TblReceipt receipt, ConnectionProvider connProvider)
		{
			if (receipt.StrParentReceiptNo.IsNull || receipt.StrParentReceiptNo.Value.Trim().Length == 0)
			{
				throw new Exception("This is not an outstanding receipt because there is no parent receipt for the given receipt no.");
			}
			else if (receipt.StrChildReceiptNo.Value.Trim().Length > 0)
			{
				throw new Exception("The receipt given has child receipt, please void child receipt first before void this receipt");
			}
			else
			{
				decimal mTotalAmount = receipt.MTotalAmount.Value;
				
				TblReceipt parentReceipt = new TblReceipt();
				parentReceipt.StrReceiptNo = receipt.StrParentReceiptNo.Value;
				parentReceipt.SelectOne();
				
				parentReceipt.StrChildReceiptNo = System.Data.SqlTypes.SqlString.Null;
				parentReceipt.MOutstandingAmount = ACMS.Convert.ToDecimal(receipt.MTotalAmount);
				
				parentReceipt.MainConnectionProvider = connProvider;
				parentReceipt.Update();
			}
		}
		
		private void ActionTakeWhenVoidReceiptForCategory_18(string strReceiptNo, ConnectionProvider connProvider)
		{
			//Top-up Spa Credit
			// need to find back the member credit package that been upgraded.
			TblMemberCreditPackage memberCreditPackage = new TblMemberCreditPackage();
			memberCreditPackage.MainConnectionProvider = connProvider;

			TblReceiptEntries sqlReceiptEntiries = new TblReceiptEntries();
			sqlReceiptEntiries.MainConnectionProvider = connProvider;

			sqlReceiptEntiries.StrReceiptNo= strReceiptNo;
			DataTable tableReceiptEntries = sqlReceiptEntiries.SelectAllWstrReceiptNoLogic();

			if (tableReceiptEntries.Rows.Count > 0)
			{
				// Get back the receiptEntries.
				// refer to Pos, strCode=nCreditPackageID,  mSubTotal = topupAmount

				foreach (DataRow r in tableReceiptEntries.Rows)
				{
					if (!CheckIsRegistrationRow(r))
					{
						int nCrdPackageID = ACMS.Convert.ToInt32(r["strCode"]);
						decimal topupAmt = ACMS.Convert.ToInt32(r["mSubTotal"]);
						memberCreditPackage.NCreditPackageID = nCrdPackageID;

						if (memberCreditPackage.SelectOne().Rows.Count > 0)
						{
							memberCreditPackage.MTopupAmount = ACMS.Convert.ToInt32(memberCreditPackage.MTopupAmount) - topupAmt;
							memberCreditPackage.Update();
						}
					}
				}
			}
		}
		
		private bool CheckIsRegistrationRow(DataRow row)
		{
			return row["strCode"].ToString().ToUpper() == "Reg";
		}

		private void ActionTakeWhenVoidReceiptForCategory_19(string strReceiptNo, ConnectionProvider connProvider)
		{
			//Top-up Single Treatment
			// strServiceSession = strCode
			// nSessionID = strReferenceCode
			// find out the service Session and void it..
			TblServiceSession sqlServiceSession = new TblServiceSession();
			sqlServiceSession.MainConnectionProvider = connProvider;

			TblReceiptEntries sqlReceiptEntries = new TblReceiptEntries();
			sqlReceiptEntries.MainConnectionProvider = connProvider;
			
			sqlReceiptEntries.StrReceiptNo = strReceiptNo;
			DataTable tableReceiptEntries = sqlReceiptEntries.SelectAllWstrReceiptNoLogic();

			if (tableReceiptEntries.Rows.Count > 0)
			{
				int nSessionID = 0;
				foreach (DataRow r in tableReceiptEntries.Rows)
				{
					if (!CheckIsRegistrationRow(r))
					{
						nSessionID = ACMS.Convert.ToInt32(r["strReferenceNo"]);
						sqlServiceSession.NSessionID = nSessionID;
						sqlServiceSession.SelectOne();
					
						sqlServiceSession.StrRemarks = "Void Receipt : " + strReceiptNo;
						sqlServiceSession.NStatusID = 1;
						sqlServiceSession.Update();
					}
				}
			}
		}

		private void ActionTakeWhenVoidReceiptForCategory_21(string strReceiptNo, ConnectionProvider connProvider)
		{
			//Mineral Water			
		}

		/*private void ActionTakeWhenVoidReceiptForCategory_20(TblReceipt receipt, ConnectionProvider connProvider)
		{
			string strMembershipID = receipt.StrMembershipID.Value;

			TblCardRequest cardRequest = new TblCardRequest();
			cardRequest.StrMembershipID = strMembershipID;
			DataTable table = cardRequest.SelectAllWstrMembershipIDLogic();

			if (table != null && table.Rows.Count > 0)
			{
				DataView view = table.DefaultView;
				view.Sort = "nRequestID DESC";
				view[0]["nStatusID"] = 6;
				view[0]["nEmployeeID"] = User.EmployeeID;
				view[0]["dtLastEditDate"] = DateTime.Now;
				
				cardRequest.MainConnectionProvider = connProvider;
				cardRequest.SaveData(table);
			}
		}
		*/
		
		/*private void ActionTakeWhenVoidReceiptForCategory_17(string strReceiptNo, ConnectionProvider connProvider)
		{
			TblReceiptEntries receiptEntries = new TblReceiptEntries();
			receiptEntries.StrReceiptNo = strReceiptNo;
			DataTable table = receiptEntries.SelectAllWstrReceiptNoLogic();

			if (table != null && table.Rows.Count > 0)
			{
				TblClassAttendance classAttendance = new TblClassAttendance();
				classAttendance.MainConnectionProvider = connProvider;
				
				foreach (DataRow r in table.Rows)
				{
					int qty = ACMS.Convert.ToInt32(r["nQuantity"]);
					if (qty == 0) continue;

					try
					{
						int nAttendanceID = Int32.Parse(r["StrCode"].ToString());
						classAttendance.NAttendanceID = nAttendanceID;
						classAttendance.SelectOne();
						
						classAttendance.DtLastEditDate = DateTime.Now;
						classAttendance.NEmployeeID = User.EmployeeID;
						if (qty > 0)
						{
							classAttendance.FRefunded = System.Data.SqlTypes.SqlBoolean.True;
							classAttendance.NStatusID = 5;
						}
						else 
						{
							classAttendance.FRefunded = System.Data.SqlTypes.SqlBoolean.False;
						}
						classAttendance.Update();
					}
					catch (InvalidCastException)
					{
						throw new Exception("Invalid Category ID/Class Attendance ID when try to void a 'Forget Card' Receipt"); 
					}
				}
			}
		}
		*/
	}
}

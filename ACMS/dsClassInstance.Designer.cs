//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ACMS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsClassInstance")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsClassInstance : global::System.Data.DataSet {
        
        private tblClassInstanceDataTable tabletblClassInstance;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsClassInstance() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsClassInstance(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblClassInstance"] != null)) {
                    base.Tables.Add(new tblClassInstanceDataTable(ds.Tables["tblClassInstance"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblClassInstanceDataTable tblClassInstance {
            get {
                return this.tabletblClassInstance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsClassInstance cln = ((dsClassInstance)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblClassInstance"] != null)) {
                    base.Tables.Add(new tblClassInstanceDataTable(ds.Tables["tblClassInstance"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblClassInstance = ((tblClassInstanceDataTable)(base.Tables["tblClassInstance"]));
            if ((initTable == true)) {
                if ((this.tabletblClassInstance != null)) {
                    this.tabletblClassInstance.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsClassInstance";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsClassInstance.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblClassInstance = new tblClassInstanceDataTable();
            base.Tables.Add(this.tabletblClassInstance);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblClassInstance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsClassInstance ds = new dsClassInstance();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblClassInstanceRowChangeEventHandler(object sender, tblClassInstanceRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblClassInstanceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnnClassInstanceID;
            
            private global::System.Data.DataColumn columndtDate;
            
            private global::System.Data.DataColumn columndtStartTime;
            
            private global::System.Data.DataColumn columnstrClassCode;
            
            private global::System.Data.DataColumn columnstrBranchCode;
            
            private global::System.Data.DataColumn columnnPermanentInstructorID;
            
            private global::System.Data.DataColumn columnnReplacementInstructorID;
            
            private global::System.Data.DataColumn columnnActualInstructorID;
            
            private global::System.Data.DataColumn columnAttendance;
            
            private global::System.Data.DataColumn columnstrEmployeeName;
            
            private global::System.Data.DataColumn columnnClassScheduleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceDataTable() {
                this.TableName = "tblClassInstance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblClassInstanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblClassInstanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nClassInstanceIDColumn {
                get {
                    return this.columnnClassInstanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dtDateColumn {
                get {
                    return this.columndtDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dtStartTimeColumn {
                get {
                    return this.columndtStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn strClassCodeColumn {
                get {
                    return this.columnstrClassCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn strBranchCodeColumn {
                get {
                    return this.columnstrBranchCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nPermanentInstructorIDColumn {
                get {
                    return this.columnnPermanentInstructorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nReplacementInstructorIDColumn {
                get {
                    return this.columnnReplacementInstructorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nActualInstructorIDColumn {
                get {
                    return this.columnnActualInstructorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttendanceColumn {
                get {
                    return this.columnAttendance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn strEmployeeNameColumn {
                get {
                    return this.columnstrEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nClassScheduleIDColumn {
                get {
                    return this.columnnClassScheduleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceRow this[int index] {
                get {
                    return ((tblClassInstanceRow)(this.Rows[index]));
                }
            }
            
            public event tblClassInstanceRowChangeEventHandler tblClassInstanceRowChanging;
            
            public event tblClassInstanceRowChangeEventHandler tblClassInstanceRowChanged;
            
            public event tblClassInstanceRowChangeEventHandler tblClassInstanceRowDeleting;
            
            public event tblClassInstanceRowChangeEventHandler tblClassInstanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblClassInstanceRow(tblClassInstanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceRow AddtblClassInstanceRow(System.DateTime dtDate, System.DateTime dtStartTime, string strClassCode, string strBranchCode, int nPermanentInstructorID, int nReplacementInstructorID, int nActualInstructorID, int Attendance, string strEmployeeName, int nClassScheduleID) {
                tblClassInstanceRow rowtblClassInstanceRow = ((tblClassInstanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        dtDate,
                        dtStartTime,
                        strClassCode,
                        strBranchCode,
                        nPermanentInstructorID,
                        nReplacementInstructorID,
                        nActualInstructorID,
                        Attendance,
                        strEmployeeName,
                        nClassScheduleID};
                rowtblClassInstanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblClassInstanceRow);
                return rowtblClassInstanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceRow FindBynClassInstanceID(int nClassInstanceID) {
                return ((tblClassInstanceRow)(this.Rows.Find(new object[] {
                            nClassInstanceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblClassInstanceDataTable cln = ((tblClassInstanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblClassInstanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnClassInstanceID = base.Columns["nClassInstanceID"];
                this.columndtDate = base.Columns["dtDate"];
                this.columndtStartTime = base.Columns["dtStartTime"];
                this.columnstrClassCode = base.Columns["strClassCode"];
                this.columnstrBranchCode = base.Columns["strBranchCode"];
                this.columnnPermanentInstructorID = base.Columns["nPermanentInstructorID"];
                this.columnnReplacementInstructorID = base.Columns["nReplacementInstructorID"];
                this.columnnActualInstructorID = base.Columns["nActualInstructorID"];
                this.columnAttendance = base.Columns["Attendance"];
                this.columnstrEmployeeName = base.Columns["strEmployeeName"];
                this.columnnClassScheduleID = base.Columns["nClassScheduleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnClassInstanceID = new global::System.Data.DataColumn("nClassInstanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnClassInstanceID);
                this.columndtDate = new global::System.Data.DataColumn("dtDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndtDate);
                this.columndtStartTime = new global::System.Data.DataColumn("dtStartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndtStartTime);
                this.columnstrClassCode = new global::System.Data.DataColumn("strClassCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrClassCode);
                this.columnstrBranchCode = new global::System.Data.DataColumn("strBranchCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrBranchCode);
                this.columnnPermanentInstructorID = new global::System.Data.DataColumn("nPermanentInstructorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnPermanentInstructorID);
                this.columnnReplacementInstructorID = new global::System.Data.DataColumn("nReplacementInstructorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnReplacementInstructorID);
                this.columnnActualInstructorID = new global::System.Data.DataColumn("nActualInstructorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnActualInstructorID);
                this.columnAttendance = new global::System.Data.DataColumn("Attendance", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttendance);
                this.columnstrEmployeeName = new global::System.Data.DataColumn("strEmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstrEmployeeName);
                this.columnnClassScheduleID = new global::System.Data.DataColumn("nClassScheduleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnClassScheduleID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnnClassInstanceID}, true));
                this.columnnClassInstanceID.AutoIncrement = true;
                this.columnnClassInstanceID.AllowDBNull = false;
                this.columnnClassInstanceID.ReadOnly = true;
                this.columnnClassInstanceID.Unique = true;
                this.columnstrClassCode.AllowDBNull = false;
                this.columnstrClassCode.MaxLength = 50;
                this.columnstrBranchCode.AllowDBNull = false;
                this.columnstrBranchCode.MaxLength = 2;
                this.columnnPermanentInstructorID.AllowDBNull = false;
                this.columnAttendance.ReadOnly = true;
                this.columnstrEmployeeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceRow NewtblClassInstanceRow() {
                return ((tblClassInstanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblClassInstanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblClassInstanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblClassInstanceRowChanged != null)) {
                    this.tblClassInstanceRowChanged(this, new tblClassInstanceRowChangeEvent(((tblClassInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblClassInstanceRowChanging != null)) {
                    this.tblClassInstanceRowChanging(this, new tblClassInstanceRowChangeEvent(((tblClassInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblClassInstanceRowDeleted != null)) {
                    this.tblClassInstanceRowDeleted(this, new tblClassInstanceRowChangeEvent(((tblClassInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblClassInstanceRowDeleting != null)) {
                    this.tblClassInstanceRowDeleting(this, new tblClassInstanceRowChangeEvent(((tblClassInstanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblClassInstanceRow(tblClassInstanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsClassInstance ds = new dsClassInstance();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblClassInstanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblClassInstanceRow : global::System.Data.DataRow {
            
            private tblClassInstanceDataTable tabletblClassInstance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblClassInstanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblClassInstance = ((tblClassInstanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nClassInstanceID {
                get {
                    return ((int)(this[this.tabletblClassInstance.nClassInstanceIDColumn]));
                }
                set {
                    this[this.tabletblClassInstance.nClassInstanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dtDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblClassInstance.dtDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dtDate\' in table \'tblClassInstance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.dtDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dtStartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblClassInstance.dtStartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dtStartTime\' in table \'tblClassInstance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.dtStartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string strClassCode {
                get {
                    return ((string)(this[this.tabletblClassInstance.strClassCodeColumn]));
                }
                set {
                    this[this.tabletblClassInstance.strClassCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string strBranchCode {
                get {
                    return ((string)(this[this.tabletblClassInstance.strBranchCodeColumn]));
                }
                set {
                    this[this.tabletblClassInstance.strBranchCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nPermanentInstructorID {
                get {
                    return ((int)(this[this.tabletblClassInstance.nPermanentInstructorIDColumn]));
                }
                set {
                    this[this.tabletblClassInstance.nPermanentInstructorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nReplacementInstructorID {
                get {
                    try {
                        return ((int)(this[this.tabletblClassInstance.nReplacementInstructorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nReplacementInstructorID\' in table \'tblClassInstance\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.nReplacementInstructorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nActualInstructorID {
                get {
                    try {
                        return ((int)(this[this.tabletblClassInstance.nActualInstructorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nActualInstructorID\' in table \'tblClassInstance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.nActualInstructorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Attendance {
                get {
                    try {
                        return ((int)(this[this.tabletblClassInstance.AttendanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Attendance\' in table \'tblClassInstance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.AttendanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string strEmployeeName {
                get {
                    try {
                        return ((string)(this[this.tabletblClassInstance.strEmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'strEmployeeName\' in table \'tblClassInstance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.strEmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nClassScheduleID {
                get {
                    try {
                        return ((int)(this[this.tabletblClassInstance.nClassScheduleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nClassScheduleID\' in table \'tblClassInstance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblClassInstance.nClassScheduleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdtDateNull() {
                return this.IsNull(this.tabletblClassInstance.dtDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdtDateNull() {
                this[this.tabletblClassInstance.dtDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdtStartTimeNull() {
                return this.IsNull(this.tabletblClassInstance.dtStartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdtStartTimeNull() {
                this[this.tabletblClassInstance.dtStartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnReplacementInstructorIDNull() {
                return this.IsNull(this.tabletblClassInstance.nReplacementInstructorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnReplacementInstructorIDNull() {
                this[this.tabletblClassInstance.nReplacementInstructorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnActualInstructorIDNull() {
                return this.IsNull(this.tabletblClassInstance.nActualInstructorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnActualInstructorIDNull() {
                this[this.tabletblClassInstance.nActualInstructorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttendanceNull() {
                return this.IsNull(this.tabletblClassInstance.AttendanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttendanceNull() {
                this[this.tabletblClassInstance.AttendanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstrEmployeeNameNull() {
                return this.IsNull(this.tabletblClassInstance.strEmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstrEmployeeNameNull() {
                this[this.tabletblClassInstance.strEmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnClassScheduleIDNull() {
                return this.IsNull(this.tabletblClassInstance.nClassScheduleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnClassScheduleIDNull() {
                this[this.tabletblClassInstance.nClassScheduleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblClassInstanceRowChangeEvent : global::System.EventArgs {
            
            private tblClassInstanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceRowChangeEvent(tblClassInstanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblClassInstanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ACMS.dsClassInstanceTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tblClassInstanceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tblClassInstanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tblClassInstance";
            tableMapping.ColumnMappings.Add("nClassInstanceID", "nClassInstanceID");
            tableMapping.ColumnMappings.Add("dtDate", "dtDate");
            tableMapping.ColumnMappings.Add("dtStartTime", "dtStartTime");
            tableMapping.ColumnMappings.Add("strClassCode", "strClassCode");
            tableMapping.ColumnMappings.Add("strBranchCode", "strBranchCode");
            tableMapping.ColumnMappings.Add("nPermanentInstructorID", "nPermanentInstructorID");
            tableMapping.ColumnMappings.Add("nReplacementInstructorID", "nReplacementInstructorID");
            tableMapping.ColumnMappings.Add("nActualInstructorID", "nActualInstructorID");
            tableMapping.ColumnMappings.Add("Attendance", "Attendance");
            tableMapping.ColumnMappings.Add("strEmployeeName", "strEmployeeName");
            tableMapping.ColumnMappings.Add("nClassScheduleID", "nClassScheduleID");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ACMS.Properties.Settings.Default.ACMSConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     CA.nClassInstanceID, CI.dtDate, CI.dtStartTime, CI.strClassCode, CI.strBranchCode, CI.nPermanentInstructorID, E.strEmployeeName, 
                      CI.nReplacementInstructorID, CI.nActualInstructorID, COUNT(CA.nClassInstanceID) AS Attendance, CI.nClassScheduleID
FROM         tblClassInstance AS CI INNER JOIN
                      tblClassAttendance AS CA ON CI.nClassInstanceID = CA.nClassInstanceID LEFT OUTER JOIN
                      tblEmployee AS E ON E.nEmployeeID = CI.nActualInstructorID
WHERE     (CA.nClassInstanceID IN
                          (SELECT     nClassInstanceID
                            FROM          tblClassInstance
                            WHERE      (dtDate = @dtdate) AND (strClassCode = @strClassCode)))
GROUP BY CA.nClassInstanceID, CI.dtDate, CI.dtStartTime, CI.strClassCode, CI.strBranchCode, CI.nPermanentInstructorID, E.strEmployeeName, CI.nClassScheduleID,
                      CI.nReplacementInstructorID, CI.nActualInstructorID, CI.nClassScheduleID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@strClassCode", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dtdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsClassInstance.tblClassInstanceDataTable dataTable, string strClassCode, global::System.Nullable<global::System.DateTime> dtdate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((strClassCode == null)) {
                throw new global::System.ArgumentNullException("strClassCode");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(strClassCode));
            }
            if ((dtdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(dtdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsClassInstance.tblClassInstanceDataTable GetData(string strClassCode, global::System.Nullable<global::System.DateTime> dtdate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((strClassCode == null)) {
                throw new global::System.ArgumentNullException("strClassCode");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(strClassCode));
            }
            if ((dtdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(dtdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            dsClassInstance.tblClassInstanceDataTable dataTable = new dsClassInstance.tblClassInstanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Security.Cryptography;
using System.IO;
using System.Reflection;
using System.Linq;
using System.Diagnostics;
using System.Configuration;

namespace updateCheck
{
    public partial class ACMSUpdate : Form
    {
        //private fmProgress m_fmProgress = null;
        public ACMSUpdate()
        {
            //InitializeComponent();
            checksum();
        }

        class ChecksumFile
        {
            public string filename { get; set; }
            public string checksums { get; set; }
        }

        public void checksum()
        {
            try
            {     
                
                //sourcePath is Server                
                string sourcePath = ConfigurationSettings.AppSettings["ACMSUpdateSourcePath"].ToString();
                
                //targetPath is Local
                string targetPath = System.IO.Path.GetDirectoryName(Application.ExecutablePath);

                int countServer = Directory.GetFiles(sourcePath, "*.*", SearchOption.AllDirectories).Length;
                int countLocal = Directory.GetFiles(targetPath, "*.*", SearchOption.AllDirectories).Length;

                string[] filesServer = Directory.GetFiles(sourcePath, "*.*", SearchOption.AllDirectories);
                string[] filesLocal = Directory.GetFiles(targetPath, "*.*", SearchOption.AllDirectories);

                Process[] acms = Process.GetProcessesByName("ACMS");
                Process[] updates = Process.GetProcessesByName("updateCheck");

                //BackgroundWorker bw = new BackgroundWorker();
                //bw.DoWork += new DoWorkEventHandler(bw_DoWork);
                //bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);

                //m_fmProgress = new fmProgress();
                //bw.RunWorkerAsync();
                //m_fmProgress.ShowDialog(this);
                //m_fmProgress = null;

                foreach (Process app in acms)
                {
                    app.Kill();
                }

                List<ChecksumFile> serverList = new List<ChecksumFile>();

                //populate server file into serverList
                for (int i = 0; i < countServer; i++)
                {
                    using (var md5 = MD5.Create())
                    {
                        using (var stream = File.OpenRead(filesServer[i]))
                        {
                            string checkval = BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", string.Empty);
                            ChecksumFile nchecksum = new ChecksumFile { filename = filesServer[i], checksums = checkval };
                            serverList.Add(nchecksum);
                            stream.Close();
                        }
                    }
                }

                List<ChecksumFile> localList = new List<ChecksumFile>();

                //populate local file into localList
                for (int i = 0; i < countLocal; i++)
                {
                    using (var md5 = MD5.Create())
                    {
                        using (var stream = File.OpenRead(filesLocal[i]))
                        {
                            string checkval = BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", string.Empty);
                            ChecksumFile nchecksum = new ChecksumFile { filename = filesLocal[i], checksums = checkval };
                            localList.Add(nchecksum);
                            stream.Close();
                        }
                    }
                }

                foreach (ChecksumFile local in localList)
                {                    
                    //check for extra file in local and delete it
                    ChecksumFile result2 = serverList.Find(
                    delegate(ChecksumFile server)
                    {                        
                        return Path.GetFileName(server.filename) == Path.GetFileName(local.filename);
                    }
                    );
                    if (result2 == null)
                    {                        
                        System.IO.File.Delete(local.filename);
                    }
                }
                
                foreach (ChecksumFile server in serverList)
                {                    
                    string tFile = targetPath + "\\" + Path.GetFileName(server.filename);
                    
                    //check for missing file in local and copy from server
                    ChecksumFile result1 = localList.Find(
                    delegate(ChecksumFile local)
                    {
                        return Path.GetFileName(local.filename) == Path.GetFileName(server.filename);
                    }
                    );
                    if (result1 == null)
                    {
                        System.IO.File.Copy(server.filename, tFile, true);
                    }
                    else
                    {
                        //check for different hash value and copy server file to local if different
                        ChecksumFile result = localList.Find(
                        delegate(ChecksumFile local)
                        {
                            return local.checksums == server.checksums;
                        }
                        );
                        if (result == null)
                        {
                            try
                            {
                                System.IO.File.Copy(server.filename, tFile, true);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                                break;
                            }
                        }
                    }
                }
                
                System.Diagnostics.Process.Start(targetPath + "\\ACMS.exe");
                foreach (Process update in updates)
                {
                    update.Kill();
                }
            }
            catch (Exception ex)
            {                
                MessageBox.Show(ex.Message);                
            }                        
        }

        //private void bw_DoWork(object sender, DoWorkEventArgs e)
        //{
        //    // Do some long running task...
        //    int iCount = 100;// new Random().Next(20, 50);
        //    for (int i = 0; i < iCount; i++)
        //    {
        //        // The Work to be performed...
        //        Thread.Sleep(100);

        //        m_fmProgress.lblDescription.Invoke(
        //            (MethodInvoker)delegate()
        //            {
        //                m_fmProgress.lblDescription.Text = "Please Wait! Updating files..... " + i.ToString() + "% of " + iCount.ToString() + '%';
        //                m_fmProgress.progressBar1.Value = Convert.ToInt32(i * (100.0 / iCount));
        //            }
        //        );

        //        if (m_fmProgress.Cancel)
        //        {
        //            e.Cancel = true;
        //            return;
        //        }
        //    }
        //}

        //private void bw_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        //{
        //    //Hide the Progress Form
        //    if (m_fmProgress != null)
        //    {
        //        m_fmProgress.Hide();
        //        m_fmProgress = null;
        //    }

        //    // Check to see if an error occured in the 
        //    // background process.
        //    if (e.Error != null)
        //    {
        //        MessageBox.Show(e.Error.Message);
        //        return;
        //    }

        //    // Check to see if the background process was cancelled.
        //    if (e.Cancelled)
        //    {
        //        MessageBox.Show("Updating cancelled.");
        //        return;
        //    }

        //    // Everything completed normally.
        //    // process the response using e.Result
        //    //   MessageBox.Show("Processing is complete.");
        //}
    }
}

